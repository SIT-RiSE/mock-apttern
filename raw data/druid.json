[
  {
    "variableName": "payload",
    "variableType": "Payload",
    "mockedClass": "Payload",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.storage.cloudfiles",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\cloudfiles-extensions\\src\\test\\java\\org\\apache\\druid\\storage\\cloudfiles\\CloudFilesByteSourceTest.java",
      "className": "CloudFilesByteSourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Payload payload = mock(Payload.class);",
        "line": 43,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "openStreamTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(payload.openStream()).thenReturn(stream);",
        "line": 48,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "openStreamTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(payload).openStream();",
        "line": 57,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "openStreamTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "stream",
    "variableType": "InputStream",
    "mockedClass": "InputStream",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.storage.cloudfiles",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\cloudfiles-extensions\\src\\test\\java\\org\\apache\\druid\\storage\\cloudfiles\\CloudFilesByteSourceTest.java",
      "className": "CloudFilesByteSourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "InputStream stream = mock(InputStream.class);",
        "line": 44,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "openStreamTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "cloudFilesObject",
    "variableType": "CloudFilesObject",
    "mockedClass": "CloudFilesObject",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.storage.cloudfiles",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\cloudfiles-extensions\\src\\test\\java\\org\\apache\\druid\\storage\\cloudfiles\\CloudFilesByteSourceTest.java",
      "className": "CloudFilesByteSourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CloudFilesObject cloudFilesObject = mock(CloudFilesObject.class);",
        "line": 42,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "openStreamTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(cloudFilesObject.getPayload()).thenReturn(payload);",
        "line": 47,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "openStreamTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(cloudFilesObject).getPayload();",
        "line": 56,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "openStreamTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "objectApi",
    "variableType": "CloudFilesObjectApiProxy",
    "mockedClass": "CloudFilesObjectApiProxy",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.storage.cloudfiles",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\cloudfiles-extensions\\src\\test\\java\\org\\apache\\druid\\storage\\cloudfiles\\CloudFilesByteSourceTest.java",
      "className": "CloudFilesByteSourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CloudFilesObjectApiProxy objectApi = mock(CloudFilesObjectApiProxy.class);",
        "line": 41,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "openStreamTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(objectApi.get(path, 0)).thenReturn(cloudFilesObject);",
        "line": 46,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "openStreamTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(objectApi).get(path, 0);",
        "line": 55,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "openStreamTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "payload",
    "variableType": "Payload",
    "mockedClass": "Payload",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.storage.cloudfiles",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\cloudfiles-extensions\\src\\test\\java\\org\\apache\\druid\\storage\\cloudfiles\\CloudFilesByteSourceTest.java",
      "className": "CloudFilesByteSourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Payload payload = mock(Payload.class);",
        "line": 67,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "openStreamWithRecoverableErrorTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(payload.openStream()).thenThrow(new IOException()).thenReturn(stream);",
        "line": 72,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "openStreamWithRecoverableErrorTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(payload, times(2)).openStream();",
        "line": 89,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "openStreamWithRecoverableErrorTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "stream",
    "variableType": "InputStream",
    "mockedClass": "InputStream",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.storage.cloudfiles",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\cloudfiles-extensions\\src\\test\\java\\org\\apache\\druid\\storage\\cloudfiles\\CloudFilesByteSourceTest.java",
      "className": "CloudFilesByteSourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "InputStream stream = mock(InputStream.class);",
        "line": 68,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "openStreamWithRecoverableErrorTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "cloudFilesObject",
    "variableType": "CloudFilesObject",
    "mockedClass": "CloudFilesObject",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.storage.cloudfiles",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\cloudfiles-extensions\\src\\test\\java\\org\\apache\\druid\\storage\\cloudfiles\\CloudFilesByteSourceTest.java",
      "className": "CloudFilesByteSourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CloudFilesObject cloudFilesObject = mock(CloudFilesObject.class);",
        "line": 66,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "openStreamWithRecoverableErrorTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(cloudFilesObject.getPayload()).thenReturn(payload);",
        "line": 71,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "openStreamWithRecoverableErrorTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(cloudFilesObject).getPayload();",
        "line": 88,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "openStreamWithRecoverableErrorTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "objectApi",
    "variableType": "CloudFilesObjectApiProxy",
    "mockedClass": "CloudFilesObjectApiProxy",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.storage.cloudfiles",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\cloudfiles-extensions\\src\\test\\java\\org\\apache\\druid\\storage\\cloudfiles\\CloudFilesByteSourceTest.java",
      "className": "CloudFilesByteSourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CloudFilesObjectApiProxy objectApi = mock(CloudFilesObjectApiProxy.class);",
        "line": 65,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "openStreamWithRecoverableErrorTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(objectApi.get(path, 0)).thenReturn(cloudFilesObject);",
        "line": 70,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "openStreamWithRecoverableErrorTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(objectApi).get(path, 0);",
        "line": 87,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "openStreamWithRecoverableErrorTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "api",
    "variableType": "CloudFilesApi",
    "mockedClass": "CloudFilesApi",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.storage.cloudfiles",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\cloudfiles-extensions\\src\\test\\java\\org\\apache\\druid\\storage\\cloudfiles\\CloudFilesDataSegmentPusherTest.java",
      "className": "CloudFilesDataSegmentPusherTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CloudFilesApi api = mock(CloudFilesApi.class);",
        "line": 57,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPush",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(api.getObjectApi(any(), any())).thenReturn(objectApi);",
        "line": 58,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPush",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(api, atLeastOnce()).getObjectApi(any(), any());",
        "line": 92,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPush",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "objectApi",
    "variableType": "ObjectApi",
    "mockedClass": "ObjectApi",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.storage.cloudfiles",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\cloudfiles-extensions\\src\\test\\java\\org\\apache\\druid\\storage\\cloudfiles\\CloudFilesDataSegmentPusherTest.java",
      "className": "CloudFilesDataSegmentPusherTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ObjectApi objectApi = mock(ObjectApi.class);",
        "line": 54,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPush",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(objectApi.put(any(), any())).thenReturn(null);",
        "line": 55,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPush",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(objectApi, atLeastOnce()).put(any(), any());",
        "line": 91,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPush",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "swiftObject",
    "variableType": "SwiftObject",
    "mockedClass": "SwiftObject",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.storage.cloudfiles",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\cloudfiles-extensions\\src\\test\\java\\org\\apache\\druid\\storage\\cloudfiles\\CloudFilesObjectApiProxyTest.java",
      "className": "CloudFilesObjectApiProxyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SwiftObject swiftObject = mock(SwiftObject.class);",
        "line": 44,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(swiftObject.getPayload()).thenReturn(payload);",
        "line": 49,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(swiftObject).getPayload();",
        "line": 61,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "payload",
    "variableType": "Payload",
    "mockedClass": "Payload",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.storage.cloudfiles",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\cloudfiles-extensions\\src\\test\\java\\org\\apache\\druid\\storage\\cloudfiles\\CloudFilesObjectApiProxyTest.java",
      "className": "CloudFilesObjectApiProxyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Payload payload = mock(Payload.class);",
        "line": 45,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "cloudFilesApi",
    "variableType": "CloudFilesApi",
    "mockedClass": "CloudFilesApi",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.storage.cloudfiles",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\cloudfiles-extensions\\src\\test\\java\\org\\apache\\druid\\storage\\cloudfiles\\CloudFilesObjectApiProxyTest.java",
      "className": "CloudFilesObjectApiProxyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CloudFilesApi cloudFilesApi = mock(CloudFilesApi.class);",
        "line": 42,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(cloudFilesApi.getObjectApi(region, container)).thenReturn(objectApi);",
        "line": 47,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(cloudFilesApi).getObjectApi(region, container);",
        "line": 59,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "objectApi",
    "variableType": "ObjectApi",
    "mockedClass": "ObjectApi",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.storage.cloudfiles",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\cloudfiles-extensions\\src\\test\\java\\org\\apache\\druid\\storage\\cloudfiles\\CloudFilesObjectApiProxyTest.java",
      "className": "CloudFilesObjectApiProxyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ObjectApi objectApi = mock(ObjectApi.class);",
        "line": 43,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(objectApi.get(path)).thenReturn(swiftObject);",
        "line": 48,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(objectApi).get(path);",
        "line": 60,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "producer",
    "variableType": "KafkaProducer<String,String>",
    "mockedClass": "KafkaProducer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.emitter.kafka",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\kafka-emitter\\src\\test\\java\\org\\apache\\druid\\emitter\\kafka\\KafkaEmitterTest.java",
      "className": "KafkaEmitterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final KafkaProducer<String, String> producer = mock(KafkaProducer.class);",
        "line": 105,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testKafkaEmitter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(producer.send(any(), any())).then((invocation) -> {\r\n    countDownSentEvents.countDown();\r\n    return null;\r\n});",
        "line": 122,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testKafkaEmitter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "pod",
    "variableType": "Pod",
    "mockedClass": "Pod",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.k8s.overlord.common",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\kubernetes-overlord-extensions\\src\\test\\java\\org\\apache\\druid\\k8s\\overlord\\common\\PeonPhaseTest.java",
      "className": "PeonPhaseTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Pod pod = mock(Pod.class);",
        "line": 36,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetPhaseForToMakeCoverageHappy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(pod.getStatus()).thenReturn(status);",
        "line": 39,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetPhaseForToMakeCoverageHappy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "status",
    "variableType": "PodStatus",
    "mockedClass": "PodStatus",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.k8s.overlord.common",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\kubernetes-overlord-extensions\\src\\test\\java\\org\\apache\\druid\\k8s\\overlord\\common\\PeonPhaseTest.java",
      "className": "PeonPhaseTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "PodStatus status = mock(PodStatus.class);",
        "line": 37,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetPhaseForToMakeCoverageHappy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(status.getPhase()).thenReturn(\"Succeeded\");",
        "line": 38,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetPhaseForToMakeCoverageHappy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockTestLogs",
    "variableType": "TaskLogs",
    "mockedClass": "TaskLogs",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.k8s.overlord.taskadapter",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\kubernetes-overlord-extensions\\src\\test\\java\\org\\apache\\druid\\k8s\\overlord\\taskadapter\\K8sTaskAdapterTest.java",
      "className": "K8sTaskAdapterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskLogs mockTestLogs = Mockito.mock(TaskLogs.class);",
        "line": 283,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "toTask_useTaskPayloadManager",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockTestLogs.streamTaskPayload(\"ID\")).thenReturn(com.google.common.base.Optional.of(new ByteArrayInputStream(jsonMapper.writeValueAsString(taskInTaskPayloadManager).getBytes(Charset.defaultCharset()))));",
        "line": 284,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "toTask_useTaskPayloadManager",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockTestLogs",
    "variableType": "TaskLogs",
    "mockedClass": "TaskLogs",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.k8s.overlord.taskadapter",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\kubernetes-overlord-extensions\\src\\test\\java\\org\\apache\\druid\\k8s\\overlord\\taskadapter\\PodTemplateTaskAdapterTest.java",
      "className": "PodTemplateTaskAdapterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskLogs mockTestLogs = Mockito.mock(TaskLogs.class);",
        "line": 433,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_toTask_useTaskPayloadManager",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockTestLogs.streamTaskPayload(\"id\")).thenReturn(Optional.of(new ByteArrayInputStream(mapper.writeValueAsString(expected).getBytes(Charset.defaultCharset()))));",
        "line": 434,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_toTask_useTaskPayloadManager",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "task",
    "variableType": "Task",
    "mockedClass": "Task",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.k8s.overlord.taskadapter",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\kubernetes-overlord-extensions\\src\\test\\java\\org\\apache\\druid\\k8s\\overlord\\taskadapter\\PodTemplateTaskAdapterTest.java",
      "className": "PodTemplateTaskAdapterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Task task = EasyMock.mock(Task.class);",
        "line": 505,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_fromTask_taskSupportsQueries",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "EasyMock.verify(task);",
        "line": 514,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_fromTask_taskSupportsQueries",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "taskLogs",
    "variableType": "TaskLogs",
    "mockedClass": "TaskLogs",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.k8s.overlord.taskadapter",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\kubernetes-overlord-extensions\\src\\test\\java\\org\\apache\\druid\\k8s\\overlord\\taskadapter\\PodTemplateTaskAdapterTest.java",
      "className": "PodTemplateTaskAdapterTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate TaskLogs taskLogs;",
        "line": 73,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "client",
    "variableType": "StatsDClient",
    "mockedClass": "StatsDClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.emitter.statsd",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\statsd-emitter\\src\\test\\java\\org\\apache\\druid\\emitter\\statsd\\StatsDEmitterTest.java",
      "className": "StatsDEmitterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "StatsDClient client = mock(StatsDClient.class);",
        "line": 44,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConvertRange",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(client).gauge(\"broker.query.cache.total.hitRate\", 54);",
        "line": 55,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConvertRange",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "client",
    "variableType": "StatsDClient",
    "mockedClass": "StatsDClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.emitter.statsd",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\statsd-emitter\\src\\test\\java\\org\\apache\\druid\\emitter\\statsd\\StatsDEmitterTest.java",
      "className": "StatsDEmitterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "StatsDClient client = mock(StatsDClient.class);",
        "line": 61,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConvertRangeWithDogstatsd",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(client).gauge(\"broker.query.cache.total.hitRate\", 0.54);",
        "line": 72,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConvertRangeWithDogstatsd",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "client",
    "variableType": "StatsDClient",
    "mockedClass": "StatsDClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.emitter.statsd",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\statsd-emitter\\src\\test\\java\\org\\apache\\druid\\emitter\\statsd\\StatsDEmitterTest.java",
      "className": "StatsDEmitterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "StatsDClient client = mock(StatsDClient.class);",
        "line": 78,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNoConvertRange",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(client).time(\"broker.query.time.data-source.groupBy\", 10);",
        "line": 98,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNoConvertRange",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "client",
    "variableType": "StatsDClient",
    "mockedClass": "StatsDClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.emitter.statsd",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\statsd-emitter\\src\\test\\java\\org\\apache\\druid\\emitter\\statsd\\StatsDEmitterTest.java",
      "className": "StatsDEmitterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "StatsDClient client = mock(StatsDClient.class);",
        "line": 104,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConfigOptions",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(client).time(\"brokerHost1#broker#query#time#data-source#groupBy\", 10);",
        "line": 124,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConfigOptions",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "client",
    "variableType": "StatsDClient",
    "mockedClass": "StatsDClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.emitter.statsd",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\statsd-emitter\\src\\test\\java\\org\\apache\\druid\\emitter\\statsd\\StatsDEmitterTest.java",
      "className": "StatsDEmitterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "StatsDClient client = mock(StatsDClient.class);",
        "line": 130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDogstatsdEnabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(client).time(\"broker#query#time\", 10, \"dataSource:data-source\", \"type:groupBy\", \"hostname:brokerHost1\");",
        "line": 150,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDogstatsdEnabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "client",
    "variableType": "StatsDClient",
    "mockedClass": "StatsDClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.emitter.statsd",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\statsd-emitter\\src\\test\\java\\org\\apache\\druid\\emitter\\statsd\\StatsDEmitterTest.java",
      "className": "StatsDEmitterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "StatsDClient client = mock(StatsDClient.class);",
        "line": 157,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testBlankHolderOptions",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(client).count(\"brokerHost1.broker.jvm.gc.count.G1-GC\", 1);",
        "line": 168,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testBlankHolderOptions",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "client",
    "variableType": "StatsDClient",
    "mockedClass": "StatsDClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.emitter.statsd",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\statsd-emitter\\src\\test\\java\\org\\apache\\druid\\emitter\\statsd\\StatsDEmitterTest.java",
      "className": "StatsDEmitterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "StatsDClient client = mock(StatsDClient.class);",
        "line": 174,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testServiceAsTagOption",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(client).time(\"druid.query.time\", 10, \"druid_service:druid/broker\", \"dataSource:data-source\", \"type:groupBy\", \"hostname:brokerHost1\");",
        "line": 186,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testServiceAsTagOption",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "client",
    "variableType": "StatsDClient",
    "mockedClass": "StatsDClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.emitter.statsd",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-contrib\\statsd-emitter\\src\\test\\java\\org\\apache\\druid\\emitter\\statsd\\StatsDEmitterTest.java",
      "className": "StatsDEmitterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "StatsDClient client = mock(StatsDClient.class);",
        "line": 193,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAlertEvent",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(client).recordEvent(eventArgumentCaptor.capture(), eq(\"feed:alerts\"), eq(\"druid_service:druid/broker\"), eq(\"severity:anomaly\"), eq(\"hostname:brokerHost1\"));",
        "line": 214,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAlertEvent",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "registry",
    "variableType": "SchemaRegistryClient",
    "mockedClass": "SchemaRegistryClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.data.input.avro",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\avro-extensions\\src\\test\\java\\org\\apache\\druid\\data\\input\\avro\\SchemaRegistryBasedAvroBytesDecoderTest.java",
      "className": "SchemaRegistryBasedAvroBytesDecoderTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private SchemaRegistryClient registry;",
        "line": 53,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "registry = Mockito.mock(SchemaRegistryClient.class);",
        "line": 58,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Given\r\nMockito.when(registry.getSchemaById(ArgumentMatchers.eq(1234))).thenReturn(new AvroSchema(SomeAvroDatum.getClassSchema()));",
        "line": 116,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Given\r\nMockito.when(registry.getSchemaById(ArgumentMatchers.eq(1234))).thenReturn(new AvroSchema(SomeAvroDatum.getClassSchema()));",
        "line": 141,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParseCorruptedPartial",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Given\r\nMockito.when(registry.getSchemaById(ArgumentMatchers.eq(1234))).thenReturn(Mockito.mock(ParsedSchema.class));",
        "line": 156,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParseWrongSchemaType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Given\r\nMockito.when(registry.getSchemaById(ArgumentMatchers.anyInt())).thenThrow(new IOException(\"no pasaran\"));",
        "line": 167,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParseWrongId",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "cloudBlobClient",
    "variableType": "CloudBlobClient",
    "mockedClass": "CloudBlobClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.storage.azure",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\azure-extensions\\src\\test\\java\\org\\apache\\druid\\storage\\azure\\AzureStorageTest.java",
      "className": "AzureStorageTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "CloudBlobClient cloudBlobClient = Mockito.mock(CloudBlobClient.class);",
        "line": 42,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "cloudBlobContainer",
    "variableType": "CloudBlobContainer",
    "mockedClass": "CloudBlobContainer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.storage.azure",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\azure-extensions\\src\\test\\java\\org\\apache\\druid\\storage\\azure\\AzureStorageTest.java",
      "className": "AzureStorageTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "CloudBlobContainer cloudBlobContainer = Mockito.mock(CloudBlobContainer.class);",
        "line": 43,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "authValidator",
    "variableType": "AuthValidator",
    "mockedClass": "AuthValidator",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.security.authentication",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\druid-basic-security\\src\\test\\java\\org\\apache\\druid\\security\\authentication\\CoordinatorBasicAuthenticatorResourceTest.java",
      "className": "CoordinatorBasicAuthenticatorResourceTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate AuthValidator authValidator;",
        "line": 69,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "result",
    "variableType": "SearchResult",
    "mockedClass": "SearchResult",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Helper\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.security.authentication.validator",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\druid-basic-security\\src\\test\\java\\org\\apache\\druid\\security\\authentication\\validator\\LDAPCredentialsValidatorTest.java",
      "className": "MockContextFactory"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SearchResult result = Mockito.mock(SearchResult.class);",
        "line": 108,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "getInitialContext",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Override"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(result.getNameInNamespace()).thenReturn(\"uid=user,ou=Users,dc=example,dc=org\");",
        "line": 109,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "getInitialContext",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Override"
          ]
        }
      }
    ]
  },
  {
    "variableName": "context",
    "variableType": "LdapContext",
    "mockedClass": "LdapContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Helper\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.security.authentication.validator",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\druid-basic-security\\src\\test\\java\\org\\apache\\druid\\security\\authentication\\validator\\LDAPCredentialsValidatorTest.java",
      "className": "MockContextFactory"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "LdapContext context = Mockito.mock(LdapContext.class);",
        "line": 105,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "getInitialContext",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Override"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(context.search(ArgumentMatchers.eq(LDAP_CONFIG.getBaseDn()), ArgumentMatchers.eq(StringUtils.format(LDAP_CONFIG.getUserSearch(), encodedUsername)), ArgumentMatchers.any(SearchControls.class))).thenReturn(new NamingEnumeration<SearchResult>() {\r\n\r\n    @Override\r\n    public SearchResult next() {\r\n        return results.next();\r\n    }\r\n\r\n    @Override\r\n    public boolean hasMore() {\r\n        return results.hasNext();\r\n    }\r\n\r\n    @Override\r\n    public void close() {\r\n        // No-op\r\n    }\r\n\r\n    @Override\r\n    public boolean hasMoreElements() {\r\n        return results.hasNext();\r\n    }\r\n\r\n    @Override\r\n    public SearchResult nextElement() {\r\n        return results.next();\r\n    }\r\n});",
        "line": 112,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "getInitialContext",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Override"
          ]
        }
      }
    ]
  },
  {
    "variableName": "authValidator",
    "variableType": "AuthValidator",
    "mockedClass": "AuthValidator",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.security.authorization",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\druid-basic-security\\src\\test\\java\\org\\apache\\druid\\security\\authorization\\CoordinatorBasicAuthorizerResourceTest.java",
      "className": "CoordinatorBasicAuthorizerResourceTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate AuthValidator authValidator;",
        "line": 86,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "req",
    "variableType": "HttpServletRequest",
    "mockedClass": "HttpServletRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.security.authorization",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\druid-basic-security\\src\\test\\java\\org\\apache\\druid\\security\\authorization\\CoordinatorBasicAuthorizerResourceTest.java",
      "className": "CoordinatorBasicAuthorizerResourceTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate HttpServletRequest req;",
        "line": 88,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "handler",
    "variableType": "BasicAuthenticatorResourceHandler",
    "mockedClass": "BasicAuthenticatorResourceHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.security.basic.authentication.endpoint",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\druid-basic-security\\src\\test\\java\\org\\apache\\druid\\security\\basic\\authentication\\endpoint\\BasicAuthenticatorResourceTest.java",
      "className": "BasicAuthenticatorResourceTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock(answer = Answers.RETURNS_MOCKS)\r\nprivate BasicAuthenticatorResourceHandler handler;",
        "line": 43,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "authValidator",
    "variableType": "AuthValidator",
    "mockedClass": "AuthValidator",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.security.basic.authentication.endpoint",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\druid-basic-security\\src\\test\\java\\org\\apache\\druid\\security\\basic\\authentication\\endpoint\\BasicAuthenticatorResourceTest.java",
      "className": "BasicAuthenticatorResourceTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate AuthValidator authValidator;",
        "line": 45,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "update",
    "variableType": "BasicAuthenticatorCredentialUpdate",
    "mockedClass": "BasicAuthenticatorCredentialUpdate",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.security.basic.authentication.endpoint",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\druid-basic-security\\src\\test\\java\\org\\apache\\druid\\security\\basic\\authentication\\endpoint\\BasicAuthenticatorResourceTest.java",
      "className": "BasicAuthenticatorResourceTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate BasicAuthenticatorCredentialUpdate update;",
        "line": 49,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "req",
    "variableType": "HttpServletRequest",
    "mockedClass": "HttpServletRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.security.basic.authentication.endpoint",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\druid-basic-security\\src\\test\\java\\org\\apache\\druid\\security\\basic\\authentication\\endpoint\\BasicAuthenticatorResourceTest.java",
      "className": "BasicAuthenticatorResourceTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate HttpServletRequest req;",
        "line": 47,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "resourceAction",
    "variableType": "ResourceAction",
    "mockedClass": "ResourceAction",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.security.basic.authorization.endpoint",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\druid-basic-security\\src\\test\\java\\org\\apache\\druid\\security\\basic\\authorization\\endpoint\\BasicAuthorizerResourceTest.java",
      "className": "BasicAuthorizerResourceTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ResourceAction resourceAction;",
        "line": 55,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "authValidator",
    "variableType": "AuthValidator",
    "mockedClass": "AuthValidator",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.security.basic.authorization.endpoint",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\druid-basic-security\\src\\test\\java\\org\\apache\\druid\\security\\basic\\authorization\\endpoint\\BasicAuthorizerResourceTest.java",
      "className": "BasicAuthorizerResourceTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate AuthValidator authValidator;",
        "line": 51,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "groupMapping",
    "variableType": "BasicAuthorizerGroupMapping",
    "mockedClass": "BasicAuthorizerGroupMapping",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.security.basic.authorization.endpoint",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\druid-basic-security\\src\\test\\java\\org\\apache\\druid\\security\\basic\\authorization\\endpoint\\BasicAuthorizerResourceTest.java",
      "className": "BasicAuthorizerResourceTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock(answer = Answers.RETURNS_MOCKS)\r\nprivate BasicAuthorizerGroupMapping groupMapping;",
        "line": 53,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "resourceHandler",
    "variableType": "BasicAuthorizerResourceHandler",
    "mockedClass": "BasicAuthorizerResourceHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.security.basic.authorization.endpoint",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\druid-basic-security\\src\\test\\java\\org\\apache\\druid\\security\\basic\\authorization\\endpoint\\BasicAuthorizerResourceTest.java",
      "className": "BasicAuthorizerResourceTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock(answer = Answers.RETURNS_MOCKS)\r\nprivate BasicAuthorizerResourceHandler resourceHandler;",
        "line": 49,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "req",
    "variableType": "HttpServletRequest",
    "mockedClass": "HttpServletRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.security.basic.authorization.endpoint",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\druid-basic-security\\src\\test\\java\\org\\apache\\druid\\security\\basic\\authorization\\endpoint\\BasicAuthorizerResourceTest.java",
      "className": "BasicAuthorizerResourceTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate HttpServletRequest req;",
        "line": 58,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "en2",
    "variableType": "ExtractionNamespace",
    "mockedClass": "ExtractionNamespace",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.query.lookup",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\lookups-cached-global\\src\\test\\java\\org\\apache\\druid\\query\\lookup\\NamespaceLookupExtractorFactoryTest.java",
      "className": "NamespaceLookupExtractorFactoryTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final ExtractionNamespace en1 = mock(ExtractionNamespace.class), en2 = mock(ExtractionNamespace.class);",
        "line": 343,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReplaces",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoInteractions(en1, en2);",
        "line": 363,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReplaces",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "en1",
    "variableType": "ExtractionNamespace",
    "mockedClass": "ExtractionNamespace",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.query.lookup",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\lookups-cached-global\\src\\test\\java\\org\\apache\\druid\\query\\lookup\\NamespaceLookupExtractorFactoryTest.java",
      "className": "NamespaceLookupExtractorFactoryTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final ExtractionNamespace en1 = mock(ExtractionNamespace.class), en2 = mock(ExtractionNamespace.class);",
        "line": 343,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReplaces",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoInteractions(en1, en2);",
        "line": 363,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReplaces",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "extractionNamespace",
    "variableType": "ExtractionNamespace",
    "mockedClass": "ExtractionNamespace",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.lookup",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\lookups-cached-global\\src\\test\\java\\org\\apache\\druid\\query\\lookup\\NamespaceLookupExtractorFactoryTest.java",
      "className": "NamespaceLookupExtractorFactoryTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final ExtractionNamespace extractionNamespace = mock(ExtractionNamespace.class);",
        "line": 470,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExceptionalIntrospectionHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "scheduler",
    "variableType": "CacheScheduler",
    "mockedClass": "CacheScheduler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n— Other Methods\n\nVerification:\n— Test Case\n— Other Methods",
    "classContext": {
      "packageName": "org.apache.druid.query.lookup",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\lookups-cached-global\\src\\test\\java\\org\\apache\\druid\\query\\lookup\\NamespaceLookupExtractorFactoryTest.java",
      "className": "NamespaceLookupExtractorFactoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private final CacheScheduler scheduler = mock(CacheScheduler.class);",
        "line": 77,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(scheduler).scheduleAndWait(extractionNamespace, 60000L);",
        "line": 155,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 157,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(scheduler.schedule(extractionNamespace)).thenReturn(entry);",
        "line": 164,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartReturnsImmediately",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(scheduler).schedule(any());",
        "line": 175,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartReturnsImmediately",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 177,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartReturnsImmediately",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(scheduler.scheduleAndWait(extractionNamespace, 1L)).thenReturn(null);",
        "line": 184,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartReturnsImmediatelyAndFails",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(scheduler).scheduleAndWait(extractionNamespace, 1L);",
        "line": 195,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartReturnsImmediatelyAndFails",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 196,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartReturnsImmediatelyAndFails",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(scheduler).scheduleAndWait(extractionNamespace, 60000L);",
        "line": 214,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartStopStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 215,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartStopStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(scheduler).scheduleAndWait(extractionNamespace, 60000L);",
        "line": 231,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartStart",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 232,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartStart",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(scheduler).scheduleAndWait(extractionNamespace, 60000L);",
        "line": 255,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartGetStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 260,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartGetStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(scheduler).scheduleAndWait(extractionNamespace, 60000L);",
        "line": 285,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartRacyGetDuringDelete",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 287,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartRacyGetDuringDelete",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(scheduler.scheduleAndWait(extractionNamespace, 60000L)).thenReturn(entry);",
        "line": 293,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "expectScheduleAndWaitOnce",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(scheduler.scheduleAndWait(extractionNamespace, 60000L)).thenReturn(null);",
        "line": 316,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartFailsToSchedule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(scheduler).scheduleAndWait(extractionNamespace, 60000L);",
        "line": 333,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartFailsToSchedule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 337,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartFailsToSchedule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(scheduler.scheduleAndWait(eq(extractionNamespace), anyLong())).thenReturn(entry);",
        "line": 471,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExceptionalIntrospectionHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(scheduler).scheduleAndWait(eq(extractionNamespace), anyLong());",
        "line": 483,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExceptionalIntrospectionHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 484,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExceptionalIntrospectionHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 497,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExceptionalIntrospectionHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 506,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "validateNotFound",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 521,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "validateNotFound",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "entry",
    "variableType": "CacheScheduler.Entry",
    "mockedClass": "CacheScheduler.Entry",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n— Other Methods\n\nVerification:\n— Test Case\n— Other Methods",
    "classContext": {
      "packageName": "org.apache.druid.query.lookup",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\lookups-cached-global\\src\\test\\java\\org\\apache\\druid\\query\\lookup\\NamespaceLookupExtractorFactoryTest.java",
      "className": "NamespaceLookupExtractorFactoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private final CacheScheduler.Entry entry = mock(CacheScheduler.Entry.class);",
        "line": 78,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(entry).close();",
        "line": 156,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 157,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(entry).close();",
        "line": 176,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartReturnsImmediately",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 177,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartReturnsImmediately",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 196,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartReturnsImmediatelyAndFails",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(entry).close();",
        "line": 213,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartStopStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 215,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartStopStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 232,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartStart",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entry.getCacheState()).thenReturn(versionedCache);",
        "line": 241,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartGetStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entry.getCache()).thenReturn(new HashMap<String, String>());",
        "line": 242,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartGetStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(entry).getCacheState();",
        "line": 256,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartGetStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(entry).close();",
        "line": 257,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartGetStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 260,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartGetStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entry.getCacheState()).thenReturn(CacheScheduler.NoCache.ENTRY_CLOSED);",
        "line": 276,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartRacyGetDuringDelete",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(entry).getCacheState();",
        "line": 286,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartRacyGetDuringDelete",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 287,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartRacyGetDuringDelete",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 337,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartFailsToSchedule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 484,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExceptionalIntrospectionHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entry.getCacheState()).thenReturn(CacheScheduler.NoCache.CACHE_NOT_INITIALIZED);",
        "line": 488,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExceptionalIntrospectionHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(entry).getCacheState();",
        "line": 493,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExceptionalIntrospectionHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 497,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExceptionalIntrospectionHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 506,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "validateNotFound",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entry.getCacheState()).thenReturn(versionedCache);",
        "line": 509,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "validateNotFound",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entry.getCache()).thenReturn(new HashMap<String, String>());",
        "line": 510,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "validateNotFound",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(entry).getCacheState();",
        "line": 517,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "validateNotFound",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(entry, atMostOnce()).getCache();",
        "line": 518,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "validateNotFound",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 521,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "validateNotFound",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "versionedCache",
    "variableType": "CacheScheduler.VersionedCache",
    "mockedClass": "CacheScheduler.VersionedCache",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n— Other Methods\n\nVerification:\n— Test Case\n— Other Methods",
    "classContext": {
      "packageName": "org.apache.druid.query.lookup",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\lookups-cached-global\\src\\test\\java\\org\\apache\\druid\\query\\lookup\\NamespaceLookupExtractorFactoryTest.java",
      "className": "NamespaceLookupExtractorFactoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private final CacheScheduler.VersionedCache versionedCache = mock(CacheScheduler.VersionedCache.class);",
        "line": 79,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 157,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 177,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartReturnsImmediately",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 196,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartReturnsImmediatelyAndFails",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 215,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartStopStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 232,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartStart",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(versionedCache.getCache()).thenReturn(new HashMap<>());",
        "line": 243,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartGetStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(versionedCache.getVersion()).thenReturn(\"0\");",
        "line": 244,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartGetStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(versionedCache).getVersion();",
        "line": 258,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartGetStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(versionedCache, atLeastOnce()).getCache();",
        "line": 259,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartGetStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 260,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartGetStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 287,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimpleStartRacyGetDuringDelete",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 337,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartFailsToSchedule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 484,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExceptionalIntrospectionHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 497,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExceptionalIntrospectionHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 506,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "validateNotFound",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(versionedCache.getCache()).thenReturn(new HashMap<>());",
        "line": 511,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "validateNotFound",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(versionedCache.getVersion()).thenThrow(new ISE(\"some exception\"));",
        "line": 512,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "validateNotFound",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(versionedCache, atMostOnce()).getCache();",
        "line": 519,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "validateNotFound",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(versionedCache).getVersion();",
        "line": 520,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "validateNotFound",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(scheduler, entry, versionedCache);",
        "line": 521,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "validateNotFound",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "taskActionClient",
    "variableType": "TaskActionClient",
    "mockedClass": "TaskActionClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\ControllerImplTest.java",
      "className": "ControllerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final TaskActionClient taskActionClient = EasyMock.mock(TaskActionClient.class);",
        "line": 69,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_performSegmentPublish_ok",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "taskActionClient",
    "variableType": "TaskActionClient",
    "mockedClass": "TaskActionClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\ControllerImplTest.java",
      "className": "ControllerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final TaskActionClient taskActionClient = EasyMock.mock(TaskActionClient.class);",
        "line": 83,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_performSegmentPublish_publishFail",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "taskActionClient",
    "variableType": "TaskActionClient",
    "mockedClass": "TaskActionClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\ControllerImplTest.java",
      "className": "ControllerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final TaskActionClient taskActionClient = EasyMock.mock(TaskActionClient.class);",
        "line": 101,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_performSegmentPublish_publishException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "taskActionClient",
    "variableType": "TaskActionClient",
    "mockedClass": "TaskActionClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\ControllerImplTest.java",
      "className": "ControllerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final TaskActionClient taskActionClient = EasyMock.mock(TaskActionClient.class);",
        "line": 119,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_performSegmentPublish_publishLockPreemptedException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "stageDefinition",
    "variableType": "StageDefinition",
    "mockedClass": "StageDefinition",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\ControllerImplTest.java",
      "className": "ControllerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate StageDefinition stageDefinition;",
        "line": 47,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "clusterBy",
    "variableType": "ClusterBy",
    "mockedClass": "ClusterBy",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\ControllerImplTest.java",
      "className": "ControllerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ClusterBy clusterBy;",
        "line": 49,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dataServerClient",
    "variableType": "DataServerClient",
    "mockedClass": "DataServerClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\LoadedSegmentDataProviderTest.java",
      "className": "LoadedSegmentDataProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private DataServerClient dataServerClient;",
        "line": 95,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "dataServerClient = mock(DataServerClient.class);",
        "line": 104,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(dataServerClient, times(3)).run(any(), any(), any(), any());",
        "line": 205,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testServerNotFoundWithoutHandoffShouldThrowException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "coordinatorClient",
    "variableType": "CoordinatorClient",
    "mockedClass": "CoordinatorClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\LoadedSegmentDataProviderTest.java",
      "className": "LoadedSegmentDataProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private CoordinatorClient coordinatorClient;",
        "line": 96,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "coordinatorClient = mock(CoordinatorClient.class);",
        "line": 105,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "target",
    "variableType": "LoadedSegmentDataProvider",
    "mockedClass": "LoadedSegmentDataProvider",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\LoadedSegmentDataProviderTest.java",
      "className": "LoadedSegmentDataProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private LoadedSegmentDataProvider target;",
        "line": 99,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = spy(new LoadedSegmentDataProvider(DATASOURCE1, new ChannelCounters(), mock(ServiceClientFactory.class), coordinatorClient, DruidServiceTestUtils.newJsonMapper(), queryToolChestWarehouse, Execs.scheduledSingleThreaded(\"query-cancellation-executor\")));",
        "line": 127,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "controllerContext",
    "variableType": "ControllerContext",
    "mockedClass": "ControllerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\MSQTasksTest.java",
      "className": "MSQTasksTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ControllerContext controllerContext = mock(ControllerContext.class);",
        "line": 217,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_queryWithoutEnoughSlots_shouldThrowException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(controllerContext.workerManager()).thenReturn(new TasksTestWorkerManagerClient(numSlots));",
        "line": 218,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_queryWithoutEnoughSlots_shouldThrowException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "brokerClient",
    "variableType": "BrokerClient",
    "mockedClass": "BrokerClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n— Lazy-init via Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\SegmentLoadStatusFetcherTest.java",
      "className": "SegmentLoadStatusFetcherTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private BrokerClient brokerClient;",
        "line": 50,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "brokerClient = mock(BrokerClient.class);",
        "line": 58,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSingleVersionWaitsForLoadCorrectly",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(brokerClient, times(5)).sendQuery(any());",
        "line": 89,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSingleVersionWaitsForLoadCorrectly",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "brokerClient = mock(BrokerClient.class);",
        "line": 95,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMultipleVersionWaitsForLoadCorrectly",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(brokerClient, times(5)).sendQuery(any());",
        "line": 126,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMultipleVersionWaitsForLoadCorrectly",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "brokerClient = mock(BrokerClient.class);",
        "line": 132,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "triggerCancellationFromAnotherThread",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "workerContext",
    "variableType": "WorkerContext",
    "mockedClass": "WorkerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\WorkerImplTest.java",
      "className": "WorkerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nWorkerContext workerContext;",
        "line": 37,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "snapshot",
    "variableType": "ClusterByStatisticsSnapshot",
    "mockedClass": "ClusterByStatisticsSnapshot",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\WorkerSketchFetcherTest.java",
      "className": "WorkerSketchFetcherTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ClusterByStatisticsSnapshot snapshot = mock(ClusterByStatisticsSnapshot.class);",
        "line": 107,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_submitFetcherTask_parallelFetch",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "snapshot",
    "variableType": "ClusterByStatisticsSnapshot",
    "mockedClass": "ClusterByStatisticsSnapshot",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\WorkerSketchFetcherTest.java",
      "className": "WorkerSketchFetcherTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ClusterByStatisticsSnapshot snapshot = mock(ClusterByStatisticsSnapshot.class);",
        "line": 130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_submitFetcherTask_sequentialFetch",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "snapshot",
    "variableType": "ClusterByStatisticsSnapshot",
    "mockedClass": "ClusterByStatisticsSnapshot",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Other Methods\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\WorkerSketchFetcherTest.java",
      "className": "WorkerSketchFetcherTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ClusterByStatisticsSnapshot snapshot = mock(ClusterByStatisticsSnapshot.class);",
        "line": 349,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "workersWithFailedFetchSequential",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "snapshot",
    "variableType": "ClusterByStatisticsSnapshot",
    "mockedClass": "ClusterByStatisticsSnapshot",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Other Methods\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\WorkerSketchFetcherTest.java",
      "className": "WorkerSketchFetcherTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ClusterByStatisticsSnapshot snapshot = mock(ClusterByStatisticsSnapshot.class);",
        "line": 360,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "workersWithFailedFetchParallel",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "stageDefinition",
    "variableType": "StageDefinition",
    "mockedClass": "StageDefinition",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\WorkerSketchFetcherTest.java",
      "className": "WorkerSketchFetcherTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate StageDefinition stageDefinition;",
        "line": 64,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "kernel",
    "variableType": "ControllerQueryKernel",
    "mockedClass": "ControllerQueryKernel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\WorkerSketchFetcherTest.java",
      "className": "WorkerSketchFetcherTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ControllerQueryKernel kernel;",
        "line": 61,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "completeKeyStatisticsInformation",
    "variableType": "CompleteKeyStatisticsInformation",
    "mockedClass": "CompleteKeyStatisticsInformation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\WorkerSketchFetcherTest.java",
      "className": "WorkerSketchFetcherTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate CompleteKeyStatisticsInformation completeKeyStatisticsInformation;",
        "line": 55,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "workerClient",
    "variableType": "WorkerClient",
    "mockedClass": "WorkerClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\WorkerSketchFetcherTest.java",
      "className": "WorkerSketchFetcherTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate WorkerClient workerClient;",
        "line": 66,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "workerTaskLauncher",
    "variableType": "MSQWorkerTaskLauncher",
    "mockedClass": "MSQWorkerTaskLauncher",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\WorkerSketchFetcherTest.java",
      "className": "WorkerSketchFetcherTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate MSQWorkerTaskLauncher workerTaskLauncher;",
        "line": 58,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "target",
    "variableType": "WorkerSketchFetcher",
    "mockedClass": "WorkerSketchFetcher",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n— Lazy-init via Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\WorkerSketchFetcherTest.java",
      "className": "WorkerSketchFetcherTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private WorkerSketchFetcher target;",
        "line": 69,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = spy(new WorkerSketchFetcher(workerClient, workerTaskLauncher, true));",
        "line": 103,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_submitFetcherTask_parallelFetch",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = spy(new WorkerSketchFetcher(workerClient, workerTaskLauncher, true));",
        "line": 126,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_submitFetcherTask_sequentialFetch",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = spy(new WorkerSketchFetcher(workerClient, workerTaskLauncher, true));",
        "line": 154,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_sequentialMerge_nonCompleteInformation",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = spy(new WorkerSketchFetcher(workerClient, workerTaskLauncher, true));",
        "line": 169,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_inMemoryRetryEnabled_retryInvoked",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = spy(new WorkerSketchFetcher(workerClient, workerTaskLauncher, true));",
        "line": 198,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_SequentialRetryEnabled_retryInvoked",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = spy(new WorkerSketchFetcher(workerClient, workerTaskLauncher, false));",
        "line": 225,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_InMemoryRetryDisabled_multipleFailures",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = spy(new WorkerSketchFetcher(workerClient, workerTaskLauncher, false));",
        "line": 254,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_InMemoryRetryDisabled_singleFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = spy(new WorkerSketchFetcher(workerClient, workerTaskLauncher, false));",
        "line": 285,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_SequentialRetryDisabled_multipleFailures",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = spy(new WorkerSketchFetcher(workerClient, workerTaskLauncher, false));",
        "line": 317,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_SequentialRetryDisabled_singleFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "injectorMock",
    "variableType": "Injector",
    "mockedClass": "Injector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in @Before\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.indexing",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\indexing\\IndexerWorkerContextTest.java",
      "className": "IndexerWorkerContextTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Injector injectorMock = Mockito.mock(Injector.class);",
        "line": 43,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(injectorMock.getInstance(SegmentCacheManagerFactory.class)).thenReturn(Mockito.mock(SegmentCacheManagerFactory.class));",
        "line": 44,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "controllerLocatorMock",
    "variableType": "ServiceLocator",
    "mockedClass": "ServiceLocator",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.msq.indexing",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\indexing\\IndexerWorkerContextTest.java",
      "className": "IndexerWorkerContextTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final ServiceLocator controllerLocatorMock = Mockito.mock(ServiceLocator.class);",
        "line": 60,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testControllerCheckerRunnableExitsWhenEmptyStatus",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(controllerLocatorMock.locate()).thenReturn(Futures.immediateFuture(ServiceLocations.forLocations(Collections.emptySet())));",
        "line": 61,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testControllerCheckerRunnableExitsWhenEmptyStatus",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(controllerLocatorMock, Mockito.times(1)).locate();",
        "line": 67,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testControllerCheckerRunnableExitsWhenEmptyStatus",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "workerMock",
    "variableType": "Worker",
    "mockedClass": "Worker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.msq.indexing",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\indexing\\IndexerWorkerContextTest.java",
      "className": "IndexerWorkerContextTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Worker workerMock = Mockito.mock(Worker.class);",
        "line": 64,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testControllerCheckerRunnableExitsWhenEmptyStatus",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(workerMock, Mockito.times(1)).controllerFailed();",
        "line": 68,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testControllerCheckerRunnableExitsWhenEmptyStatus",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "controllerLocatorMock",
    "variableType": "ServiceLocator",
    "mockedClass": "ServiceLocator",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.msq.indexing",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\indexing\\IndexerWorkerContextTest.java",
      "className": "IndexerWorkerContextTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final ServiceLocator controllerLocatorMock = Mockito.mock(ServiceLocator.class);",
        "line": 74,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testControllerCheckerRunnableExitsOnlyWhenClosedStatus",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(controllerLocatorMock.locate()).thenReturn(Futures.immediateFuture(ServiceLocations.forLocation(new ServiceLocation(\"h\", 1, -1, \"/\")))).// Done to check the behavior of the runnable, the situation of exiting after success might not occur actually\r\nthenReturn(Futures.immediateFuture(ServiceLocations.forLocation(new ServiceLocation(\"h\", 1, -1, \"/\")))).thenReturn(Futures.immediateFuture(ServiceLocations.closed()));",
        "line": 75,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testControllerCheckerRunnableExitsOnlyWhenClosedStatus",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(controllerLocatorMock, Mockito.times(3)).locate();",
        "line": 84,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testControllerCheckerRunnableExitsOnlyWhenClosedStatus",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "workerMock",
    "variableType": "Worker",
    "mockedClass": "Worker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.msq.indexing",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\indexing\\IndexerWorkerContextTest.java",
      "className": "IndexerWorkerContextTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Worker workerMock = Mockito.mock(Worker.class);",
        "line": 81,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testControllerCheckerRunnableExitsOnlyWhenClosedStatus",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(workerMock, Mockito.times(1)).controllerFailed();",
        "line": 85,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testControllerCheckerRunnableExitsOnlyWhenClosedStatus",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "indexerWorkerContext",
    "variableType": "IndexerWorkerContext",
    "mockedClass": "IndexerWorkerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.indexing",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\indexing\\IndexerWorkerContextTest.java",
      "className": "IndexerWorkerContextTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private IndexerWorkerContext indexerWorkerContext = null;",
        "line": 38,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "indexerWorkerContext = new IndexerWorkerContext(Mockito.mock(TaskToolbox.class), injectorMock, null, null, null, null);",
        "line": 47,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "target",
    "variableType": "MSQWorkerTaskLauncher",
    "mockedClass": "MSQWorkerTaskLauncher",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.indexing",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\indexing\\MSQWorkerTaskLauncherTest.java",
      "className": "MSQWorkerTaskLauncherTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "MSQWorkerTaskLauncher target;",
        "line": 35,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = new MSQWorkerTaskLauncher(\"controller-id\", \"foo\", Mockito.mock(ControllerContext.class), (task, fault) -> {\r\n}, ImmutableMap.of(), TimeUnit.SECONDS.toMillis(5));",
        "line": 40,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "req",
    "variableType": "HttpServletRequest",
    "mockedClass": "HttpServletRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.indexing",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\indexing\\WorkerChatHandlerTest.java",
      "className": "WorkerChatHandlerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate HttpServletRequest req;",
        "line": 61,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).thenReturn(new AuthenticationResult(\"druid\", \"druid\", null, null));",
        "line": 81,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "req",
    "variableType": "HttpServletRequest",
    "mockedClass": "HttpServletRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.indexing",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\indexing\\WorkerChatHandlerTest.java",
      "className": "WorkerChatHandlerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate HttpServletRequest req;",
        "line": 61,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).thenReturn(new AuthenticationResult(\"druid\", \"druid\", null, null));",
        "line": 81,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "testInputSpecSlicer",
    "variableType": "TestInputSpecSlicer",
    "mockedClass": "TestInputSpecSlicer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.msq.kernel.controller",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\kernel\\controller\\WorkerInputsTest.java",
      "className": "WorkerInputsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TestInputSpecSlicer testInputSpecSlicer = spy(new TestInputSpecSlicer(true));",
        "line": 319,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_max_shouldAlwaysSplitStatic",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(testInputSpecSlicer, times(0)).canSliceDynamic(inputSpecToSplit);",
        "line": 329,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_max_shouldAlwaysSplitStatic",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(testInputSpecSlicer, times(1)).sliceStatic(any(), anyInt());",
        "line": 330,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_max_shouldAlwaysSplitStatic",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "testInputSpecSlicer",
    "variableType": "TestInputSpecSlicer",
    "mockedClass": "TestInputSpecSlicer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.msq.kernel.controller",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\kernel\\controller\\WorkerInputsTest.java",
      "className": "WorkerInputsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TestInputSpecSlicer testInputSpecSlicer = spy(new TestInputSpecSlicer(true));",
        "line": 363,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_auto_shouldSplitDynamicIfPossible",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(testInputSpecSlicer, times(1)).canSliceDynamic(inputSpecToSplit);",
        "line": 373,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_auto_shouldSplitDynamicIfPossible",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(testInputSpecSlicer, times(1)).sliceDynamic(any(), anyInt(), anyInt(), anyLong());",
        "line": 374,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_auto_shouldSplitDynamicIfPossible",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "testInputSpecSlicer",
    "variableType": "TestInputSpecSlicer",
    "mockedClass": "TestInputSpecSlicer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.msq.kernel.controller",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\kernel\\controller\\WorkerInputsTest.java",
      "className": "WorkerInputsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TestInputSpecSlicer testInputSpecSlicer = spy(new TestInputSpecSlicer(true));",
        "line": 406,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_auto_shouldUseLeastWorkersPossible",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(testInputSpecSlicer, times(1)).canSliceDynamic(inputSpecToSplit);",
        "line": 426,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_auto_shouldUseLeastWorkersPossible",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "overlordClient",
    "variableType": "OverlordClient",
    "mockedClass": "OverlordClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n— Global Init in @Before\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.sql.resources",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\sql\\resources\\SqlStatementResourceTest.java",
      "className": "SqlStatementResourceTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate OverlordClient overlordClient;",
        "line": 390,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "overlordClient = Mockito.mock(OverlordClient.class);",
        "line": 703,
        "locate": "@Before",
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(overlordClient.taskStatus(taskIdNotFound)).thenReturn(settableFuture);",
        "line": 1130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTaskIdNotFound",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockFactory",
    "variableType": "LoadedSegmentDataProviderFactory",
    "mockedClass": "LoadedSegmentDataProviderFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.test",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\test\\CalciteMSQTestsHelper.java",
      "className": "CalciteMSQTestsHelper"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// Currently, there is no metadata in this test for loaded segments. Therefore, this should not be called.\r\n// In the future, if this needs to be supported, mocks for LoadedSegmentDataProvider should be added like\r\n// org.apache.druid.msq.exec.MSQLoadedSegmentTests.\r\nLoadedSegmentDataProviderFactory mockFactory = Mockito.mock(LoadedSegmentDataProviderFactory.class);",
        "line": 201,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getTestLoadedSegmentDataProviderFactory",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "loadedSegmentDataProvider",
    "variableType": "LoadedSegmentDataProvider",
    "mockedClass": "LoadedSegmentDataProvider",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.test",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\test\\CalciteMSQTestsHelper.java",
      "className": "CalciteMSQTestsHelper"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "LoadedSegmentDataProvider loadedSegmentDataProvider = Mockito.mock(LoadedSegmentDataProvider.class);",
        "line": 202,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getTestLoadedSegmentDataProviderFactory",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "brokerClient",
    "variableType": "BrokerClient",
    "mockedClass": "BrokerClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in @Before\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.test",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\test\\MSQTestBase.java",
      "className": "MSQTestBase"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "BrokerClient brokerClient = mock(BrokerClient.class);",
        "line": 403,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp2",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "modules",
    "variableType": "List<Module>",
    "mockedClass": "List<Module>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in @Before\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.test",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\test\\MSQTestBase.java",
      "className": "MSQTestBase"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "List<Module> modules = ImmutableList.of(binder -> {\r\n    DruidProcessingConfig druidProcessingConfig = new DruidProcessingConfig() {\r\n\r\n        @Override\r\n        public String getFormatString() {\r\n            return \"test\";\r\n        }\r\n    };\r\n    GroupByQueryConfig groupByQueryConfig = new GroupByQueryConfig();\r\n    GroupingEngine groupingEngine = GroupByQueryRunnerTest.makeQueryRunnerFactory(groupByQueryConfig, groupByBuffers).getGroupingEngine();\r\n    binder.bind(GroupingEngine.class).toInstance(groupingEngine);\r\n    binder.bind(DruidProcessingConfig.class).toInstance(druidProcessingConfig);\r\n    binder.bind(new TypeLiteral<Set<NodeRole>>() {\r\n    }).annotatedWith(Self.class).toInstance(ImmutableSet.of(NodeRole.PEON));\r\n    binder.bind(QueryProcessingPool.class).toInstance(new ForwardingQueryProcessingPool(Execs.singleThreaded(\"Test-runner-processing-pool\")));\r\n    binder.bind(DataSegmentProvider.class).toInstance((segmentId, channelCounters, isReindex) -> getSupplierForSegment(segmentId));\r\n    binder.bind(LoadedSegmentDataProviderFactory.class).toInstance(getTestLoadedSegmentDataProviderFactory());\r\n    binder.bind(IndexIO.class).toInstance(indexIO);\r\n    binder.bind(SpecificSegmentsQuerySegmentWalker.class).toInstance(qf.walker());\r\n    LocalDataSegmentPusherConfig config = new LocalDataSegmentPusherConfig();\r\n    try {\r\n        config.storageDirectory = tmpFolder.newFolder(\"localsegments\");\r\n    } catch (IOException e) {\r\n        throw new ISE(e, \"Unable to create folder\");\r\n    }\r\n    binder.bind(DataSegmentPusher.class).toInstance(new MSQTestDelegateDataSegmentPusher(new LocalDataSegmentPusher(config), segmentManager));\r\n    binder.bind(DataSegmentAnnouncer.class).toInstance(new NoopDataSegmentAnnouncer());\r\n    binder.bindConstant().annotatedWith(PruneLoadSpec.class).to(false);\r\n    // Client is not used in tests\r\n    binder.bind(Key.get(ServiceClientFactory.class, EscalatedGlobal.class)).toProvider(Providers.of(null));\r\n    // fault tolerance module\r\n    try {\r\n        JsonConfigProvider.bind(binder, MSQDurableStorageModule.MSQ_INTERMEDIATE_STORAGE_PREFIX, StorageConnectorProvider.class, MultiStageQuery.class);\r\n        localFileStorageDir = tmpFolder.newFolder(\"fault\");\r\n        localFileStorageConnector = Mockito.spy(new LocalFileStorageConnector(localFileStorageDir));\r\n        binder.bind(Key.get(StorageConnector.class, MultiStageQuery.class)).toProvider(() -> localFileStorageConnector);\r\n    } catch (IOException e) {\r\n        throw new ISE(e, \"Unable to create setup storage connector\");\r\n    }\r\n    binder.bind(DataSegment.PruneSpecsHolder.class).toInstance(DataSegment.PruneSpecsHolder.DEFAULT);\r\n}, // Requirement of WorkerMemoryParameters.createProductionInstanceForWorker(injector)\r\nbinder -> binder.bind(AppenderatorsManager.class).toProvider(() -> null), // Requirement of JoinableFactoryModule\r\nbinder -> binder.bind(SegmentManager.class).toInstance(EasyMock.createMock(SegmentManager.class)), new JoinableFactoryModule(), new IndexingServiceTuningConfigModule(), new MSQIndexingModule(), Modules.override(new MSQSqlModule()).with(binder -> {\r\n    // Our Guice configuration currently requires bindings to exist even if they aren't ever used, the\r\n    // following bindings are overriding other bindings that end up needing a lot more dependencies.\r\n    // We replace the bindings with something that returns null to make things more brittle in case they\r\n    // actually are used somewhere in the test.\r\n    binder.bind(SqlStatementFactory.class).annotatedWith(MSQ.class).toProvider(Providers.of(null));\r\n    binder.bind(SqlToolbox.class).toProvider(Providers.of(null));\r\n    binder.bind(MSQTaskSqlEngine.class).toProvider(Providers.of(null));\r\n}), new ExpressionModule(), new MSQExternalDataSourceModule(), new LookylooModule(), new SegmentWranglerModule(), new HllSketchModule(), binder -> binder.bind(BrokerClient.class).toInstance(brokerClient));",
        "line": 404,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp2",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockFactory",
    "variableType": "LoadedSegmentDataProviderFactory",
    "mockedClass": "LoadedSegmentDataProviderFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.test",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\test\\MSQTestBase.java",
      "className": "MSQTestBase"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "LoadedSegmentDataProviderFactory mockFactory = Mockito.mock(LoadedSegmentDataProviderFactory.class);",
        "line": 587,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getTestLoadedSegmentDataProviderFactory",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "testTaskActionClient",
    "variableType": "MSQTestTaskActionClient",
    "mockedClass": "MSQTestTaskActionClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.test",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\test\\MSQTestBase.java",
      "className": "MSQTestBase"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "protected MSQTestTaskActionClient testTaskActionClient;",
        "line": 296,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "testTaskActionClient = Mockito.spy(new MSQTestTaskActionClient(objectMapper));",
        "line": 506,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp2",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "loadedSegmentDataProvider",
    "variableType": "LoadedSegmentDataProvider",
    "mockedClass": "LoadedSegmentDataProvider",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.test",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\test\\MSQTestBase.java",
      "className": "MSQTestBase"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "// Mocks the return of data from data servers\r\nprotected LoadedSegmentDataProvider loadedSegmentDataProvider = mock(LoadedSegmentDataProvider.class);",
        "line": 304,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "localFileStorageConnector",
    "variableType": "LocalFileStorageConnector",
    "mockedClass": "LocalFileStorageConnector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.test",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\test\\MSQTestBase.java",
      "className": "MSQTestBase"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "protected LocalFileStorageConnector localFileStorageConnector;",
        "line": 292,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "localFileStorageConnector = Mockito.spy(new LocalFileStorageConnector(localFileStorageDir));",
        "line": 459,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp2",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "workerMemoryParameters",
    "variableType": "WorkerMemoryParameters",
    "mockedClass": "WorkerMemoryParameters",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.test",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\test\\MSQTestBase.java",
      "className": "MSQTestBase"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "protected final WorkerMemoryParameters workerMemoryParameters = Mockito.spy(WorkerMemoryParameters.createInstance(WorkerMemoryParameters.PROCESSING_MINIMUM_BYTES * 50, 2, 10, 2, 1, 0));",
        "line": 312,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "testTaskActionClient",
    "variableType": "MSQTestTaskActionClient",
    "mockedClass": "MSQTestTaskActionClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.test",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\test\\MSQTestBase.java",
      "className": "MSQTestBase"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "protected MSQTestTaskActionClient testTaskActionClient;",
        "line": 296,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "testTaskActionClient = Mockito.spy(new MSQTestTaskActionClient(objectMapper));",
        "line": 506,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp2",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "loadedSegmentDataProvider",
    "variableType": "LoadedSegmentDataProvider",
    "mockedClass": "LoadedSegmentDataProvider",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.test",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\test\\MSQTestBase.java",
      "className": "MSQTestBase"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "// Mocks the return of data from data servers\r\nprotected LoadedSegmentDataProvider loadedSegmentDataProvider = mock(LoadedSegmentDataProvider.class);",
        "line": 304,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "localFileStorageConnector",
    "variableType": "LocalFileStorageConnector",
    "mockedClass": "LocalFileStorageConnector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.test",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\test\\MSQTestBase.java",
      "className": "MSQTestBase"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "protected LocalFileStorageConnector localFileStorageConnector;",
        "line": 292,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "localFileStorageConnector = Mockito.spy(new LocalFileStorageConnector(localFileStorageDir));",
        "line": 459,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp2",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "workerMemoryParameters",
    "variableType": "WorkerMemoryParameters",
    "mockedClass": "WorkerMemoryParameters",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.test",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\test\\MSQTestBase.java",
      "className": "MSQTestBase"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "protected final WorkerMemoryParameters workerMemoryParameters = Mockito.spy(WorkerMemoryParameters.createInstance(WorkerMemoryParameters.PROCESSING_MINIMUM_BYTES * 50, 2, 10, 2, 1, 0));",
        "line": 312,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "testTaskActionClient",
    "variableType": "MSQTestTaskActionClient",
    "mockedClass": "MSQTestTaskActionClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.test",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\test\\MSQTestBase.java",
      "className": "MSQTestBase"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "protected MSQTestTaskActionClient testTaskActionClient;",
        "line": 296,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "testTaskActionClient = Mockito.spy(new MSQTestTaskActionClient(objectMapper));",
        "line": 506,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp2",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "loadedSegmentDataProvider",
    "variableType": "LoadedSegmentDataProvider",
    "mockedClass": "LoadedSegmentDataProvider",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.test",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\test\\MSQTestBase.java",
      "className": "MSQTestBase"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "// Mocks the return of data from data servers\r\nprotected LoadedSegmentDataProvider loadedSegmentDataProvider = mock(LoadedSegmentDataProvider.class);",
        "line": 304,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "localFileStorageConnector",
    "variableType": "LocalFileStorageConnector",
    "mockedClass": "LocalFileStorageConnector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.test",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\test\\MSQTestBase.java",
      "className": "MSQTestBase"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "protected LocalFileStorageConnector localFileStorageConnector;",
        "line": 292,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "localFileStorageConnector = Mockito.spy(new LocalFileStorageConnector(localFileStorageDir));",
        "line": 459,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp2",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "workerMemoryParameters",
    "variableType": "WorkerMemoryParameters",
    "mockedClass": "WorkerMemoryParameters",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.test",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\test\\MSQTestBase.java",
      "className": "MSQTestBase"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "protected final WorkerMemoryParameters workerMemoryParameters = Mockito.spy(WorkerMemoryParameters.createInstance(WorkerMemoryParameters.PROCESSING_MINIMUM_BYTES * 50, 2, 10, 2, 1, 0));",
        "line": 312,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "testTaskActionClient",
    "variableType": "MSQTestTaskActionClient",
    "mockedClass": "MSQTestTaskActionClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.test",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\test\\MSQTestBase.java",
      "className": "MSQTestBase"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "protected MSQTestTaskActionClient testTaskActionClient;",
        "line": 296,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "testTaskActionClient = Mockito.spy(new MSQTestTaskActionClient(objectMapper));",
        "line": 506,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp2",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "loadedSegmentDataProvider",
    "variableType": "LoadedSegmentDataProvider",
    "mockedClass": "LoadedSegmentDataProvider",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.test",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\test\\MSQTestBase.java",
      "className": "MSQTestBase"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "// Mocks the return of data from data servers\r\nprotected LoadedSegmentDataProvider loadedSegmentDataProvider = mock(LoadedSegmentDataProvider.class);",
        "line": 304,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "localFileStorageConnector",
    "variableType": "LocalFileStorageConnector",
    "mockedClass": "LocalFileStorageConnector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.test",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\test\\MSQTestBase.java",
      "className": "MSQTestBase"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "protected LocalFileStorageConnector localFileStorageConnector;",
        "line": 292,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "localFileStorageConnector = Mockito.spy(new LocalFileStorageConnector(localFileStorageDir));",
        "line": 459,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp2",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "workerMemoryParameters",
    "variableType": "WorkerMemoryParameters",
    "mockedClass": "WorkerMemoryParameters",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.msq.test",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\test\\MSQTestBase.java",
      "className": "MSQTestBase"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "protected final WorkerMemoryParameters workerMemoryParameters = Mockito.spy(WorkerMemoryParameters.createInstance(WorkerMemoryParameters.PROCESSING_MINIMUM_BYTES * 50, 2, 10, 2, 1, 0));",
        "line": 312,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "mySQLConnectorDriverConfig",
    "variableType": "MySQLConnectorDriverConfig",
    "mockedClass": "MySQLConnectorDriverConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.firehose.sql",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\mysql-metadata-storage\\src\\test\\java\\org\\apache\\druid\\firehose\\sql\\MySQLFirehoseDatabaseConnectorTest.java",
      "className": "MySQLFirehoseDatabaseConnectorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate MySQLConnectorDriverConfig mySQLConnectorDriverConfig;",
        "line": 50,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "registry",
    "variableType": "SchemaRegistryClient",
    "mockedClass": "CachedSchemaRegistryClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.data.input.protobuf",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\protobuf-extensions\\src\\test\\java\\org\\apache\\druid\\data\\input\\protobuf\\SchemaRegistryBasedProtobufBytesDecoderTest.java",
      "className": "SchemaRegistryBasedProtobufBytesDecoderTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private SchemaRegistryClient registry;",
        "line": 51,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "registry = Mockito.mock(CachedSchemaRegistryClient.class);",
        "line": 56,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(registry.getSchemaById(ArgumentMatchers.eq(1234))).thenReturn(parseProtobufSchema());",
        "line": 63,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(registry.getSchemaById(ArgumentMatchers.eq(1234))).thenReturn(parseProtobufSchema());",
        "line": 77,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParseCorrupted",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Given\r\nMockito.when(registry.getSchemaById(ArgumentMatchers.anyInt())).thenThrow(new IOException(\"no pasaran\"));",
        "line": 89,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParseWrongId",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "collector",
    "variableType": "VarianceAggregatorCollector",
    "mockedClass": "VarianceAggregatorCollector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.variance",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\stats\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\variance\\StandardDeviationPostAggregatorTest.java",
      "className": "StandardDeviationPostAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VarianceAggregatorCollector collector;",
        "line": 47,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(collector.getVariance(true)).thenReturn(null);",
        "line": 101,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testComputeForNullVarianceShouldReturnDefaultDoubleValue",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "capabilities",
    "variableType": "ColumnCapabilities",
    "mockedClass": "ColumnCapabilities",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.variance",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\stats\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\variance\\VarianceAggregatorFactoryUnitTest.java",
      "className": "VarianceAggregatorFactoryUnitTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ColumnCapabilities capabilities;",
        "line": 51,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "metricFactory",
    "variableType": "ColumnSelectorFactory",
    "mockedClass": "ColumnSelectorFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.variance",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\stats\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\variance\\VarianceAggregatorFactoryUnitTest.java",
      "className": "VarianceAggregatorFactoryUnitTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock(answer = Answers.RETURNS_MOCKS)\r\nprivate ColumnSelectorFactory metricFactory;",
        "line": 55,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selectorFactory",
    "variableType": "VectorColumnSelectorFactory",
    "mockedClass": "VectorColumnSelectorFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.variance",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\stats\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\variance\\VarianceAggregatorFactoryUnitTest.java",
      "className": "VarianceAggregatorFactoryUnitTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VectorColumnSelectorFactory selectorFactory;",
        "line": 53,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selector",
    "variableType": "VectorValueSelector",
    "mockedClass": "VectorValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.variance",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\stats\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\variance\\VarianceDoubleVectorAggregatorTest.java",
      "className": "VarianceDoubleVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VectorValueSelector selector;",
        "line": 46,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selector",
    "variableType": "VectorValueSelector",
    "mockedClass": "VectorValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.variance",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\stats\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\variance\\VarianceFloatVectorAggregatorTest.java",
      "className": "VarianceFloatVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VectorValueSelector selector;",
        "line": 46,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selector",
    "variableType": "VectorValueSelector",
    "mockedClass": "VectorValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.variance",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\stats\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\variance\\VarianceLongVectorAggregatorTest.java",
      "className": "VarianceLongVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VectorValueSelector selector;",
        "line": 46,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selector",
    "variableType": "VectorObjectSelector",
    "mockedClass": "VectorObjectSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.variance",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\stats\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\variance\\VarianceObjectVectorAggregatorTest.java",
      "className": "VarianceObjectVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VectorObjectSelector selector;",
        "line": 62,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "config",
    "variableType": "HadoopDruidIndexerConfig",
    "mockedClass": "HadoopDruidIndexerConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexer",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-hadoop\\src\\test\\java\\org\\apache\\druid\\indexer\\HadoopDruidDetermineConfigurationJobTest.java",
      "className": "HadoopDruidDetermineConfigurationJobTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final HadoopDruidIndexerConfig config = Mockito.mock(HadoopDruidIndexerConfig.class);",
        "line": 58,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunWithHashedPartitionsSpecCreateHashBasedNumberedShardSpecWithHashPartitionFunction",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(config.isDeterminingPartitions()).thenReturn(false);",
        "line": 59,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunWithHashedPartitionsSpecCreateHashBasedNumberedShardSpecWithHashPartitionFunction",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(config.getPartitionsSpec()).thenReturn(partitionsSpec);",
        "line": 60,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunWithHashedPartitionsSpecCreateHashBasedNumberedShardSpecWithHashPartitionFunction",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(config.getSegmentGranularIntervals()).thenReturn(intervals);",
        "line": 61,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunWithHashedPartitionsSpecCreateHashBasedNumberedShardSpecWithHashPartitionFunction",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "config",
    "variableType": "HadoopDruidIndexerConfig",
    "mockedClass": "HadoopDruidIndexerConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexer",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-hadoop\\src\\test\\java\\org\\apache\\druid\\indexer\\HadoopDruidDetermineConfigurationJobTest.java",
      "className": "HadoopDruidDetermineConfigurationJobTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final HadoopDruidIndexerConfig config = Mockito.mock(HadoopDruidIndexerConfig.class);",
        "line": 98,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunWithSingleDimensionPartitionsSpecCreateHashBasedNumberedShardSpecWithoutHashPartitionFunction",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(config.isDeterminingPartitions()).thenReturn(false);",
        "line": 99,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunWithSingleDimensionPartitionsSpecCreateHashBasedNumberedShardSpecWithoutHashPartitionFunction",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(config.getPartitionsSpec()).thenReturn(partitionsSpec);",
        "line": 100,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunWithSingleDimensionPartitionsSpecCreateHashBasedNumberedShardSpecWithoutHashPartitionFunction",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(config.getSegmentGranularIntervals()).thenReturn(intervals);",
        "line": 101,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunWithSingleDimensionPartitionsSpecCreateHashBasedNumberedShardSpecWithoutHashPartitionFunction",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "handler",
    "variableType": "MetadataStorageUpdaterJobHandler",
    "mockedClass": "MetadataStorageUpdaterJobHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexer",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-hadoop\\src\\test\\java\\org\\apache\\druid\\indexer\\HadoopDruidIndexerJobTest.java",
      "className": "HadoopDruidIndexerJobTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "MetadataStorageUpdaterJobHandler handler = mock(MetadataStorageUpdaterJobHandler.class);",
        "line": 43,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "config",
    "variableType": "HadoopDruidIndexerConfig",
    "mockedClass": "HadoopDruidIndexerConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexer",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-hadoop\\src\\test\\java\\org\\apache\\druid\\indexer\\HadoopDruidIndexerJobTest.java",
      "className": "HadoopDruidIndexerJobTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HadoopDruidIndexerConfig config = mock(HadoopDruidIndexerConfig.class);",
        "line": 42,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(config.isUpdaterJobSpecSet()).thenReturn(false);",
        "line": 46,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(config).verify();",
        "line": 67,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(config, atLeastOnce()).isUpdaterJobSpecSet();",
        "line": 68,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(config).setHadoopJobIdFileName(null);",
        "line": 69,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(config);",
        "line": 70,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "handler",
    "variableType": "MetadataStorageUpdaterJobHandler",
    "mockedClass": "MetadataStorageUpdaterJobHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n— Lazy-init via Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexer",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-hadoop\\src\\test\\java\\org\\apache\\druid\\indexer\\MetadataStorageUpdaterJobTest.java",
      "className": "MetadataStorageUpdaterJobTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private MetadataStorageUpdaterJobHandler handler;",
        "line": 46,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "handler = mock(MetadataStorageUpdaterJobHandler.class);",
        "line": 56,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(handler).publishSegments(SEGMENT_TABLE, DATA_SEGMENT_AND_INDEX_ZIP_FILE_PATHS.stream().map(s -> s.getSegment()).collect(Collectors.toList()), HadoopDruidIndexerConfig.JSON_MAPPER);",
        "line": 73,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(handler, metadataUpdateSpec, ioConfig, spec, config);",
        "line": 84,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "metadataUpdateSpec",
    "variableType": "MetadataStorageUpdaterJobSpec",
    "mockedClass": "MetadataStorageUpdaterJobSpec",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n— Lazy-init via Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexer",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-hadoop\\src\\test\\java\\org\\apache\\druid\\indexer\\MetadataStorageUpdaterJobTest.java",
      "className": "MetadataStorageUpdaterJobTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private MetadataStorageUpdaterJobSpec metadataUpdateSpec;",
        "line": 44,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "metadataUpdateSpec = mock(MetadataStorageUpdaterJobSpec.class);",
        "line": 52,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(metadataUpdateSpec.getSegmentTable()).thenReturn(SEGMENT_TABLE);",
        "line": 63,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(metadataUpdateSpec).getSegmentTable();",
        "line": 79,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(handler, metadataUpdateSpec, ioConfig, spec, config);",
        "line": 84,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "ioConfig",
    "variableType": "HadoopIOConfig",
    "mockedClass": "HadoopIOConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n— Lazy-init via Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexer",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-hadoop\\src\\test\\java\\org\\apache\\druid\\indexer\\MetadataStorageUpdaterJobTest.java",
      "className": "MetadataStorageUpdaterJobTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private HadoopIOConfig ioConfig;",
        "line": 43,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "ioConfig = mock(HadoopIOConfig.class);",
        "line": 53,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(ioConfig.getMetadataUpdateSpec()).thenReturn(metadataUpdateSpec);",
        "line": 64,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(ioConfig).getMetadataUpdateSpec();",
        "line": 80,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(handler, metadataUpdateSpec, ioConfig, spec, config);",
        "line": 84,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "config",
    "variableType": "HadoopDruidIndexerConfig",
    "mockedClass": "HadoopDruidIndexerConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n— Lazy-init via Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexer",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-hadoop\\src\\test\\java\\org\\apache\\druid\\indexer\\MetadataStorageUpdaterJobTest.java",
      "className": "MetadataStorageUpdaterJobTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private HadoopDruidIndexerConfig config;",
        "line": 45,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "config = mock(HadoopDruidIndexerConfig.class);",
        "line": 55,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(config.getSchema()).thenReturn(spec);",
        "line": 66,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(config).getSchema();",
        "line": 82,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(handler, metadataUpdateSpec, ioConfig, spec, config);",
        "line": 84,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "spec",
    "variableType": "HadoopIngestionSpec",
    "mockedClass": "HadoopIngestionSpec",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n— Lazy-init via Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexer",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-hadoop\\src\\test\\java\\org\\apache\\druid\\indexer\\MetadataStorageUpdaterJobTest.java",
      "className": "MetadataStorageUpdaterJobTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private HadoopIngestionSpec spec;",
        "line": 42,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "spec = mock(HadoopIngestionSpec.class);",
        "line": 54,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(spec.getIOConfig()).thenReturn(ioConfig);",
        "line": 65,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(spec).getIOConfig();",
        "line": 81,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(handler, metadataUpdateSpec, ioConfig, spec, config);",
        "line": 84,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_run",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "factory",
    "variableType": "ForkingTaskRunnerFactory",
    "mockedClass": "ForkingTaskRunnerFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.actions",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\actions\\TaskActionToolboxTest.java",
      "className": "TaskActionToolboxTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ForkingTaskRunnerFactory factory = mock(ForkingTaskRunnerFactory.class);",
        "line": 39,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMakeCodeCoverageHappy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(factory.get()).thenReturn(mock(ForkingTaskRunner.class));",
        "line": 40,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMakeCodeCoverageHappy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "toolbox",
    "variableType": "TaskActionToolbox",
    "mockedClass": "TaskActionToolbox",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.actions",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\actions\\UpdateLocationActionTest.java",
      "className": "UpdateLocationActionTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskActionToolbox toolbox = mock(TaskActionToolbox.class);",
        "line": 50,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFlow",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getTaskRunner()).thenReturn(Optional.of(runner));",
        "line": 52,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFlow",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "runner",
    "variableType": "TaskRunner",
    "mockedClass": "TaskRunner",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.actions",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\actions\\UpdateLocationActionTest.java",
      "className": "UpdateLocationActionTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskRunner runner = mock(TaskRunner.class);",
        "line": 51,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFlow",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(runner, times(1)).updateLocation(eq(task), eq(myLocation));",
        "line": 54,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFlow",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "toolbox",
    "variableType": "TaskActionToolbox",
    "mockedClass": "TaskActionToolbox",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.actions",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\actions\\UpdateLocationActionTest.java",
      "className": "UpdateLocationActionTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskActionToolbox toolbox = mock(TaskActionToolbox.class);",
        "line": 65,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithNoTaskRunner",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getTaskRunner()).thenReturn(Optional.absent());",
        "line": 67,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithNoTaskRunner",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "runner",
    "variableType": "TaskRunner",
    "mockedClass": "TaskRunner",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.actions",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\actions\\UpdateLocationActionTest.java",
      "className": "UpdateLocationActionTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskRunner runner = mock(TaskRunner.class);",
        "line": 66,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithNoTaskRunner",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(runner, never()).updateStatus(any(), any());",
        "line": 69,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithNoTaskRunner",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "toolbox",
    "variableType": "TaskActionToolbox",
    "mockedClass": "TaskActionToolbox",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.actions",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\actions\\UpdateStatusActionTest.java",
      "className": "UpdateStatusActionTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskActionToolbox toolbox = mock(TaskActionToolbox.class);",
        "line": 46,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testActionCallsTaskRunner",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getTaskRunner()).thenReturn(Optional.of(runner));",
        "line": 48,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testActionCallsTaskRunner",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "runner",
    "variableType": "TaskRunner",
    "mockedClass": "TaskRunner",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.actions",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\actions\\UpdateStatusActionTest.java",
      "className": "UpdateStatusActionTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskRunner runner = mock(TaskRunner.class);",
        "line": 47,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testActionCallsTaskRunner",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(runner, times(1)).updateStatus(eq(task), eq(TaskStatus.success(task.getId())));",
        "line": 50,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testActionCallsTaskRunner",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "toolbox",
    "variableType": "TaskActionToolbox",
    "mockedClass": "TaskActionToolbox",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.actions",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\actions\\UpdateStatusActionTest.java",
      "className": "UpdateStatusActionTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskActionToolbox toolbox = mock(TaskActionToolbox.class);",
        "line": 58,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFailureScenario",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getTaskRunner()).thenReturn(Optional.of(runner));",
        "line": 60,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFailureScenario",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "runner",
    "variableType": "TaskRunner",
    "mockedClass": "TaskRunner",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.actions",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\actions\\UpdateStatusActionTest.java",
      "className": "UpdateStatusActionTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskRunner runner = mock(TaskRunner.class);",
        "line": 59,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFailureScenario",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(runner, times(1)).updateStatus(eq(task), eq(TaskStatus.failure(task.getId(), \"Error with task\")));",
        "line": 62,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFailureScenario",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "toolbox",
    "variableType": "TaskActionToolbox",
    "mockedClass": "TaskActionToolbox",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.actions",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\actions\\UpdateStatusActionTest.java",
      "className": "UpdateStatusActionTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskActionToolbox toolbox = mock(TaskActionToolbox.class);",
        "line": 70,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNoTaskRunner",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getTaskRunner()).thenReturn(Optional.absent());",
        "line": 72,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNoTaskRunner",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "runner",
    "variableType": "TaskRunner",
    "mockedClass": "TaskRunner",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.actions",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\actions\\UpdateStatusActionTest.java",
      "className": "UpdateStatusActionTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskRunner runner = mock(TaskRunner.class);",
        "line": 71,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNoTaskRunner",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(runner, never()).updateStatus(any(), any());",
        "line": 74,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNoTaskRunner",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "pusher",
    "variableType": "TaskLogPusher",
    "mockedClass": "TaskLogPusher",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\AbstractTaskTest.java",
      "className": "AbstractTaskTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskLogPusher pusher = mock(TaskLogPusher.class);",
        "line": 78,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetupAndCleanupIsCalledWtihParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(pusher, times(1)).pushTaskReports(eq(\"myID\"), any());",
        "line": 113,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetupAndCleanupIsCalledWtihParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(pusher, times(1)).pushTaskStatus(eq(\"myID\"), any());",
        "line": 114,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetupAndCleanupIsCalledWtihParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "toolbox",
    "variableType": "TaskToolbox",
    "mockedClass": "TaskToolbox",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\AbstractTaskTest.java",
      "className": "AbstractTaskTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// These tests apparently use Mockito.  Mockito is bad as we've seen it rewrite byte code and effectively cause\r\n// impact to other totally unrelated tests.  Mockito needs to be completely erradicated from the codebase.  This\r\n// comment is here to either cause me to do it in this commit or just for posterity so that it is clear that it\r\n// should happen in the future.\r\nTaskToolbox toolbox = mock(TaskToolbox.class);",
        "line": 72,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetupAndCleanupIsCalledWtihParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getAttemptId()).thenReturn(\"1\");",
        "line": 73,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetupAndCleanupIsCalledWtihParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getTaskExecutorNode()).thenReturn(node);",
        "line": 76,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetupAndCleanupIsCalledWtihParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getTaskLogPusher()).thenReturn(pusher);",
        "line": 79,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetupAndCleanupIsCalledWtihParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getConfig()).thenReturn(config);",
        "line": 85,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetupAndCleanupIsCalledWtihParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getJsonMapper()).thenReturn(objectMapper);",
        "line": 86,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetupAndCleanupIsCalledWtihParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getTaskActionClient()).thenReturn(taskActionClient);",
        "line": 90,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetupAndCleanupIsCalledWtihParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "taskActionClient",
    "variableType": "TaskActionClient",
    "mockedClass": "TaskActionClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\AbstractTaskTest.java",
      "className": "AbstractTaskTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskActionClient taskActionClient = mock(TaskActionClient.class);",
        "line": 88,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetupAndCleanupIsCalledWtihParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(taskActionClient.submit(any())).thenReturn(TaskConfig.class);",
        "line": 89,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetupAndCleanupIsCalledWtihParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// call it 3 times, once to update location in setup, then one for status and location in cleanup\r\nMockito.verify(taskActionClient, times(3)).submit(any());",
        "line": 112,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetupAndCleanupIsCalledWtihParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "config",
    "variableType": "TaskConfig",
    "mockedClass": "TaskConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\AbstractTaskTest.java",
      "className": "AbstractTaskTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskConfig config = mock(TaskConfig.class);",
        "line": 81,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetupAndCleanupIsCalledWtihParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(config.isEncapsulatedTask()).thenReturn(true);",
        "line": 82,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetupAndCleanupIsCalledWtihParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(config.getTaskDir(eq(\"myID\"))).thenReturn(folder);",
        "line": 84,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetupAndCleanupIsCalledWtihParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "pusher",
    "variableType": "TaskLogPusher",
    "mockedClass": "TaskLogPusher",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\AbstractTaskTest.java",
      "className": "AbstractTaskTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskLogPusher pusher = mock(TaskLogPusher.class);",
        "line": 126,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithNoEncapsulatedTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(pusher, never()).pushTaskReports(eq(\"myID\"), any());",
        "line": 159,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithNoEncapsulatedTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "toolbox",
    "variableType": "TaskToolbox",
    "mockedClass": "TaskToolbox",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\AbstractTaskTest.java",
      "className": "AbstractTaskTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskToolbox toolbox = mock(TaskToolbox.class);",
        "line": 120,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithNoEncapsulatedTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getAttemptId()).thenReturn(\"1\");",
        "line": 121,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithNoEncapsulatedTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getTaskExecutorNode()).thenReturn(node);",
        "line": 124,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithNoEncapsulatedTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getTaskLogPusher()).thenReturn(pusher);",
        "line": 127,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithNoEncapsulatedTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getConfig()).thenReturn(config);",
        "line": 133,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithNoEncapsulatedTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getJsonMapper()).thenReturn(objectMapper);",
        "line": 134,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithNoEncapsulatedTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getTaskActionClient()).thenReturn(taskActionClient);",
        "line": 138,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithNoEncapsulatedTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "taskActionClient",
    "variableType": "TaskActionClient",
    "mockedClass": "TaskActionClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\AbstractTaskTest.java",
      "className": "AbstractTaskTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskActionClient taskActionClient = mock(TaskActionClient.class);",
        "line": 136,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithNoEncapsulatedTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(taskActionClient.submit(any())).thenReturn(TaskConfig.class);",
        "line": 137,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithNoEncapsulatedTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// encapsulated task is set to false, should never get called\r\nMockito.verify(taskActionClient, never()).submit(any());",
        "line": 158,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithNoEncapsulatedTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "config",
    "variableType": "TaskConfig",
    "mockedClass": "TaskConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\AbstractTaskTest.java",
      "className": "AbstractTaskTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskConfig config = mock(TaskConfig.class);",
        "line": 129,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithNoEncapsulatedTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(config.isEncapsulatedTask()).thenReturn(false);",
        "line": 130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithNoEncapsulatedTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(config.getTaskDir(eq(\"myID\"))).thenReturn(folder);",
        "line": 132,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithNoEncapsulatedTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "pusher",
    "variableType": "TaskLogPusher",
    "mockedClass": "TaskLogPusher",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\AbstractTaskTest.java",
      "className": "AbstractTaskTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskLogPusher pusher = mock(TaskLogPusher.class);",
        "line": 171,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTaskFailureWithoutExceptionGetsReportedCorrectly",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "toolbox",
    "variableType": "TaskToolbox",
    "mockedClass": "TaskToolbox",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\AbstractTaskTest.java",
      "className": "AbstractTaskTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskToolbox toolbox = mock(TaskToolbox.class);",
        "line": 165,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTaskFailureWithoutExceptionGetsReportedCorrectly",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getAttemptId()).thenReturn(\"1\");",
        "line": 166,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTaskFailureWithoutExceptionGetsReportedCorrectly",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getTaskExecutorNode()).thenReturn(node);",
        "line": 169,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTaskFailureWithoutExceptionGetsReportedCorrectly",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getTaskLogPusher()).thenReturn(pusher);",
        "line": 172,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTaskFailureWithoutExceptionGetsReportedCorrectly",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getConfig()).thenReturn(config);",
        "line": 178,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTaskFailureWithoutExceptionGetsReportedCorrectly",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getJsonMapper()).thenReturn(objectMapper);",
        "line": 179,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTaskFailureWithoutExceptionGetsReportedCorrectly",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(toolbox.getTaskActionClient()).thenReturn(taskActionClient);",
        "line": 183,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTaskFailureWithoutExceptionGetsReportedCorrectly",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "taskActionClient",
    "variableType": "TaskActionClient",
    "mockedClass": "TaskActionClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\AbstractTaskTest.java",
      "className": "AbstractTaskTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskActionClient taskActionClient = mock(TaskActionClient.class);",
        "line": 181,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTaskFailureWithoutExceptionGetsReportedCorrectly",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(taskActionClient.submit(any())).thenReturn(TaskConfig.class);",
        "line": 182,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTaskFailureWithoutExceptionGetsReportedCorrectly",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(taskActionClient).submit(eq(action));",
        "line": 195,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTaskFailureWithoutExceptionGetsReportedCorrectly",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "config",
    "variableType": "TaskConfig",
    "mockedClass": "TaskConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\AbstractTaskTest.java",
      "className": "AbstractTaskTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskConfig config = mock(TaskConfig.class);",
        "line": 174,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTaskFailureWithoutExceptionGetsReportedCorrectly",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(config.isEncapsulatedTask()).thenReturn(true);",
        "line": 175,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTaskFailureWithoutExceptionGetsReportedCorrectly",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(config.getTaskDir(eq(\"myID\"))).thenReturn(folder);",
        "line": 177,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTaskFailureWithoutExceptionGetsReportedCorrectly",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "negativeUnion",
    "variableType": "Union",
    "mockedClass": "Union",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task.batch.parallel",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\batch\\parallel\\DimensionCardinalityReportTest.java",
      "className": "DimensionCardinalityReportTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Union negativeUnion = mock(Union.class);",
        "line": 314,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSupervisorDetermineNegativeNumShardsFromCardinalityReport",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(negativeUnion.getEstimate()).thenReturn(-1.0);",
        "line": 315,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSupervisorDetermineNegativeNumShardsFromCardinalityReport",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "union",
    "variableType": "Union",
    "mockedClass": "Union",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task.batch.parallel",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\batch\\parallel\\DimensionCardinalityReportTest.java",
      "className": "DimensionCardinalityReportTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Union union = mock(Union.class);",
        "line": 340,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSupervisorDeterminePositiveNumShardsFromCardinalityReport",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(union.getEstimate()).thenReturn(24.0);",
        "line": 341,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSupervisorDeterminePositiveNumShardsFromCardinalityReport",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "union",
    "variableType": "Union",
    "mockedClass": "Union",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task.batch.parallel",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\batch\\parallel\\DimensionCardinalityReportTest.java",
      "className": "DimensionCardinalityReportTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Union union = mock(Union.class);",
        "line": 353,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSupervisorDeterminePositiveOneShardFromCardinalityReport",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(union.getEstimate()).thenReturn(24.0);",
        "line": 354,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSupervisorDeterminePositiveOneShardFromCardinalityReport",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "runner",
    "variableType": "PartialDimensionDistributionParallelIndexTaskRunner",
    "mockedClass": "PartialDimensionDistributionParallelIndexTaskRunner",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Helper\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task.batch.parallel",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\batch\\parallel\\RangePartitionTaskKillTest.java",
      "className": "ParallelIndexSupervisorTaskTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final PartialDimensionDistributionParallelIndexTaskRunner runner = Mockito.mock(PartialDimensionDistributionParallelIndexTaskRunner.class);",
        "line": 278,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "createMockDistributionRunner",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(runner.getName()).thenReturn(phase);",
        "line": 281,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "createMockDistributionRunner",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(runner.run()).thenReturn(succeeds ? TaskState.SUCCESS : TaskState.FAILED);",
        "line": 282,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "createMockDistributionRunner",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(runner.getStopReason()).thenReturn(null);",
        "line": 283,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "createMockDistributionRunner",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(runner.getProgress()).thenReturn(null);",
        "line": 284,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "createMockDistributionRunner",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(runner.getIntervalToPartitionBoundaries(ArgumentMatchers.any())).thenReturn(INTERVAL_TO_PARTITIONS);",
        "line": 285,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "createMockDistributionRunner",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "taskActionClient",
    "variableType": "TaskActionClient",
    "mockedClass": "TaskActionClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task.batch.parallel",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\batch\\parallel\\TombstoneHelperTest.java",
      "className": "TombstoneHelperTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private final TaskActionClient taskActionClient = Mockito.mock(TaskActionClient.class);",
        "line": 57,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "// Assume no used segments :\r\nMockito.when(taskActionClient.submit(any(TaskAction.class))).thenReturn(Collections.emptyList());",
        "line": 72,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "noTombstonesWhenNoDataInInputIntervalAndNoExistingSegments",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(TaskAction.class))).thenReturn(Collections.singletonList(existingUsedSegment));",
        "line": 106,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "tombstonesCreatedWhenNoDataInInputIntervalAndExistingSegments",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(TaskAction.class))).thenReturn(Collections.singletonList(existingUsedSegment));",
        "line": 140,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "tombstoneIntervalsCreatedForReplaceWhenReplaceIsContainedInUsedIntervals",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(TaskAction.class))).thenReturn(existingUsedSegments);",
        "line": 175,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "tombstoneIntervalsCreatedForReplaceWhenThereIsAGapInUsedIntervals",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(TaskAction.class))).thenReturn(Collections.singletonList(existingUsedSegment));",
        "line": 209,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "tombstoneIntervalsCreatedForReplaceWhenUsedIntervalsDonotAlign",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(TaskAction.class))).thenReturn(Collections.singletonList(existingUsedSegment));",
        "line": 238,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "tombstoneIntervalsCreatedForReplaceWhenUsedIntervalsAreCompletelyDisjoint",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(TaskAction.class))).thenReturn(Collections.singletonList(existingUsedSegment));",
        "line": 267,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTombstoneIntervalsCreatedForReplaceWhenDataLiesOnLeft",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(TaskAction.class))).thenReturn(Collections.singletonList(existingUsedSegment));",
        "line": 296,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTombstoneIntervalsCreatedForReplaceWhenDataLiesOnRight",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(TaskAction.class))).thenReturn(Collections.singletonList(existingUsedSegment));",
        "line": 328,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTombstoneIntervalsCreatedForReplaceWhenDataLiesInMiddle",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(TaskAction.class))).thenReturn(Collections.singletonList(existingUsedSegment));",
        "line": 360,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTombstoneIntervalsCreatedForReplaceWhenExistingGranularityIsEternity",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(TaskAction.class))).thenReturn(Collections.singletonList(existingUsedSegment));",
        "line": 392,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTombstoneIntervalsCreatedForReplaceWhenReplaceAll",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(RetrieveUsedSegmentsAction.class))).thenReturn(Collections.singletonList(existingUsedSegment));",
        "line": 427,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTombstoneSegmentsForReplaceWhenLockRevoked",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(LockListAction.class))).thenReturn(ImmutableList.of());",
        "line": 429,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTombstoneSegmentsForReplaceWhenLockRevoked",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "clock",
    "variableType": "Clock",
    "mockedClass": "Clock",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\CompactionTaskTest.java",
      "className": "CompactionTaskTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate Clock clock;",
        "line": 376,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(clock.millis()).thenReturn(0L, 10_000L);",
        "line": 391,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "clock",
    "variableType": "Clock",
    "mockedClass": "Clock",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\CompactionTaskTest.java",
      "className": "CompactionTaskTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate Clock clock;",
        "line": 376,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(clock.millis()).thenReturn(0L, 10_000L);",
        "line": 391,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "clock",
    "variableType": "Clock",
    "mockedClass": "Clock",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\CompactionTaskTest.java",
      "className": "CompactionTaskTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate Clock clock;",
        "line": 376,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(clock.millis()).thenReturn(0L, 10_000L);",
        "line": 391,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "clock",
    "variableType": "Clock",
    "mockedClass": "Clock",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\CompactionTaskTest.java",
      "className": "CompactionTaskTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate Clock clock;",
        "line": 376,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(clock.millis()).thenReturn(0L, 10_000L);",
        "line": 391,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "clock",
    "variableType": "Clock",
    "mockedClass": "Clock",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\CompactionTaskTest.java",
      "className": "CompactionTaskTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate Clock clock;",
        "line": 376,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(clock.millis()).thenReturn(0L, 10_000L);",
        "line": 391,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "clock",
    "variableType": "Clock",
    "mockedClass": "Clock",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\CompactionTaskTest.java",
      "className": "CompactionTaskTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate Clock clock;",
        "line": 376,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(clock.millis()).thenReturn(0L, 10_000L);",
        "line": 391,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "clock",
    "variableType": "Clock",
    "mockedClass": "Clock",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\CompactionTaskTest.java",
      "className": "CompactionTaskTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate Clock clock;",
        "line": 376,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(clock.millis()).thenReturn(0L, 10_000L);",
        "line": 391,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "clock",
    "variableType": "Clock",
    "mockedClass": "Clock",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\CompactionTaskTest.java",
      "className": "CompactionTaskTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate Clock clock;",
        "line": 376,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(clock.millis()).thenReturn(0L, 10_000L);",
        "line": 391,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "parseExceptionHandler",
    "variableType": "ParseExceptionHandler",
    "mockedClass": "ParseExceptionHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\FilteringCloseableInputRowIteratorTest.java",
      "className": "FilteringCloseableInputRowIteratorTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private ParseExceptionHandler parseExceptionHandler;",
        "line": 61,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "parseExceptionHandler = Mockito.spy(new ParseExceptionHandler(rowIngestionMeters, true, Integer.MAX_VALUE, // do not use Integer.MAX_VALUE since it will create an object array of this length\r\n1024));",
        "line": 67,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(parseExceptionHandler, Mockito.times(6)).logParseExceptionHelper(exceptionArgumentCaptor.capture());",
        "line": 341,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParseExceptionSaveExceptionCause",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "task",
    "variableType": "Task",
    "mockedClass": "Task",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\IndexTaskUtilsTest.java",
      "className": "IndexTaskUtilsTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate Task task;",
        "line": 41,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(task.getContextValue(DruidMetrics.TAGS)).thenReturn(METRIC_TAGS);",
        "line": 51,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(task.getGroupId()).thenReturn(GROUP_ID);",
        "line": 52,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(task.getContextValue(DruidMetrics.TAGS)).thenReturn(null);",
        "line": 74,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetTaskDimensionsWithoutTagsShouldNotSetTags",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(task.getGroupId()).thenReturn(null);",
        "line": 97,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetTaskDimensionsWithoutGroupIdShouldNotSetGroupId",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "abstractTask",
    "variableType": "AbstractTask",
    "mockedClass": "AbstractTask",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\IndexTaskUtilsTest.java",
      "className": "IndexTaskUtilsTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate AbstractTask abstractTask;",
        "line": 43,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(abstractTask.getContextValue(DruidMetrics.TAGS)).thenReturn(METRIC_TAGS);",
        "line": 53,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(abstractTask.getGroupId()).thenReturn(GROUP_ID);",
        "line": 54,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(abstractTask.getContextValue(DruidMetrics.TAGS)).thenReturn(null);",
        "line": 82,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetTaskDimensionsForAbstractTaskWithoutTagsShouldNotSetTags",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(abstractTask.getGroupId()).thenReturn(null);",
        "line": 112,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetTaskDimensionsForAbstractTaskWithoutGroupIdShouldNotSetGroupId",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "rowIngestionMeters",
    "variableType": "RowIngestionMeters",
    "mockedClass": "RowIngestionMeters",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\TaskRealtimeMetricsMonitorTest.java",
      "className": "TaskRealtimeMetricsMonitorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock(answer = Answers.RETURNS_MOCKS)\r\nprivate RowIngestionMeters rowIngestionMeters;",
        "line": 58,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "fireDepartment",
    "variableType": "FireDepartment",
    "mockedClass": "FireDepartment",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\TaskRealtimeMetricsMonitorTest.java",
      "className": "TaskRealtimeMetricsMonitorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock(answer = Answers.RETURNS_MOCKS)\r\nprivate FireDepartment fireDepartment;",
        "line": 56,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "emitter",
    "variableType": "ServiceEmitter",
    "mockedClass": "ServiceEmitter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\TaskRealtimeMetricsMonitorTest.java",
      "className": "TaskRealtimeMetricsMonitorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ServiceEmitter emitter;",
        "line": 60,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "appenderatorsManager",
    "variableType": "AppenderatorsManager",
    "mockedClass": "AppenderatorsManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\TaskToolboxTest.java",
      "className": "TaskToolboxTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final AppenderatorsManager appenderatorsManager = Mockito.mock(AppenderatorsManager.class);",
        "line": 231,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateAdjustedRuntimeInfoForMiddleManager",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verifyNoMoreInteractions(appenderatorsManager);",
        "line": 252,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateAdjustedRuntimeInfoForMiddleManager",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "appenderatorsManager",
    "variableType": "UnifiedIndexerAppenderatorsManager",
    "mockedClass": "UnifiedIndexerAppenderatorsManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\TaskToolboxTest.java",
      "className": "TaskToolboxTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// UnifiedIndexerAppenderatorsManager class is used on Indexers.\r\nfinal UnifiedIndexerAppenderatorsManager appenderatorsManager = Mockito.mock(UnifiedIndexerAppenderatorsManager.class);",
        "line": 259,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateAdjustedRuntimeInfoForIndexer",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(appenderatorsManager.getWorkerConfig()).thenReturn(new WorkerConfig() {\r\n\r\n    @Override\r\n    public int getCapacity() {\r\n        return 3;\r\n    }\r\n});",
        "line": 266,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateAdjustedRuntimeInfoForIndexer",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(appenderatorsManager).getWorkerConfig();",
        "line": 292,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateAdjustedRuntimeInfoForIndexer",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verifyNoMoreInteractions(appenderatorsManager);",
        "line": 293,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateAdjustedRuntimeInfoForIndexer",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "testDuty1",
    "variableType": "OverlordDuty",
    "mockedClass": "OverlordDuty",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.overlord.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\overlord\\duty\\OverlordDutyExecutorTest.java",
      "className": "OverlordDutyExecutorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "OverlordDuty testDuty1 = Mockito.mock(OverlordDuty.class);",
        "line": 37,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartAndStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(testDuty1.isEnabled()).thenReturn(true);",
        "line": 38,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartAndStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(testDuty1.getSchedule()).thenReturn(new DutySchedule(0, 0));",
        "line": 39,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartAndStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "executorService",
    "variableType": "ScheduledExecutorService",
    "mockedClass": "ScheduledExecutorService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexing.overlord.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\overlord\\duty\\OverlordDutyExecutorTest.java",
      "className": "OverlordDutyExecutorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ScheduledExecutorService executorService = Mockito.mock(ScheduledExecutorService.class);",
        "line": 46,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartAndStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(executorService, Mockito.times(2)).schedule(ArgumentMatchers.any(Runnable.class), ArgumentMatchers.anyLong(), ArgumentMatchers.any());",
        "line": 61,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartAndStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// Verify that the executor shutdown is invoked just once\r\nMockito.verify(executorService, Mockito.times(1)).shutdownNow();",
        "line": 73,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartAndStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "testDuty2",
    "variableType": "OverlordDuty",
    "mockedClass": "OverlordDuty",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.overlord.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\overlord\\duty\\OverlordDutyExecutorTest.java",
      "className": "OverlordDutyExecutorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "OverlordDuty testDuty2 = Mockito.mock(OverlordDuty.class);",
        "line": 41,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartAndStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(testDuty2.isEnabled()).thenReturn(true);",
        "line": 42,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartAndStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(testDuty2.getSchedule()).thenReturn(new DutySchedule(0, 0));",
        "line": 43,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartAndStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "executorFactory",
    "variableType": "ScheduledExecutorFactory",
    "mockedClass": "ScheduledExecutorFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexing.overlord.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\overlord\\duty\\OverlordDutyExecutorTest.java",
      "className": "OverlordDutyExecutorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ScheduledExecutorFactory executorFactory = Mockito.mock(ScheduledExecutorFactory.class);",
        "line": 45,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartAndStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(executorFactory.create(ArgumentMatchers.eq(1), ArgumentMatchers.anyString())).thenReturn(executorService);",
        "line": 47,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartAndStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// Verify that executor is initialized and each duty is scheduled\r\nMockito.verify(executorFactory, Mockito.times(1)).create(ArgumentMatchers.eq(1), ArgumentMatchers.anyString());",
        "line": 59,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartAndStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "testDuty",
    "variableType": "OverlordDuty",
    "mockedClass": "OverlordDuty",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.overlord.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\overlord\\duty\\OverlordDutyExecutorTest.java",
      "className": "OverlordDutyExecutorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "OverlordDuty testDuty = Mockito.mock(OverlordDuty.class);",
        "line": 79,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartWithNoEnabledDuty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(testDuty.isEnabled()).thenReturn(false);",
        "line": 80,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartWithNoEnabledDuty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "executorFactory",
    "variableType": "ScheduledExecutorFactory",
    "mockedClass": "ScheduledExecutorFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexing.overlord.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\overlord\\duty\\OverlordDutyExecutorTest.java",
      "className": "OverlordDutyExecutorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ScheduledExecutorFactory executorFactory = Mockito.mock(ScheduledExecutorFactory.class);",
        "line": 82,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartWithNoEnabledDuty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// Verify that executor is not initialized as there is no enabled duty\r\nMockito.verify(executorFactory, Mockito.never()).create(ArgumentMatchers.eq(1), ArgumentMatchers.anyString());",
        "line": 89,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartWithNoEnabledDuty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "taskLogKiller",
    "variableType": "TaskLogKiller",
    "mockedClass": "TaskLogKiller",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexing.overlord.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\overlord\\duty\\TaskLogAutoCleanerTest.java",
      "className": "TaskLogAutoCleanerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskLogKiller taskLogKiller = Mockito.mock(TaskLogKiller.class);",
        "line": 42,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRun",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(taskLogKiller).killOlderThan(ArgumentMatchers.longThat(observedExpiryTime -> observedExpiryTime >= expectedExpiryTime));",
        "line": 54,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRun",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "taskStorage",
    "variableType": "TaskStorage",
    "mockedClass": "TaskStorage",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.indexing.overlord.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\overlord\\duty\\TaskLogAutoCleanerTest.java",
      "className": "TaskLogAutoCleanerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TaskStorage taskStorage = Mockito.mock(TaskStorage.class);",
        "line": 41,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRun",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// Verify that kill on TaskStorage and TaskLogKiller is invoked with the correct timestamp\r\nMockito.verify(taskStorage).removeTasksOlderThan(ArgumentMatchers.longThat(observedExpiryTime -> observedExpiryTime >= expectedExpiryTime));",
        "line": 51,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRun",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "taskResource0",
    "variableType": "TaskResource",
    "mockedClass": "TaskResource",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.overlord",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\overlord\\ImmutableWorkerInfoTest.java",
      "className": "ImmutableWorkerInfoTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// Parallel index task\r\nTaskResource taskResource0 = mock(TaskResource.class);",
        "line": 235,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(taskResource0.getRequiredCapacity()).thenReturn(3);",
        "line": 236,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "taskResource1",
    "variableType": "TaskResource",
    "mockedClass": "TaskResource",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.overlord",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\overlord\\ImmutableWorkerInfoTest.java",
      "className": "ImmutableWorkerInfoTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// Some other indexing task\r\nTaskResource taskResource1 = mock(TaskResource.class);",
        "line": 249,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(taskResource1.getRequiredCapacity()).thenReturn(5);",
        "line": 250,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "parallelIndexTask",
    "variableType": "Task",
    "mockedClass": "ParallelIndexSupervisorTask",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.overlord",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\overlord\\ImmutableWorkerInfoTest.java",
      "className": "ImmutableWorkerInfoTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Task parallelIndexTask = mock(ParallelIndexSupervisorTask.class);",
        "line": 237,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(parallelIndexTask.getType()).thenReturn(ParallelIndexSupervisorTask.TYPE);",
        "line": 238,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(parallelIndexTask.getTaskResource()).thenReturn(taskResource0);",
        "line": 239,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "taskResource2",
    "variableType": "TaskResource",
    "mockedClass": "TaskResource",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.overlord",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\overlord\\ImmutableWorkerInfoTest.java",
      "className": "ImmutableWorkerInfoTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// Task has an availability conflict (\"grp1\")\r\nTaskResource taskResource2 = mock(TaskResource.class);",
        "line": 261,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(taskResource2.getRequiredCapacity()).thenReturn(1);",
        "line": 262,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(taskResource2.getAvailabilityGroup()).thenReturn(\"grp1\");",
        "line": 263,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "anyOtherTask",
    "variableType": "Task",
    "mockedClass": "IndexTask",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.overlord",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\overlord\\ImmutableWorkerInfoTest.java",
      "className": "ImmutableWorkerInfoTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Task anyOtherTask = mock(IndexTask.class);",
        "line": 251,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(anyOtherTask.getType()).thenReturn(\"index\");",
        "line": 252,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(anyOtherTask.getTaskResource()).thenReturn(taskResource1);",
        "line": 253,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "grp1Task",
    "variableType": "Task",
    "mockedClass": "IndexTask",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.overlord",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\overlord\\ImmutableWorkerInfoTest.java",
      "className": "ImmutableWorkerInfoTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Task grp1Task = mock(IndexTask.class);",
        "line": 264,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(grp1Task.getType()).thenReturn(\"blah\");",
        "line": 265,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(grp1Task.getTaskResource()).thenReturn(taskResource2);",
        "line": 266,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "provisioningSchedulerConfig",
    "variableType": "ProvisioningSchedulerConfig",
    "mockedClass": "ProvisioningSchedulerConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.overlord",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\overlord\\RemoteTaskRunnerFactoryTest.java",
      "className": "RemoteTaskRunnerFactoryTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ProvisioningSchedulerConfig provisioningSchedulerConfig = Mockito.mock(ProvisioningSchedulerConfig.class);",
        "line": 37,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testBuildWithAutoScale",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(provisioningSchedulerConfig.isDoAutoscale()).thenReturn(true);",
        "line": 38,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testBuildWithAutoScale",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "provisioningSchedulerConfig",
    "variableType": "ProvisioningSchedulerConfig",
    "mockedClass": "ProvisioningSchedulerConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.overlord",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\overlord\\RemoteTaskRunnerFactoryTest.java",
      "className": "RemoteTaskRunnerFactoryTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ProvisioningSchedulerConfig provisioningSchedulerConfig = Mockito.mock(ProvisioningSchedulerConfig.class);",
        "line": 48,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testBuildWithoutAutoScale",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(provisioningSchedulerConfig.isDoAutoscale()).thenReturn(false);",
        "line": 49,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testBuildWithoutAutoScale",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "curator",
    "variableType": "CuratorFramework",
    "mockedClass": "CuratorFramework",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.overlord",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\overlord\\RemoteTaskRunnerFactoryTest.java",
      "className": "RemoteTaskRunnerFactoryTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CuratorFramework curator = Mockito.mock(CuratorFramework.class);",
        "line": 58,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getTestRemoteTaskRunnerFactory",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(curator.newWatcherRemoveCuratorFramework()).thenReturn(null);",
        "line": 59,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getTestRemoteTaskRunnerFactory",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "wankyItem",
    "variableType": "RemoteTaskRunnerWorkItem",
    "mockedClass": "RemoteTaskRunnerWorkItem",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.overlord",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\overlord\\RemoteTaskRunnerTest.java",
      "className": "RemoteTaskRunnerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// modify taskId to make task assignment failed\r\nRemoteTaskRunnerWorkItem wankyItem = Mockito.mock(RemoteTaskRunnerWorkItem.class);",
        "line": 580,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunPendingTaskFailToAssignTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(wankyItem.getTaskId()).thenReturn(originalItem.getTaskId()).thenReturn(\"wrongId\");",
        "line": 581,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunPendingTaskFailToAssignTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "toolbox",
    "variableType": "TaskToolbox",
    "mockedClass": "TaskToolbox",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in @Override\n\nStubbing:\n— @Override\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.overlord",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\overlord\\TaskQueueTest.java",
      "className": "SimpleTaskRunner"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final TaskToolbox toolbox = Mockito.mock(TaskToolbox.class);",
        "line": 610,
        "locate": "@Override",
        "locationContext": {
          "methodName": "run",
          "methodAnnotations": [
            "@Override"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(toolbox.getTaskActionClient()).thenReturn(actionClientFactory.create(task));",
        "line": 611,
        "locate": "@Override",
        "locationContext": {
          "methodName": "run",
          "methodAnnotations": [
            "@Override"
          ]
        }
      }
    ]
  },
  {
    "variableName": "supplier",
    "variableType": "RecordSupplier<?,?,?>",
    "mockedClass": "RecordSupplier",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.seekablestream",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\seekablestream\\RecordSupplierInputSourceTest.java",
      "className": "RecordSupplierInputSourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final RecordSupplier<?, ?, ?> supplier = Mockito.mock(RecordSupplier.class);",
        "line": 143,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRecordSupplierInputSourceThrowsSamplerExceptionWhenExceptionDuringSeek",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(supplier.getPartitionIds(\"test-stream\")).thenThrow(new StreamException(new Exception(\"Something bad happened\")));",
        "line": 144,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRecordSupplierInputSourceThrowsSamplerExceptionWhenExceptionDuringSeek",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockSeekableStreamEndSequenceNumbers",
    "variableType": "SeekableStreamEndSequenceNumbers",
    "mockedClass": "SeekableStreamEndSequenceNumbers",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.seekablestream",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\seekablestream\\SequenceMetadataTest.java",
      "className": "SequenceMetadataTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate SeekableStreamEndSequenceNumbers mockSeekableStreamEndSequenceNumbers;",
        "line": 48,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockSeekableStreamEndSequenceNumbers.getPartitionSequenceNumberMap()).thenReturn(ImmutableMap.of());",
        "line": 96,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPublishAnnotatedSegmentsSucceedIfDropSegmentsAndOverwriteSegmentsNullAndEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockTaskActionClient",
    "variableType": "TaskActionClient",
    "mockedClass": "TaskActionClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.seekablestream",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\seekablestream\\SequenceMetadataTest.java",
      "className": "SequenceMetadataTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate TaskActionClient mockTaskActionClient;",
        "line": 51,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockTaskToolbox",
    "variableType": "TaskToolbox",
    "mockedClass": "TaskToolbox",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.seekablestream",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\seekablestream\\SequenceMetadataTest.java",
      "className": "SequenceMetadataTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate TaskToolbox mockTaskToolbox;",
        "line": 54,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockTaskToolbox.getTaskActionClient()).thenReturn(mockTaskActionClient);",
        "line": 97,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPublishAnnotatedSegmentsSucceedIfDropSegmentsAndOverwriteSegmentsNullAndEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockSeekableStreamIndexTaskRunner",
    "variableType": "SeekableStreamIndexTaskRunner",
    "mockedClass": "SeekableStreamIndexTaskRunner",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.seekablestream",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\seekablestream\\SequenceMetadataTest.java",
      "className": "SequenceMetadataTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate SeekableStreamIndexTaskRunner mockSeekableStreamIndexTaskRunner;",
        "line": 45,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockSeekableStreamIndexTaskRunner.deserializePartitionsFromMetadata(ArgumentMatchers.any(), ArgumentMatchers.any())).thenReturn(mockSeekableStreamEndSequenceNumbers);",
        "line": 95,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPublishAnnotatedSegmentsSucceedIfDropSegmentsAndOverwriteSegmentsNullAndEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockedByteEntityReader",
    "variableType": "SettableByteEntityReader",
    "mockedClass": "SettableByteEntityReader",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.seekablestream",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\seekablestream\\StreamChunkParserTest.java",
      "className": "StreamChunkParserTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate SettableByteEntityReader mockedByteEntityReader;",
        "line": 84,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockedByteEntityReader.read()).thenThrow(new ParseException(null, \"error parsing malformed data\"));",
        "line": 253,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParseMalformedDataWithAllowedParseExceptions_thenNoException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockedByteEntityReader.read()).thenThrow(new ParseException(null, \"error parsing malformed data\"));",
        "line": 287,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParseMalformedDataException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockedByteEntityReader.read()).thenThrow(new ParseException(null, \"error parsing malformed data\"));",
        "line": 331,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParseMalformedDataWithUnlimitedAllowedParseExceptions_thenNoException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockedByteEntityReader",
    "variableType": "SettableByteEntityReader",
    "mockedClass": "SettableByteEntityReader",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.seekablestream",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\seekablestream\\StreamChunkParserTest.java",
      "className": "StreamChunkParserTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate SettableByteEntityReader mockedByteEntityReader;",
        "line": 84,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockedByteEntityReader.read()).thenThrow(new ParseException(null, \"error parsing malformed data\"));",
        "line": 253,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParseMalformedDataWithAllowedParseExceptions_thenNoException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockedByteEntityReader.read()).thenThrow(new ParseException(null, \"error parsing malformed data\"));",
        "line": 287,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParseMalformedDataException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockedByteEntityReader.read()).thenThrow(new ParseException(null, \"error parsing malformed data\"));",
        "line": 331,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParseMalformedDataWithUnlimitedAllowedParseExceptions_thenNoException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockedByteEntityReader",
    "variableType": "SettableByteEntityReader",
    "mockedClass": "SettableByteEntityReader",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.seekablestream",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\seekablestream\\StreamChunkParserTest.java",
      "className": "StreamChunkParserTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate SettableByteEntityReader mockedByteEntityReader;",
        "line": 84,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockedByteEntityReader.read()).thenThrow(new ParseException(null, \"error parsing malformed data\"));",
        "line": 253,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParseMalformedDataWithAllowedParseExceptions_thenNoException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockedByteEntityReader.read()).thenThrow(new ParseException(null, \"error parsing malformed data\"));",
        "line": 287,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParseMalformedDataException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockedByteEntityReader.read()).thenThrow(new ParseException(null, \"error parsing malformed data\"));",
        "line": 331,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParseMalformedDataWithUnlimitedAllowedParseExceptions_thenNoException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "shardSpec",
    "variableType": "BucketNumberedShardSpec<?>",
    "mockedClass": "BucketNumberedShardSpec",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Other Methods\n\nStubbing:\n— Other Methods\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.worker.shuffle",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\worker\\shuffle\\ShuffleDataSegmentPusherTest.java",
      "className": "ShuffleDataSegmentPusherTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "BucketNumberedShardSpec<?> shardSpec = Mockito.mock(BucketNumberedShardSpec.class);",
        "line": 203,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "newSegment",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(shardSpec.getBucketId()).thenReturn(0);",
        "line": 204,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "newSegment",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "monitorScheduler",
    "variableType": "MonitorScheduler",
    "mockedClass": "MonitorScheduler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.worker.shuffle",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\worker\\shuffle\\ShuffleModuleTest.java",
      "className": "ShuffleModuleTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final MonitorScheduler monitorScheduler = Mockito.mock(MonitorScheduler.class);",
        "line": 51,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetShuffleMetricsWhenShuffleMonitorExists",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(monitorScheduler.findMonitor(ShuffleMonitor.class)).thenReturn(Optional.of(shuffleMonitor));",
        "line": 52,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetShuffleMetricsWhenShuffleMonitorExists",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "monitorScheduler",
    "variableType": "MonitorScheduler",
    "mockedClass": "MonitorScheduler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.worker.shuffle",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\worker\\shuffle\\ShuffleModuleTest.java",
      "className": "ShuffleModuleTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final MonitorScheduler monitorScheduler = Mockito.mock(MonitorScheduler.class);",
        "line": 64,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetShuffleMetricsWithNoShuffleMonitor",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(monitorScheduler.findMonitor(ArgumentMatchers.eq(ShuffleMonitor.class))).thenReturn(Optional.empty());",
        "line": 65,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetShuffleMetricsWithNoShuffleMonitor",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "shuffleMetrics",
    "variableType": "ShuffleMetrics",
    "mockedClass": "ShuffleMetrics",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.worker.shuffle",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\worker\\shuffle\\ShuffleMonitorTest.java",
      "className": "ShuffleMonitorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final ShuffleMetrics shuffleMetrics = Mockito.mock(ShuffleMetrics.class);",
        "line": 38,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDoMonitor",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(shuffleMetrics.snapshotAndReset()).thenReturn(ImmutableMap.of(\"supervisor\", perDatasourceShuffleMetrics));",
        "line": 43,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDoMonitor",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "shardSpec",
    "variableType": "BucketNumberedShardSpec<?>",
    "mockedClass": "BucketNumberedShardSpec",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Other Methods\n\nStubbing:\n— Other Methods\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.worker.shuffle",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\worker\\shuffle\\ShuffleResourceTest.java",
      "className": "ShuffleResourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "BucketNumberedShardSpec<?> shardSpec = Mockito.mock(BucketNumberedShardSpec.class);",
        "line": 190,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "newSegment",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(shardSpec.getBucketId()).thenReturn(0);",
        "line": 191,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "newSegment",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "mockConfigManager",
    "variableType": "ConfigManager",
    "mockedClass": "ConfigManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.common.config",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\common\\config\\JacksonConfigManagerTest.java",
      "className": "JacksonConfigManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ConfigManager mockConfigManager;",
        "line": 46,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockAuditManager",
    "variableType": "AuditManager",
    "mockedClass": "AuditManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.common.config",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\common\\config\\JacksonConfigManagerTest.java",
      "className": "JacksonConfigManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate AuditManager mockAuditManager;",
        "line": 49,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockAuditManager).doAudit(ArgumentMatchers.eq(key), ArgumentMatchers.eq(key), ArgumentMatchers.eq(auditInfo), ArgumentMatchers.eq(val), configSerdeCapture.capture());",
        "line": 131,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockConfigManager",
    "variableType": "ConfigManager",
    "mockedClass": "ConfigManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.common.config",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\common\\config\\JacksonConfigManagerTest.java",
      "className": "JacksonConfigManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ConfigManager mockConfigManager;",
        "line": 46,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockAuditManager",
    "variableType": "AuditManager",
    "mockedClass": "AuditManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.common.config",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\common\\config\\JacksonConfigManagerTest.java",
      "className": "JacksonConfigManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate AuditManager mockAuditManager;",
        "line": 49,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockAuditManager).doAudit(ArgumentMatchers.eq(key), ArgumentMatchers.eq(key), ArgumentMatchers.eq(auditInfo), ArgumentMatchers.eq(val), configSerdeCapture.capture());",
        "line": 131,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockConfigManager",
    "variableType": "ConfigManager",
    "mockedClass": "ConfigManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.common.config",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\common\\config\\JacksonConfigManagerTest.java",
      "className": "JacksonConfigManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ConfigManager mockConfigManager;",
        "line": 46,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockAuditManager",
    "variableType": "AuditManager",
    "mockedClass": "AuditManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.common.config",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\common\\config\\JacksonConfigManagerTest.java",
      "className": "JacksonConfigManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate AuditManager mockAuditManager;",
        "line": 49,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockAuditManager).doAudit(ArgumentMatchers.eq(key), ArgumentMatchers.eq(key), ArgumentMatchers.eq(auditInfo), ArgumentMatchers.eq(val), configSerdeCapture.capture());",
        "line": 131,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "successfulHandler",
    "variableType": "InputRowHandler",
    "mockedClass": "HandlingInputRowIterator.InputRowHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.data.input",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\data\\input\\HandlingInputRowIteratorTest.java",
      "className": "PresentRowTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private InputRowHandler successfulHandler;",
        "line": 94,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "// Construct mock object\r\nsuccessfulHandler = mock(HandlingInputRowIterator.InputRowHandler.class);",
        "line": 101,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Method Stubs\r\nwhen(successfulHandler.handle(any(InputRow.class))).thenReturn(true);",
        "line": 103,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(successfulHandler, Mockito.times(1)).handle(INPUT_ROW1);",
        "line": 131,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "yieldsNullIfHandledByFirst",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(successfulHandler, Mockito.times(1)).handle(INPUT_ROW1);",
        "line": 141,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "yieldsNullIfHandledBySecond",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "unsuccessfulHandler",
    "variableType": "InputRowHandler",
    "mockedClass": "HandlingInputRowIterator.InputRowHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.data.input",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\data\\input\\HandlingInputRowIteratorTest.java",
      "className": "PresentRowTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private InputRowHandler unsuccessfulHandler;",
        "line": 95,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "// Construct mock object\r\nunsuccessfulHandler = mock(HandlingInputRowIterator.InputRowHandler.class);",
        "line": 105,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Method Stubs\r\nwhen(unsuccessfulHandler.handle(any(InputRow.class))).thenReturn(false);",
        "line": 107,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(unsuccessfulHandler, Mockito.never()).handle(INPUT_ROW1);",
        "line": 115,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "hasNext",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(unsuccessfulHandler, Mockito.times(2)).handle(INPUT_ROW1);",
        "line": 123,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "yieldsNextIfUnhandled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(unsuccessfulHandler, Mockito.never()).handle(INPUT_ROW1);",
        "line": 132,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "yieldsNullIfHandledByFirst",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(unsuccessfulHandler, Mockito.times(1)).handle(INPUT_ROW1);",
        "line": 140,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "yieldsNullIfHandledBySecond",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "INPUT_ROW2",
    "variableType": "InputRow",
    "mockedClass": "InputRow",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.data.input",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\data\\input\\HandlingInputRowIteratorTest.java",
      "className": "PresentRowTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final InputRow INPUT_ROW2 = mock(InputRow.class);",
        "line": 91,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "INPUT_ROW1",
    "variableType": "InputRow",
    "mockedClass": "InputRow",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.data.input",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\data\\input\\HandlingInputRowIteratorTest.java",
      "className": "PresentRowTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final InputRow INPUT_ROW1 = mock(InputRow.class);",
        "line": 90,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "inputSource",
    "variableType": "CloudObjectInputSource",
    "mockedClass": "CloudObjectInputSource",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.data.input.impl",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\data\\input\\impl\\CloudObjectInputSourceTest.java",
      "className": "CloudObjectInputSourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CloudObjectInputSource inputSource = Mockito.mock(CloudObjectInputSource.class, Mockito.withSettings().useConstructor(SCHEME, URIS, null, null, null).defaultAnswer(Mockito.CALLS_REAL_METHODS));",
        "line": 77,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetUris",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "inputSource",
    "variableType": "CloudObjectInputSource",
    "mockedClass": "CloudObjectInputSource",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.data.input.impl",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\data\\input\\impl\\CloudObjectInputSourceTest.java",
      "className": "CloudObjectInputSourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CloudObjectInputSource inputSource = Mockito.mock(CloudObjectInputSource.class, Mockito.withSettings().useConstructor(SCHEME, null, PREFIXES, null, null).defaultAnswer(Mockito.CALLS_REAL_METHODS));",
        "line": 91,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetPrefixes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "inputSource",
    "variableType": "CloudObjectInputSource",
    "mockedClass": "CloudObjectInputSource",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.data.input.impl",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\data\\input\\impl\\CloudObjectInputSourceTest.java",
      "className": "CloudObjectInputSourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CloudObjectInputSource inputSource = Mockito.mock(CloudObjectInputSource.class, Mockito.withSettings().useConstructor(SCHEME, URIS, null, null, \"**.parquet\").defaultAnswer(Mockito.CALLS_REAL_METHODS));",
        "line": 105,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetObjectGlob",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "inputSource2",
    "variableType": "CloudObjectInputSource",
    "mockedClass": "CloudObjectInputSource",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.data.input.impl",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\data\\input\\impl\\CloudObjectInputSourceTest.java",
      "className": "CloudObjectInputSourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CloudObjectInputSource inputSource2 = Mockito.mock(CloudObjectInputSource.class, Mockito.withSettings().useConstructor(SCHEME, URIS, null, null, \"**.csv\").defaultAnswer(Mockito.CALLS_REAL_METHODS));",
        "line": 121,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInequality",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "inputSource1",
    "variableType": "CloudObjectInputSource",
    "mockedClass": "CloudObjectInputSource",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.data.input.impl",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\data\\input\\impl\\CloudObjectInputSourceTest.java",
      "className": "CloudObjectInputSourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CloudObjectInputSource inputSource1 = Mockito.mock(CloudObjectInputSource.class, Mockito.withSettings().useConstructor(SCHEME, URIS, null, null, \"**.parquet\").defaultAnswer(Mockito.CALLS_REAL_METHODS));",
        "line": 116,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInequality",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "inputSource",
    "variableType": "CloudObjectInputSource",
    "mockedClass": "CloudObjectInputSource",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.data.input.impl",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\data\\input\\impl\\CloudObjectInputSourceTest.java",
      "className": "CloudObjectInputSourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CloudObjectInputSource inputSource = Mockito.mock(CloudObjectInputSource.class, Mockito.withSettings().useConstructor(SCHEME, URIS2, null, null, \"**.csv\").defaultAnswer(Mockito.CALLS_REAL_METHODS));",
        "line": 134,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithUrisFilter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(inputSource.getSplitWidget()).thenReturn(new MockSplitWidget());",
        "line": 138,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithUrisFilter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "inputSource",
    "variableType": "CloudObjectInputSource",
    "mockedClass": "CloudObjectInputSource",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.data.input.impl",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\data\\input\\impl\\CloudObjectInputSourceTest.java",
      "className": "CloudObjectInputSourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CloudObjectInputSource inputSource = Mockito.mock(CloudObjectInputSource.class, Mockito.withSettings().useConstructor(SCHEME, URIS, null, null, null).defaultAnswer(Mockito.CALLS_REAL_METHODS));",
        "line": 160,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithUris",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(inputSource.getSplitWidget()).thenReturn(new MockSplitWidget());",
        "line": 164,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithUris",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "inputSource",
    "variableType": "CloudObjectInputSource",
    "mockedClass": "CloudObjectInputSource",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.data.input.impl",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\data\\input\\impl\\CloudObjectInputSourceTest.java",
      "className": "CloudObjectInputSourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CloudObjectInputSource inputSource = Mockito.mock(CloudObjectInputSource.class, Mockito.withSettings().useConstructor(SCHEME, null, null, OBJECTS_BEFORE_GLOB, \"**.csv\").defaultAnswer(Mockito.CALLS_REAL_METHODS));",
        "line": 186,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithObjectsFilter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(inputSource.getSplitWidget()).thenReturn(new MockSplitWidget());",
        "line": 190,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithObjectsFilter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "inputSource",
    "variableType": "CloudObjectInputSource",
    "mockedClass": "CloudObjectInputSource",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.data.input.impl",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\data\\input\\impl\\CloudObjectInputSourceTest.java",
      "className": "CloudObjectInputSourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CloudObjectInputSource inputSource = Mockito.mock(CloudObjectInputSource.class, Mockito.withSettings().useConstructor(SCHEME, null, null, OBJECTS, null).defaultAnswer(Mockito.CALLS_REAL_METHODS));",
        "line": 212,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithObjects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(inputSource.getSplitWidget()).thenReturn(new MockSplitWidget());",
        "line": 216,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithObjects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "urlConnection",
    "variableType": "URLConnection",
    "mockedClass": "URLConnection",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.data.input.impl",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\data\\input\\impl\\HttpEntityTest.java",
      "className": "HttpEntityTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private URLConnection urlConnection;",
        "line": 50,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "urlConnection = Mockito.mock(URLConnection.class);",
        "line": 58,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(urlConnection.getInputStream()).thenReturn(inputStreamMock);",
        "line": 62,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(urlConnection.getHeaderField(HttpHeaders.CONTENT_RANGE)).thenReturn(contentRange);",
        "line": 121,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithServerSupportingRanges",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(urlConnection.getHeaderField(HttpHeaders.CONTENT_RANGE)).thenReturn(null);",
        "line": 130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithServerNotSupportingRanges",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(urlConnection.getHeaderField(HttpHeaders.CONTENT_RANGE)).thenReturn(\"token 2-12/12\");",
        "line": 139,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithServerNotSupportingBytesRanges",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "inputStreamMock",
    "variableType": "InputStream",
    "mockedClass": "InputStream",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.data.input.impl",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\data\\input\\impl\\HttpEntityTest.java",
      "className": "HttpEntityTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private InputStream inputStreamMock;",
        "line": 51,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "inputStreamMock = Mockito.mock(InputStream.class);",
        "line": 59,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(inputStreamMock.skip(ArgumentMatchers.anyLong())).then(AdditionalAnswers.returnsFirstArg());",
        "line": 63,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(inputStreamMock, Mockito.times(0)).skip(offset);",
        "line": 123,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithServerSupportingRanges",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(inputStreamMock, Mockito.times(1)).skip(offset);",
        "line": 132,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithServerNotSupportingRanges",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(inputStreamMock, Mockito.times(1)).skip(offset);",
        "line": 141,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithServerNotSupportingBytesRanges",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "uri",
    "variableType": "URI",
    "mockedClass": "URI",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.data.input.impl",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\data\\input\\impl\\HttpEntityTest.java",
      "className": "HttpEntityTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private URI uri;",
        "line": 48,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "uri = Mockito.mock(URI.class);",
        "line": 56,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(uri.toURL()).thenReturn(url);",
        "line": 60,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "mockedClass": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.data.input.impl",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\data\\input\\impl\\HttpEntityTest.java",
      "className": "HttpEntityTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private URL url;",
        "line": 49,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "url = Mockito.mock(URL.class);",
        "line": 57,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(url.openConnection()).thenReturn(urlConnection);",
        "line": 61,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "objectOpenFunction",
    "variableType": "ObjectOpenFunction<File>",
    "mockedClass": "ObjectOpenFunction<File>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.data.input.impl",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\data\\input\\impl\\RetryingInputStreamTest.java",
      "className": "RetryingInputStreamTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private final ObjectOpenFunction<File> objectOpenFunction = spy(new ObjectOpenFunction<File>() {\r\n\r\n    @Override\r\n    public InputStream open(File object) throws IOException {\r\n        return new TestInputStream(new FileInputStream(object));\r\n    }\r\n\r\n    @Override\r\n    public InputStream open(File object, long start) throws IOException {\r\n        final FileInputStream fis = new FileInputStream(object);\r\n        Preconditions.checkState(fis.skip(start) == start);\r\n        return new TestInputStream(fis);\r\n    }\r\n});",
        "line": 70,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(objectOpenFunction, times(3)).open(any(), anyLong());",
        "line": 256,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRetryOnExceptionWhenOpeningStream",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "objectOpenFunction",
    "variableType": "ObjectOpenFunction<File>",
    "mockedClass": "ObjectOpenFunction<File>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.data.input.impl",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\data\\input\\impl\\RetryingInputStreamTest.java",
      "className": "RetryingInputStreamTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private final ObjectOpenFunction<File> objectOpenFunction = spy(new ObjectOpenFunction<File>() {\r\n\r\n    @Override\r\n    public InputStream open(File object) throws IOException {\r\n        return new TestInputStream(new FileInputStream(object));\r\n    }\r\n\r\n    @Override\r\n    public InputStream open(File object, long start) throws IOException {\r\n        final FileInputStream fis = new FileInputStream(object);\r\n        Preconditions.checkState(fis.skip(start) == start);\r\n        return new TestInputStream(fis);\r\n    }\r\n});",
        "line": 70,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(objectOpenFunction, times(3)).open(any(), anyLong());",
        "line": 256,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRetryOnExceptionWhenOpeningStream",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "objectOpenFunction",
    "variableType": "ObjectOpenFunction<File>",
    "mockedClass": "ObjectOpenFunction<File>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.data.input.impl",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\data\\input\\impl\\RetryingInputStreamTest.java",
      "className": "RetryingInputStreamTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private final ObjectOpenFunction<File> objectOpenFunction = spy(new ObjectOpenFunction<File>() {\r\n\r\n    @Override\r\n    public InputStream open(File object) throws IOException {\r\n        return new TestInputStream(new FileInputStream(object));\r\n    }\r\n\r\n    @Override\r\n    public InputStream open(File object, long start) throws IOException {\r\n        final FileInputStream fis = new FileInputStream(object);\r\n        Preconditions.checkState(fis.skip(start) == start);\r\n        return new TestInputStream(fis);\r\n    }\r\n});",
        "line": 70,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(objectOpenFunction, times(3)).open(any(), anyLong());",
        "line": 256,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRetryOnExceptionWhenOpeningStream",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "writeSelector",
    "variableType": "BaseObjectColumnValueSelector<String>",
    "mockedClass": "BaseObjectColumnValueSelector<String>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Other Methods\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.frame.field",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\frame\\field\\ComplexFieldReaderTest.java",
      "className": "ComplexFieldReaderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\npublic BaseObjectColumnValueSelector<String> writeSelector;",
        "line": 59,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(writeSelector.getObject()).thenReturn(value);",
        "line": 144,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "writeToMemory",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "writeSelector",
    "variableType": "BaseObjectColumnValueSelector<String>",
    "mockedClass": "BaseObjectColumnValueSelector<String>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Other Methods\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.frame.field",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\frame\\field\\ComplexFieldReaderTest.java",
      "className": "ComplexFieldReaderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\npublic BaseObjectColumnValueSelector<String> writeSelector;",
        "line": 59,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(writeSelector.getObject()).thenReturn(value);",
        "line": 144,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "writeToMemory",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "writeSelector",
    "variableType": "ColumnValueSelector",
    "mockedClass": "ColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Other Methods\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.frame.field",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\frame\\field\\DoubleArrayFieldReaderTest.java",
      "className": "DoubleArrayFieldReaderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\npublic ColumnValueSelector writeSelector;",
        "line": 51,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(writeSelector.getObject()).thenReturn(value);",
        "line": 223,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "writeToMemory",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "writeSelector",
    "variableType": "BaseDoubleColumnValueSelector",
    "mockedClass": "BaseDoubleColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Other Methods\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.frame.field",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\frame\\field\\DoubleFieldReaderTest.java",
      "className": "DoubleFieldReaderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\npublic BaseDoubleColumnValueSelector writeSelector;",
        "line": 53,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(writeSelector.isNull()).thenReturn(value == null);",
        "line": 208,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "writeToMemory",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(writeSelector.getDouble()).thenReturn(value);",
        "line": 211,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "writeToMemory",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "writeSelector",
    "variableType": "ColumnValueSelector",
    "mockedClass": "ColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Other Methods\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.frame.field",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\frame\\field\\FloatArrayFieldReaderTest.java",
      "className": "FloatArrayFieldReaderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\npublic ColumnValueSelector writeSelector;",
        "line": 51,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(writeSelector.getObject()).thenReturn(value);",
        "line": 213,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "writeToMemory",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "writeSelector",
    "variableType": "BaseFloatColumnValueSelector",
    "mockedClass": "BaseFloatColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Other Methods\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.frame.field",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\frame\\field\\FloatFieldReaderTest.java",
      "className": "FloatFieldReaderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\npublic BaseFloatColumnValueSelector writeSelector;",
        "line": 53,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(writeSelector.isNull()).thenReturn(value == null);",
        "line": 208,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "writeToMemory",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(writeSelector.getFloat()).thenReturn(value);",
        "line": 211,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "writeToMemory",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "writeSelector",
    "variableType": "ColumnValueSelector",
    "mockedClass": "ColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Other Methods\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.frame.field",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\frame\\field\\LongArrayFieldReaderTest.java",
      "className": "LongArrayFieldReaderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\npublic ColumnValueSelector writeSelector;",
        "line": 51,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(writeSelector.getObject()).thenReturn(value);",
        "line": 189,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "writeToMemory",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "writeSelector",
    "variableType": "BaseLongColumnValueSelector",
    "mockedClass": "BaseLongColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Other Methods\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.frame.field",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\frame\\field\\LongFieldReaderTest.java",
      "className": "LongFieldReaderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\npublic BaseLongColumnValueSelector writeSelector;",
        "line": 53,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(writeSelector.isNull()).thenReturn(value == null);",
        "line": 208,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "writeToMemory",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(writeSelector.getLong()).thenReturn(value);",
        "line": 211,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "writeToMemory",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "selector",
    "variableType": "BaseObjectColumnValueSelector<List<String>>",
    "mockedClass": "BaseObjectColumnValueSelector<List<String>>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.frame.field",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\frame\\field\\StringArrayFieldWriterTest.java",
      "className": "StringArrayFieldWriterTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\npublic BaseObjectColumnValueSelector<List<String>> selector;",
        "line": 52,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(selector.getObject()).thenReturn(values);",
        "line": 118,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockSelector",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "writeSelector",
    "variableType": "BaseObjectColumnValueSelector<List<String>>",
    "mockedClass": "BaseObjectColumnValueSelector<List<String>>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Other Methods\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.frame.field",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\frame\\field\\StringFieldReaderTest.java",
      "className": "StringFieldReaderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\npublic BaseObjectColumnValueSelector<List<String>> writeSelector;",
        "line": 62,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(writeSelector.getObject()).thenReturn(values);",
        "line": 280,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "writeToMemory",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "selectorUtf8",
    "variableType": "DimensionSelector",
    "mockedClass": "DimensionSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.frame.field",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\frame\\field\\StringFieldWriterTest.java",
      "className": "StringFieldWriterTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\npublic DimensionSelector selectorUtf8;",
        "line": 57,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(selectorUtf8.getRow()).thenReturn(row);",
        "line": 134,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockSelectors",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(selectorUtf8.supportsLookupNameUtf8()).thenReturn(true);",
        "line": 138,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockSelectors",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "// Must duplicate: lookupNameUtf8 guarantees that the returned buffer will not be reused.\r\nMockito.when(selectorUtf8.lookupNameUtf8(i)).then(invocation -> buf == null ? null : buf.duplicate());",
        "line": 162,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockSelectors",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "selector",
    "variableType": "DimensionSelector",
    "mockedClass": "DimensionSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.frame.field",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\frame\\field\\StringFieldWriterTest.java",
      "className": "StringFieldWriterTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\npublic DimensionSelector selector;",
        "line": 54,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(selector.getRow()).thenReturn(row);",
        "line": 133,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockSelectors",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(selector.supportsLookupNameUtf8()).thenReturn(false);",
        "line": 137,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockSelectors",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(selector.lookupName(i)).thenReturn(value);",
        "line": 143,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockSelectors",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "monitor",
    "variableType": "Monitor",
    "mockedClass": "Monitor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\BasicMonitorSchedulerTest.java",
      "className": "BasicMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Monitor monitor = Mockito.mock(Monitor.class);",
        "line": 56,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(monitor.monitor(ArgumentMatchers.any())).thenReturn(true);",
        "line": 57,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(monitor, Mockito.atLeast(2)).monitor(ArgumentMatchers.any());",
        "line": 67,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "monitor",
    "variableType": "Monitor",
    "mockedClass": "Monitor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\BasicMonitorSchedulerTest.java",
      "className": "BasicMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Monitor monitor = Mockito.mock(Monitor.class);",
        "line": 74,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatAndStopScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(monitor.monitor(ArgumentMatchers.any())).thenReturn(true, true, true, false);",
        "line": 75,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatAndStopScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// monitor.monitor() is called at least 5 times since a new task is scheduled first and then the current one is executed.\r\n// See ScheduledExecutors.scheduleAtFixedRate() for details.\r\nMockito.verify(monitor, Mockito.atLeast(5)).monitor(ArgumentMatchers.any());",
        "line": 87,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatAndStopScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "monitor",
    "variableType": "Monitor",
    "mockedClass": "Monitor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\BasicMonitorSchedulerTest.java",
      "className": "BasicMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Monitor monitor = Mockito.mock(Monitor.class);",
        "line": 94,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileMonitoring_ContinueMonitor",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(monitor.monitor(ArgumentMatchers.any())).thenThrow(new RuntimeException(\"Test throwing exception while monitoring\"));",
        "line": 95,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileMonitoring_ContinueMonitor",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// monitor.monitor() is called at least twice\r\n// See ScheduledExecutors.scheduleAtFixedRate() for details.\r\nMockito.verify(monitor, Mockito.atLeast(2)).monitor(ArgumentMatchers.any());",
        "line": 108,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileMonitoring_ContinueMonitor",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "emitter",
    "variableType": "ServiceEmitter",
    "mockedClass": "ServiceEmitter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\BasicMonitorSchedulerTest.java",
      "className": "BasicMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private ServiceEmitter emitter;",
        "line": 43,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "emitter = Mockito.mock(ServiceEmitter.class);",
        "line": 49,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "scheduler",
    "variableType": "MonitorScheduler",
    "mockedClass": "MonitorScheduler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final MonitorScheduler scheduler = new ClockDriftSafeMonitorScheduler(Mockito.mock(DruidMonitorSchedulerConfig.class), Mockito.mock(ServiceEmitter.class), ImmutableList.of(monitor1, monitor2), CronScheduler.newBuilder(Duration.ofSeconds(1L)).setThreadName(\"monitor-scheduler-test\").build(), executor);",
        "line": 95,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFindMonitor",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "executor",
    "variableType": "ExecutorService",
    "mockedClass": "ExecutorService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ExecutorService executor = Mockito.mock(ExecutorService.class);",
        "line": 93,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFindMonitor",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "scheduler",
    "variableType": "MonitorScheduler",
    "mockedClass": "MonitorScheduler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final MonitorScheduler scheduler = new ClockDriftSafeMonitorScheduler(config, Mockito.mock(ServiceEmitter.class), ImmutableList.of(monitor), cronScheduler, executor);",
        "line": 159,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "executor",
    "variableType": "ExecutorService",
    "mockedClass": "ExecutorService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ExecutorService executor = Mockito.mock(ExecutorService.class);",
        "line": 116,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(executor, Mockito.times(2)).submit(ArgumentMatchers.any(Callable.class));",
        "line": 173,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "monitor",
    "variableType": "Monitor",
    "mockedClass": "Monitor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Monitor monitor = Mockito.mock(Monitor.class);",
        "line": 154,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(monitor, Mockito.times(1)).start();",
        "line": 169,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(monitor, Mockito.times(2)).monitor(ArgumentMatchers.any());",
        "line": 174,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "config",
    "variableType": "DruidMonitorSchedulerConfig",
    "mockedClass": "DruidMonitorSchedulerConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DruidMonitorSchedulerConfig config = Mockito.mock(DruidMonitorSchedulerConfig.class);",
        "line": 156,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(config.getEmissionDuration()).thenReturn(new org.joda.time.Duration(1000L));",
        "line": 157,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "scheduler",
    "variableType": "MonitorScheduler",
    "mockedClass": "MonitorScheduler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final MonitorScheduler scheduler = new ClockDriftSafeMonitorScheduler(config, Mockito.mock(ServiceEmitter.class), ImmutableList.of(monitor), cronScheduler, executor);",
        "line": 223,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatAndStopScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "executor",
    "variableType": "ExecutorService",
    "mockedClass": "ExecutorService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ExecutorService executor = Mockito.mock(ExecutorService.class);",
        "line": 181,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatAndStopScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(executor, Mockito.times(1)).submit(ArgumentMatchers.any(Callable.class));",
        "line": 237,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatAndStopScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "monitor",
    "variableType": "Monitor",
    "mockedClass": "Monitor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Monitor monitor = Mockito.mock(Monitor.class);",
        "line": 218,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatAndStopScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(monitor, Mockito.times(1)).start();",
        "line": 233,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatAndStopScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(monitor, Mockito.times(2)).monitor(ArgumentMatchers.any());",
        "line": 238,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatAndStopScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(monitor, Mockito.times(1)).stop();",
        "line": 239,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatAndStopScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "config",
    "variableType": "DruidMonitorSchedulerConfig",
    "mockedClass": "DruidMonitorSchedulerConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DruidMonitorSchedulerConfig config = Mockito.mock(DruidMonitorSchedulerConfig.class);",
        "line": 220,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatAndStopScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(config.getEmissionDuration()).thenReturn(new org.joda.time.Duration(1000L));",
        "line": 221,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatAndStopScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "scheduler",
    "variableType": "MonitorScheduler",
    "mockedClass": "MonitorScheduler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final MonitorScheduler scheduler = new ClockDriftSafeMonitorScheduler(config, Mockito.mock(ServiceEmitter.class), ImmutableList.of(monitor), cronScheduler, executor);",
        "line": 288,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileMonitoring",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "executor",
    "variableType": "ExecutorService",
    "mockedClass": "ExecutorService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ExecutorService executor = Mockito.mock(ExecutorService.class);",
        "line": 246,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileMonitoring",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(executor, Mockito.times(1)).submit(ArgumentMatchers.any(Callable.class));",
        "line": 302,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileMonitoring",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "monitor",
    "variableType": "Monitor",
    "mockedClass": "Monitor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Monitor monitor = Mockito.mock(Monitor.class);",
        "line": 247,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileMonitoring",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(monitor.monitor(ArgumentMatchers.any(ServiceEmitter.class))).thenThrow(new RuntimeException(\"Test throwing exception while monitoring\"));",
        "line": 248,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileMonitoring",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(monitor, Mockito.times(1)).start();",
        "line": 298,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileMonitoring",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(monitor, Mockito.times(1)).monitor(ArgumentMatchers.any());",
        "line": 303,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileMonitoring",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "config",
    "variableType": "DruidMonitorSchedulerConfig",
    "mockedClass": "DruidMonitorSchedulerConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DruidMonitorSchedulerConfig config = Mockito.mock(DruidMonitorSchedulerConfig.class);",
        "line": 251,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileMonitoring",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(config.getEmissionDuration()).thenReturn(new org.joda.time.Duration(1000L));",
        "line": 252,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileMonitoring",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "scheduler",
    "variableType": "MonitorScheduler",
    "mockedClass": "MonitorScheduler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final MonitorScheduler scheduler = new ClockDriftSafeMonitorScheduler(config, Mockito.mock(ServiceEmitter.class), ImmutableList.of(monitor), cronScheduler, executor);",
        "line": 339,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "executor",
    "variableType": "ExecutorService",
    "mockedClass": "ExecutorService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— @Override\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ExecutorService executor = Mockito.mock(ExecutorService.class);",
        "line": 311,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(executor.submit(ArgumentMatchers.any(Callable.class))).thenThrow(new RuntimeException(\"Test throwing exception while scheduling\"));",
        "line": 326,
        "locate": "@Override",
        "locationContext": {
          "methodName": "answer",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Override"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(executor, Mockito.times(1)).submit(ArgumentMatchers.any(Callable.class));",
        "line": 353,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "monitor",
    "variableType": "Monitor",
    "mockedClass": "Monitor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Monitor monitor = Mockito.mock(Monitor.class);",
        "line": 312,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(monitor, Mockito.times(1)).start();",
        "line": 349,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "config",
    "variableType": "DruidMonitorSchedulerConfig",
    "mockedClass": "DruidMonitorSchedulerConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DruidMonitorSchedulerConfig config = Mockito.mock(DruidMonitorSchedulerConfig.class);",
        "line": 313,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(config.getEmissionDuration()).thenReturn(new org.joda.time.Duration(1000L));",
        "line": 314,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "cronScheduler",
    "variableType": "CronScheduler",
    "mockedClass": "CronScheduler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate CronScheduler cronScheduler;",
        "line": 59,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(cronScheduler, Mockito.times(1)).scheduleAtFixedRate(ArgumentMatchers.anyLong(), ArgumentMatchers.anyLong(), ArgumentMatchers.any(), ArgumentMatchers.any(CronTask.class));",
        "line": 170,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(cronScheduler, Mockito.times(1)).scheduleAtFixedRate(ArgumentMatchers.anyLong(), ArgumentMatchers.anyLong(), ArgumentMatchers.any(), ArgumentMatchers.any(CronTask.class));",
        "line": 234,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatAndStopScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(cronScheduler, Mockito.times(1)).scheduleAtFixedRate(ArgumentMatchers.anyLong(), ArgumentMatchers.anyLong(), ArgumentMatchers.any(), ArgumentMatchers.any(CronTask.class));",
        "line": 299,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileMonitoring",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(cronScheduler, Mockito.times(1)).scheduleAtFixedRate(ArgumentMatchers.anyLong(), ArgumentMatchers.anyLong(), ArgumentMatchers.any(), ArgumentMatchers.any(CronTask.class));",
        "line": 350,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "cronScheduler",
    "variableType": "CronScheduler",
    "mockedClass": "CronScheduler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate CronScheduler cronScheduler;",
        "line": 59,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(cronScheduler, Mockito.times(1)).scheduleAtFixedRate(ArgumentMatchers.anyLong(), ArgumentMatchers.anyLong(), ArgumentMatchers.any(), ArgumentMatchers.any(CronTask.class));",
        "line": 170,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(cronScheduler, Mockito.times(1)).scheduleAtFixedRate(ArgumentMatchers.anyLong(), ArgumentMatchers.anyLong(), ArgumentMatchers.any(), ArgumentMatchers.any(CronTask.class));",
        "line": 234,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatAndStopScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(cronScheduler, Mockito.times(1)).scheduleAtFixedRate(ArgumentMatchers.anyLong(), ArgumentMatchers.anyLong(), ArgumentMatchers.any(), ArgumentMatchers.any(CronTask.class));",
        "line": 299,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileMonitoring",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(cronScheduler, Mockito.times(1)).scheduleAtFixedRate(ArgumentMatchers.anyLong(), ArgumentMatchers.anyLong(), ArgumentMatchers.any(), ArgumentMatchers.any(CronTask.class));",
        "line": 350,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "cronScheduler",
    "variableType": "CronScheduler",
    "mockedClass": "CronScheduler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate CronScheduler cronScheduler;",
        "line": 59,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(cronScheduler, Mockito.times(1)).scheduleAtFixedRate(ArgumentMatchers.anyLong(), ArgumentMatchers.anyLong(), ArgumentMatchers.any(), ArgumentMatchers.any(CronTask.class));",
        "line": 170,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(cronScheduler, Mockito.times(1)).scheduleAtFixedRate(ArgumentMatchers.anyLong(), ArgumentMatchers.anyLong(), ArgumentMatchers.any(), ArgumentMatchers.any(CronTask.class));",
        "line": 234,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatAndStopScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(cronScheduler, Mockito.times(1)).scheduleAtFixedRate(ArgumentMatchers.anyLong(), ArgumentMatchers.anyLong(), ArgumentMatchers.any(), ArgumentMatchers.any(CronTask.class));",
        "line": 299,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileMonitoring",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(cronScheduler, Mockito.times(1)).scheduleAtFixedRate(ArgumentMatchers.anyLong(), ArgumentMatchers.anyLong(), ArgumentMatchers.any(), ArgumentMatchers.any(CronTask.class));",
        "line": 350,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "cronScheduler",
    "variableType": "CronScheduler",
    "mockedClass": "CronScheduler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate CronScheduler cronScheduler;",
        "line": 59,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(cronScheduler, Mockito.times(1)).scheduleAtFixedRate(ArgumentMatchers.anyLong(), ArgumentMatchers.anyLong(), ArgumentMatchers.any(), ArgumentMatchers.any(CronTask.class));",
        "line": 170,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(cronScheduler, Mockito.times(1)).scheduleAtFixedRate(ArgumentMatchers.anyLong(), ArgumentMatchers.anyLong(), ArgumentMatchers.any(), ArgumentMatchers.any(CronTask.class));",
        "line": 234,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatAndStopScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(cronScheduler, Mockito.times(1)).scheduleAtFixedRate(ArgumentMatchers.anyLong(), ArgumentMatchers.anyLong(), ArgumentMatchers.any(), ArgumentMatchers.any(CronTask.class));",
        "line": 299,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileMonitoring",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(cronScheduler, Mockito.times(1)).scheduleAtFixedRate(ArgumentMatchers.anyLong(), ArgumentMatchers.anyLong(), ArgumentMatchers.any(), ArgumentMatchers.any(CronTask.class));",
        "line": 350,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "cronScheduler",
    "variableType": "CronScheduler",
    "mockedClass": "CronScheduler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\ClockDriftSafeMonitorSchedulerTest.java",
      "className": "ClockDriftSafeMonitorSchedulerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate CronScheduler cronScheduler;",
        "line": 59,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(cronScheduler, Mockito.times(1)).scheduleAtFixedRate(ArgumentMatchers.anyLong(), ArgumentMatchers.anyLong(), ArgumentMatchers.any(), ArgumentMatchers.any(CronTask.class));",
        "line": 170,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(cronScheduler, Mockito.times(1)).scheduleAtFixedRate(ArgumentMatchers.anyLong(), ArgumentMatchers.anyLong(), ArgumentMatchers.any(), ArgumentMatchers.any(CronTask.class));",
        "line": 234,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_RepeatAndStopScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(cronScheduler, Mockito.times(1)).scheduleAtFixedRate(ArgumentMatchers.anyLong(), ArgumentMatchers.anyLong(), ArgumentMatchers.any(), ArgumentMatchers.any(CronTask.class));",
        "line": 299,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileMonitoring",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(cronScheduler, Mockito.times(1)).scheduleAtFixedRate(ArgumentMatchers.anyLong(), ArgumentMatchers.anyLong(), ArgumentMatchers.any(), ArgumentMatchers.any(CronTask.class));",
        "line": 350,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart_UnexpectedExceptionWhileScheduling",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serviceEmitter",
    "variableType": "ServiceEmitter",
    "mockedClass": "ServiceEmitter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\NoopOshiSysMonitorTest.java",
      "className": "NoopOshiSysMonitorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServiceEmitter serviceEmitter = Mockito.mock(ServiceEmitter.class);",
        "line": 33,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDoMonitor",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serviceEmitter",
    "variableType": "ServiceEmitter",
    "mockedClass": "ServiceEmitter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\NoopSysMonitorTest.java",
      "className": "NoopSysMonitorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServiceEmitter serviceEmitter = Mockito.mock(ServiceEmitter.class);",
        "line": 37,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDoMonitor",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serviceEmitter",
    "variableType": "ServiceEmitter",
    "mockedClass": "ServiceEmitter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\OshiSysMonitorTest.java",
      "className": "OshiSysMonitorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServiceEmitter serviceEmitter = Mockito.mock(ServiceEmitter.class);",
        "line": 74,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDoMonitor",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mem",
    "variableType": "GlobalMemory",
    "mockedClass": "GlobalMemory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\OshiSysMonitorTest.java",
      "className": "OshiSysMonitorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "GlobalMemory mem = Mockito.mock(GlobalMemory.class);",
        "line": 101,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMemStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mem.getTotal()).thenReturn(64L);",
        "line": 102,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMemStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mem.getAvailable()).thenReturn(16L);",
        "line": 103,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMemStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mem",
    "variableType": "GlobalMemory",
    "mockedClass": "GlobalMemory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\OshiSysMonitorTest.java",
      "className": "OshiSysMonitorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "GlobalMemory mem = Mockito.mock(GlobalMemory.class);",
        "line": 123,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSwapStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mem.getVirtualMemory()).thenReturn(swap);",
        "line": 129,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSwapStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "swap",
    "variableType": "VirtualMemory",
    "mockedClass": "VirtualMemory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\OshiSysMonitorTest.java",
      "className": "OshiSysMonitorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "VirtualMemory swap = Mockito.mock(VirtualMemory.class);",
        "line": 124,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSwapStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(swap.getSwapPagesIn()).thenReturn(300L);",
        "line": 125,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSwapStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(swap.getSwapPagesOut()).thenReturn(200L);",
        "line": 126,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSwapStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(swap.getSwapTotal()).thenReturn(1000L);",
        "line": 127,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSwapStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(swap.getSwapUsed()).thenReturn(700L);",
        "line": 128,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSwapStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Emit again to assert diff in pageIn stats\r\nMockito.when(swap.getSwapPagesIn()).thenReturn(400L);",
        "line": 145,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSwapStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(swap.getSwapPagesOut()).thenReturn(250L);",
        "line": 146,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSwapStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(swap.getSwapUsed()).thenReturn(500L);",
        "line": 147,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSwapStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "fileSystem",
    "variableType": "FileSystem",
    "mockedClass": "FileSystem",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\OshiSysMonitorTest.java",
      "className": "OshiSysMonitorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "FileSystem fileSystem = Mockito.mock(FileSystem.class);",
        "line": 161,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFsStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(fileSystem.getFileStores(true)).thenReturn(osFileStores);",
        "line": 177,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFsStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "fs2",
    "variableType": "OSFileStore",
    "mockedClass": "OSFileStore",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\OshiSysMonitorTest.java",
      "className": "OshiSysMonitorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "OSFileStore fs2 = Mockito.mock(OSFileStore.class);",
        "line": 163,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFsStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(fs2.getTotalSpace()).thenReturn(400L);",
        "line": 170,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFsStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(fs2.getUsableSpace()).thenReturn(320L);",
        "line": 171,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFsStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(fs2.getTotalInodes()).thenReturn(800L);",
        "line": 172,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFsStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(fs2.getFreeInodes()).thenReturn(600L);",
        "line": 173,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFsStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(fs2.getVolume()).thenReturn(\"/dev/disk2\");",
        "line": 174,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFsStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(fs2.getMount()).thenReturn(\"/System/Volumes/boot2\");",
        "line": 175,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFsStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "fs1",
    "variableType": "OSFileStore",
    "mockedClass": "OSFileStore",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\OshiSysMonitorTest.java",
      "className": "OshiSysMonitorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "OSFileStore fs1 = Mockito.mock(OSFileStore.class);",
        "line": 162,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFsStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(fs1.getTotalSpace()).thenReturn(300L);",
        "line": 164,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFsStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(fs1.getUsableSpace()).thenReturn(200L);",
        "line": 165,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFsStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(fs1.getTotalInodes()).thenReturn(1000L);",
        "line": 166,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFsStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(fs1.getFreeInodes()).thenReturn(700L);",
        "line": 167,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFsStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(fs1.getVolume()).thenReturn(\"/dev/disk1\");",
        "line": 168,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFsStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(fs1.getMount()).thenReturn(\"/System/Volumes/boot1\");",
        "line": 169,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFsStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "disk1",
    "variableType": "HWDiskStore",
    "mockedClass": "HWDiskStore",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\OshiSysMonitorTest.java",
      "className": "OshiSysMonitorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HWDiskStore disk1 = Mockito.mock(HWDiskStore.class);",
        "line": 232,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk1.getReadBytes()).thenReturn(300L);",
        "line": 234,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk1.getReads()).thenReturn(200L);",
        "line": 235,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk1.getWriteBytes()).thenReturn(400L);",
        "line": 236,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk1.getWrites()).thenReturn(500L);",
        "line": 237,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk1.getCurrentQueueLength()).thenReturn(100L);",
        "line": 238,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk1.getTransferTime()).thenReturn(150L);",
        "line": 239,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk1.getName()).thenReturn(\"disk1\");",
        "line": 240,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk1.getReadBytes()).thenReturn(400L);",
        "line": 256,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk1.getReads()).thenReturn(220L);",
        "line": 257,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk1.getWriteBytes()).thenReturn(600L);",
        "line": 258,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk1.getWrites()).thenReturn(580L);",
        "line": 259,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk1.getCurrentQueueLength()).thenReturn(300L);",
        "line": 260,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk1.getTransferTime()).thenReturn(250L);",
        "line": 261,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "disk2",
    "variableType": "HWDiskStore",
    "mockedClass": "HWDiskStore",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\OshiSysMonitorTest.java",
      "className": "OshiSysMonitorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HWDiskStore disk2 = Mockito.mock(HWDiskStore.class);",
        "line": 233,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk2.getReadBytes()).thenReturn(2000L);",
        "line": 241,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk2.getReads()).thenReturn(3000L);",
        "line": 242,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk2.getWriteBytes()).thenReturn(1000L);",
        "line": 243,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk2.getWrites()).thenReturn(4000L);",
        "line": 244,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk2.getCurrentQueueLength()).thenReturn(750L);",
        "line": 245,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk2.getTransferTime()).thenReturn(800L);",
        "line": 246,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk2.getName()).thenReturn(\"disk2\");",
        "line": 247,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk2.getReadBytes()).thenReturn(4500L);",
        "line": 262,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk2.getReads()).thenReturn(3500L);",
        "line": 263,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk2.getWriteBytes()).thenReturn(2300L);",
        "line": 264,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk2.getWrites()).thenReturn(5000L);",
        "line": 265,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk2.getCurrentQueueLength()).thenReturn(900L);",
        "line": 266,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(disk2.getTransferTime()).thenReturn(1100L);",
        "line": 267,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "net1",
    "variableType": "NetworkIF",
    "mockedClass": "NetworkIF",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\OshiSysMonitorTest.java",
      "className": "OshiSysMonitorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NetworkIF net1 = Mockito.mock(NetworkIF.class);",
        "line": 325,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNetStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(net1.getBytesRecv()).thenReturn(300L);",
        "line": 326,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNetStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(net1.getPacketsRecv()).thenReturn(200L);",
        "line": 327,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNetStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(net1.getInErrors()).thenReturn(400L);",
        "line": 328,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNetStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(net1.getInDrops()).thenReturn(500L);",
        "line": 329,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNetStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(net1.getBytesSent()).thenReturn(100L);",
        "line": 330,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNetStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(net1.getPacketsSent()).thenReturn(150L);",
        "line": 331,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNetStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(net1.getOutErrors()).thenReturn(200L);",
        "line": 332,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNetStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(net1.getCollisions()).thenReturn(20L);",
        "line": 333,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNetStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(net1.getName()).thenReturn(\"Wifi\");",
        "line": 334,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNetStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(net1.getIPv4addr()).thenReturn(new String[] { \"123.456.7.8\", \"0.0.0.0\", \"192.1.2.3\" });",
        "line": 335,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNetStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(net1.getMacaddr()).thenReturn(\"ha:rd:wa:re:add\");",
        "line": 336,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNetStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(net1.getBytesRecv()).thenReturn(400L);",
        "line": 346,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNetStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(net1.getPacketsRecv()).thenReturn(220L);",
        "line": 347,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNetStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(net1.getInErrors()).thenReturn(600L);",
        "line": 348,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNetStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(net1.getInDrops()).thenReturn(580L);",
        "line": 349,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNetStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(net1.getBytesSent()).thenReturn(300L);",
        "line": 350,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNetStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(net1.getPacketsSent()).thenReturn(250L);",
        "line": 351,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNetStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(net1.getOutErrors()).thenReturn(330L);",
        "line": 352,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNetStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(net1.getCollisions()).thenReturn(240L);",
        "line": 353,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNetStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "processor",
    "variableType": "CentralProcessor",
    "mockedClass": "CentralProcessor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\OshiSysMonitorTest.java",
      "className": "OshiSysMonitorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CentralProcessor processor = Mockito.mock(CentralProcessor.class);",
        "line": 431,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCpuStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(processor.getProcessorCpuLoadTicks()).thenReturn(procTicks);",
        "line": 436,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCpuStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(processor.getProcessorCpuLoadTicks()).thenReturn(procTicks2);",
        "line": 448,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCpuStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "processor",
    "variableType": "CentralProcessor",
    "mockedClass": "CentralProcessor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\OshiSysMonitorTest.java",
      "className": "OshiSysMonitorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CentralProcessor processor = Mockito.mock(CentralProcessor.class);",
        "line": 531,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSysStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(processor.getSystemLoadAverage(3)).thenReturn(la);",
        "line": 533,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSysStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "tcpv4",
    "variableType": "InternetProtocolStats.TcpStats",
    "mockedClass": "InternetProtocolStats.TcpStats",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\OshiSysMonitorTest.java",
      "className": "OshiSysMonitorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "InternetProtocolStats.TcpStats tcpv4 = Mockito.mock(InternetProtocolStats.TcpStats.class);",
        "line": 556,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTcpStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tcpv4.getConnectionsActive()).thenReturn(10L);",
        "line": 558,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTcpStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tcpv4.getConnectionsPassive()).thenReturn(20L);",
        "line": 559,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTcpStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tcpv4.getConnectionFailures()).thenReturn(5L);",
        "line": 560,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTcpStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tcpv4.getConnectionsReset()).thenReturn(7L);",
        "line": 561,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTcpStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tcpv4.getSegmentsReceived()).thenReturn(200L);",
        "line": 562,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTcpStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tcpv4.getInErrors()).thenReturn(3L);",
        "line": 563,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTcpStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tcpv4.getSegmentsSent()).thenReturn(300L);",
        "line": 564,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTcpStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tcpv4.getOutResets()).thenReturn(4L);",
        "line": 565,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTcpStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tcpv4.getSegmentsRetransmitted()).thenReturn(8L);",
        "line": 566,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTcpStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tcpv4.getConnectionsActive()).thenReturn(20L);",
        "line": 575,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTcpStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tcpv4.getConnectionsPassive()).thenReturn(25L);",
        "line": 576,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTcpStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tcpv4.getConnectionFailures()).thenReturn(8L);",
        "line": 577,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTcpStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tcpv4.getConnectionsReset()).thenReturn(14L);",
        "line": 578,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTcpStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tcpv4.getSegmentsReceived()).thenReturn(350L);",
        "line": 579,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTcpStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tcpv4.getInErrors()).thenReturn(4L);",
        "line": 580,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTcpStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tcpv4.getSegmentsSent()).thenReturn(500L);",
        "line": 581,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTcpStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tcpv4.getOutResets()).thenReturn(7L);",
        "line": 582,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTcpStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tcpv4.getSegmentsRetransmitted()).thenReturn(8L);",
        "line": 583,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTcpStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "ipstats",
    "variableType": "InternetProtocolStats",
    "mockedClass": "InternetProtocolStats",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\OshiSysMonitorTest.java",
      "className": "OshiSysMonitorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "InternetProtocolStats ipstats = Mockito.mock(InternetProtocolStats.class);",
        "line": 557,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTcpStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(ipstats.getTCPv4Stats()).thenReturn(tcpv4);",
        "line": 567,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTcpStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "hal",
    "variableType": "HardwareAbstractionLayer",
    "mockedClass": "HardwareAbstractionLayer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\OshiSysMonitorTest.java",
      "className": "OshiSysMonitorTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private HardwareAbstractionLayer hal;",
        "line": 52,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "hal = Mockito.mock(HardwareAbstractionLayer.class);",
        "line": 64,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(hal.getMemory()).thenReturn(mem);",
        "line": 104,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMemStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(hal.getMemory()).thenReturn(mem);",
        "line": 130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSwapStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(hal.getDiskStores()).thenReturn(hwDiskStores);",
        "line": 249,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDiskStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(hal.getNetworkIFs()).thenReturn(networkIFS);",
        "line": 339,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNetStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(hal.getProcessor()).thenReturn(processor);",
        "line": 437,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCpuStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(hal.getProcessor()).thenReturn(processor);",
        "line": 534,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSysStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "os",
    "variableType": "OperatingSystem",
    "mockedClass": "OperatingSystem",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\OshiSysMonitorTest.java",
      "className": "OshiSysMonitorTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private OperatingSystem os;",
        "line": 53,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "os = Mockito.mock(OperatingSystem.class);",
        "line": 65,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(os.getFileSystem()).thenReturn(fileSystem);",
        "line": 178,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFsStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(os.getSystemUptime()).thenReturn(4000L);",
        "line": 530,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSysStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(os.getInternetProtocolStats()).thenReturn(ipstats);",
        "line": 568,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTcpStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "si",
    "variableType": "SystemInfo",
    "mockedClass": "SystemInfo",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.java.util.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\java\\util\\metrics\\OshiSysMonitorTest.java",
      "className": "OshiSysMonitorTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private SystemInfo si;",
        "line": 51,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "si = Mockito.mock(SystemInfo.class);",
        "line": 63,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(si.getHardware()).thenReturn(hal);",
        "line": 66,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(si.getOperatingSystem()).thenReturn(os);",
        "line": 67,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "valueSelector",
    "variableType": "VectorValueSelector",
    "mockedClass": "VectorValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\DoubleAnyAggregatorFactoryTest.java",
      "className": "DoubleAnyAggregatorFactoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VectorValueSelector valueSelector;",
        "line": 54,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "capabilities",
    "variableType": "ColumnCapabilities",
    "mockedClass": "ColumnCapabilities",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\DoubleAnyAggregatorFactoryTest.java",
      "className": "DoubleAnyAggregatorFactoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ColumnCapabilities capabilities;",
        "line": 48,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selectorFactory",
    "variableType": "VectorColumnSelectorFactory",
    "mockedClass": "VectorColumnSelectorFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\DoubleAnyAggregatorFactoryTest.java",
      "className": "DoubleAnyAggregatorFactoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\r\nprivate VectorColumnSelectorFactory selectorFactory;",
        "line": 52,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "columnInspector",
    "variableType": "ColumnInspector",
    "mockedClass": "ColumnInspector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\DoubleAnyAggregatorFactoryTest.java",
      "className": "DoubleAnyAggregatorFactoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ColumnInspector columnInspector;",
        "line": 50,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selector",
    "variableType": "VectorValueSelector",
    "mockedClass": "VectorValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\DoubleAnyVectorAggregatorTest.java",
      "className": "DoubleAnyVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VectorValueSelector selector;",
        "line": 46,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "target",
    "variableType": "DoubleAnyVectorAggregator",
    "mockedClass": "DoubleAnyVectorAggregator",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\DoubleAnyVectorAggregatorTest.java",
      "className": "DoubleAnyVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private DoubleAnyVectorAggregator target;",
        "line": 49,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = spy(new DoubleAnyVectorAggregator(selector));",
        "line": 59,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(target.isValueNull(buf, NULL_POSITION)).thenReturn(true);",
        "line": 60,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(target.isValueNull(buf, POSITION)).thenReturn(false);",
        "line": 61,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "valueSelector",
    "variableType": "VectorValueSelector",
    "mockedClass": "VectorValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\FloatAnyAggregatorFactoryTest.java",
      "className": "FloatAnyAggregatorFactoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VectorValueSelector valueSelector;",
        "line": 54,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "capabilities",
    "variableType": "ColumnCapabilities",
    "mockedClass": "ColumnCapabilities",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\FloatAnyAggregatorFactoryTest.java",
      "className": "FloatAnyAggregatorFactoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ColumnCapabilities capabilities;",
        "line": 48,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selectorFactory",
    "variableType": "VectorColumnSelectorFactory",
    "mockedClass": "VectorColumnSelectorFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\FloatAnyAggregatorFactoryTest.java",
      "className": "FloatAnyAggregatorFactoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\r\nprivate VectorColumnSelectorFactory selectorFactory;",
        "line": 52,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "columnInspector",
    "variableType": "ColumnInspector",
    "mockedClass": "ColumnInspector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\FloatAnyAggregatorFactoryTest.java",
      "className": "FloatAnyAggregatorFactoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ColumnInspector columnInspector;",
        "line": 50,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selector",
    "variableType": "VectorValueSelector",
    "mockedClass": "VectorValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\FloatAnyVectorAggregatorTest.java",
      "className": "FloatAnyVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VectorValueSelector selector;",
        "line": 46,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "target",
    "variableType": "FloatAnyVectorAggregator",
    "mockedClass": "FloatAnyVectorAggregator",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\FloatAnyVectorAggregatorTest.java",
      "className": "FloatAnyVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private FloatAnyVectorAggregator target;",
        "line": 49,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = spy(new FloatAnyVectorAggregator(selector));",
        "line": 59,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(target.isValueNull(buf, NULL_POSITION)).thenReturn(true);",
        "line": 60,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(target.isValueNull(buf, POSITION)).thenReturn(false);",
        "line": 61,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "valueSelector",
    "variableType": "VectorValueSelector",
    "mockedClass": "VectorValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\LongAnyAggregatorFactoryTest.java",
      "className": "LongAnyAggregatorFactoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VectorValueSelector valueSelector;",
        "line": 54,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "capabilities",
    "variableType": "ColumnCapabilities",
    "mockedClass": "ColumnCapabilities",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\LongAnyAggregatorFactoryTest.java",
      "className": "LongAnyAggregatorFactoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ColumnCapabilities capabilities;",
        "line": 48,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selectorFactory",
    "variableType": "VectorColumnSelectorFactory",
    "mockedClass": "VectorColumnSelectorFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\LongAnyAggregatorFactoryTest.java",
      "className": "LongAnyAggregatorFactoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\r\nprivate VectorColumnSelectorFactory selectorFactory;",
        "line": 52,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "columnInspector",
    "variableType": "ColumnInspector",
    "mockedClass": "ColumnInspector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\LongAnyAggregatorFactoryTest.java",
      "className": "LongAnyAggregatorFactoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ColumnInspector columnInspector;",
        "line": 50,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selector",
    "variableType": "VectorValueSelector",
    "mockedClass": "VectorValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\LongAnyVectorAggregatorTest.java",
      "className": "LongAnyVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VectorValueSelector selector;",
        "line": 45,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "target",
    "variableType": "LongAnyVectorAggregator",
    "mockedClass": "LongAnyVectorAggregator",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\LongAnyVectorAggregatorTest.java",
      "className": "LongAnyVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private LongAnyVectorAggregator target;",
        "line": 48,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = spy(new LongAnyVectorAggregator(selector));",
        "line": 58,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(target.isValueNull(buf, NULL_POSITION)).thenReturn(true);",
        "line": 59,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(target.isValueNull(buf, POSITION)).thenReturn(false);",
        "line": 60,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selector",
    "variableType": "VectorValueSelector",
    "mockedClass": "VectorValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\NumericAnyVectorAggregatorTest.java",
      "className": "NumericAnyVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VectorValueSelector selector;",
        "line": 48,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "target",
    "variableType": "NumericAnyVectorAggregator",
    "mockedClass": "NumericAnyVectorAggregator",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\NumericAnyVectorAggregatorTest.java",
      "className": "NumericAnyVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private NumericAnyVectorAggregator target;",
        "line": 51,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = Mockito.spy(new NumericAnyVectorAggregator(selector) {\r\n\r\n    @Override\r\n    void initValue(ByteBuffer buf, int position) {\r\n        /* Do nothing. */\r\n    }\r\n\r\n    @Override\r\n    boolean putAnyValueFromRow(ByteBuffer buf, int position, int startRow, int endRow) {\r\n        boolean isRowsWithinIndex = startRow < endRow && startRow < NULLS.length;\r\n        if (isRowsWithinIndex) {\r\n            buf.putLong(position, startRow);\r\n        }\r\n        return isRowsWithinIndex;\r\n    }\r\n\r\n    @Override\r\n    Object getNonNullObject(ByteBuffer buf, int position) {\r\n        if (position == POSITION + 1) {\r\n            return FOUND_OBJECT;\r\n        }\r\n        return -1;\r\n    }\r\n});",
        "line": 57,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "singleValueDimensionVectorSelector",
    "variableType": "SingleValueDimensionVectorSelector",
    "mockedClass": "SingleValueDimensionVectorSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\StringAnyAggregatorFactoryTest.java",
      "className": "StringAnyAggregatorFactoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate SingleValueDimensionVectorSelector singleValueDimensionVectorSelector;",
        "line": 51,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "capabilities",
    "variableType": "ColumnCapabilities",
    "mockedClass": "ColumnCapabilities",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\StringAnyAggregatorFactoryTest.java",
      "className": "StringAnyAggregatorFactoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ColumnCapabilities capabilities;",
        "line": 47,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "columnInspector",
    "variableType": "ColumnInspector",
    "mockedClass": "ColumnInspector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\StringAnyAggregatorFactoryTest.java",
      "className": "StringAnyAggregatorFactoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ColumnInspector columnInspector;",
        "line": 45,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "multiValueDimensionVectorSelector",
    "variableType": "MultiValueDimensionVectorSelector",
    "mockedClass": "MultiValueDimensionVectorSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\StringAnyAggregatorFactoryTest.java",
      "className": "StringAnyAggregatorFactoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate MultiValueDimensionVectorSelector multiValueDimensionVectorSelector;",
        "line": 53,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "vectorSelectorFactory",
    "variableType": "VectorColumnSelectorFactory",
    "mockedClass": "VectorColumnSelectorFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\StringAnyAggregatorFactoryTest.java",
      "className": "StringAnyAggregatorFactoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VectorColumnSelectorFactory vectorSelectorFactory;",
        "line": 49,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "singleValueSelector",
    "variableType": "SingleValueDimensionVectorSelector",
    "mockedClass": "SingleValueDimensionVectorSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\StringAnyVectorAggregatorTest.java",
      "className": "StringAnyVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate SingleValueDimensionVectorSelector singleValueSelector;",
        "line": 57,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "multiValueSelector",
    "variableType": "MultiValueDimensionVectorSelector",
    "mockedClass": "MultiValueDimensionVectorSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.any",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\any\\StringAnyVectorAggregatorTest.java",
      "className": "StringAnyVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate MultiValueDimensionVectorSelector multiValueSelector;",
        "line": 59,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selectorForPairs",
    "variableType": "VectorObjectSelector",
    "mockedClass": "VectorObjectSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n— Global Init in @Before\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.first",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\first\\StringFirstVectorAggregatorTest.java",
      "className": "StringFirstVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VectorObjectSelector selectorForPairs;",
        "line": 71,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "selectorForPairs = new VectorObjectSelector() {\r\n\r\n    @Override\r\n    public Object[] getObjectVector() {\r\n        return pairs;\r\n    }\r\n\r\n    @Override\r\n    public int getMaxVectorSize() {\r\n        return 2;\r\n    }\r\n\r\n    @Override\r\n    public int getCurrentVectorSize() {\r\n        return 0;\r\n    }\r\n};",
        "line": 150,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selector",
    "variableType": "VectorObjectSelector",
    "mockedClass": "VectorObjectSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n— Global Init in @Before\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.first",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\first\\StringFirstVectorAggregatorTest.java",
      "className": "StringFirstVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VectorObjectSelector selector;",
        "line": 69,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "selector = new VectorObjectSelector() {\r\n\r\n    @Override\r\n    public Object[] getObjectVector() {\r\n        return VALUES;\r\n    }\r\n\r\n    @Override\r\n    public int getMaxVectorSize() {\r\n        return 4;\r\n    }\r\n\r\n    @Override\r\n    public int getCurrentVectorSize() {\r\n        return 0;\r\n    }\r\n};",
        "line": 110,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "timeSelectorForPairs",
    "variableType": "BaseLongVectorValueSelector",
    "mockedClass": "BaseLongVectorValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n— Global Init in @Before\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.first",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\first\\StringFirstVectorAggregatorTest.java",
      "className": "StringFirstVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate BaseLongVectorValueSelector timeSelectorForPairs;",
        "line": 75,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "timeSelectorForPairs = new BaseLongVectorValueSelector(new NoFilterVectorOffset(timesSame.length, 0, timesSame.length)) {\r\n\r\n    @Override\r\n    public long[] getLongVector() {\r\n        return timesSame;\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public boolean[] getNullVector() {\r\n        return null;\r\n    }\r\n};",
        "line": 131,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "timeSelector",
    "variableType": "BaseLongVectorValueSelector",
    "mockedClass": "BaseLongVectorValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n— Global Init in @Before\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.first",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\first\\StringFirstVectorAggregatorTest.java",
      "className": "StringFirstVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate BaseLongVectorValueSelector timeSelector;",
        "line": 73,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "timeSelector = new BaseLongVectorValueSelector(new NoFilterVectorOffset(times.length, 0, times.length)) {\r\n\r\n    @Override\r\n    public long[] getLongVector() {\r\n        return times;\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public boolean[] getNullVector() {\r\n        return null;\r\n    }\r\n};",
        "line": 94,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selector",
    "variableType": "VectorValueSelector",
    "mockedClass": "VectorValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.last",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\last\\DoubleLastVectorAggregatorTest.java",
      "className": "DoubleLastVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VectorValueSelector selector;",
        "line": 45,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "timeSelector",
    "variableType": "VectorValueSelector",
    "mockedClass": "VectorValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.last",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\last\\DoubleLastVectorAggregatorTest.java",
      "className": "DoubleLastVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VectorValueSelector timeSelector;",
        "line": 47,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selector",
    "variableType": "VectorValueSelector",
    "mockedClass": "VectorValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.last",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\last\\FloatLastVectorAggregatorTest.java",
      "className": "FloatLastVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VectorValueSelector selector;",
        "line": 45,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "timeSelector",
    "variableType": "VectorValueSelector",
    "mockedClass": "VectorValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.last",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\last\\FloatLastVectorAggregatorTest.java",
      "className": "FloatLastVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VectorValueSelector timeSelector;",
        "line": 47,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selector",
    "variableType": "VectorValueSelector",
    "mockedClass": "VectorValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.last",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\last\\LongLastVectorAggregatorTest.java",
      "className": "LongLastVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VectorValueSelector selector;",
        "line": 45,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "timeSelector",
    "variableType": "VectorValueSelector",
    "mockedClass": "VectorValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.aggregation.last",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\aggregation\\last\\LongLastVectorAggregatorTest.java",
      "className": "LongLastVectorAggregatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VectorValueSelector timeSelector;",
        "line": 47,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "queryProcessingPool",
    "variableType": "QueryProcessingPool",
    "mockedClass": "QueryProcessingPool",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.query",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\ChainedExecutionQueryRunnerTest.java",
      "className": "ChainedExecutionQueryRunnerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "QueryProcessingPool queryProcessingPool = Mockito.mock(QueryProcessingPool.class);",
        "line": 321,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSubmittedTaskType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(queryProcessingPool.submitRunnerTask(ArgumentMatchers.any())).thenReturn(Futures.immediateFuture(Collections.singletonList(123)));",
        "line": 339,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSubmittedTaskType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(queryProcessingPool, Mockito.times(2)).submitRunnerTask(captor.capture());",
        "line": 342,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSubmittedTaskType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "runners",
    "variableType": "List<QueryRunner<Result<TimeseriesResultValue>>>",
    "mockedClass": "List<QueryRunner<Result<TimeseriesResultValue>>>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\ChainedExecutionQueryRunnerTest.java",
      "className": "ChainedExecutionQueryRunnerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "List<QueryRunner<Result<TimeseriesResultValue>>> runners = Arrays.asList(Mockito.mock(QueryRunner.class), Mockito.mock(QueryRunner.class));",
        "line": 329,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSubmittedTaskType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "valueIndexes",
    "variableType": "Utf8ValueSetIndexes",
    "mockedClass": "Utf8ValueSetIndexes",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.filter",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\filter\\InDimFilterTest.java",
      "className": "InDimFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Utf8ValueSetIndexes valueIndexes = Mockito.mock(Utf8ValueSetIndexes.class);",
        "line": 263,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUsesUtf8SetIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(valueIndexes.forSortedValuesUtf8(expectedValuesSet.toUtf8())).thenReturn(bitmapColumnIndex);",
        "line": 271,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUsesUtf8SetIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "indexSupplier",
    "variableType": "ColumnIndexSupplier",
    "mockedClass": "ColumnIndexSupplier",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.filter",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\filter\\InDimFilterTest.java",
      "className": "InDimFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final ColumnIndexSupplier indexSupplier = Mockito.mock(ColumnIndexSupplier.class);",
        "line": 262,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUsesUtf8SetIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(indexSupplier.as(Utf8ValueSetIndexes.class)).thenReturn(valueIndexes);",
        "line": 270,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUsesUtf8SetIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "indexSelector",
    "variableType": "ColumnIndexSelector",
    "mockedClass": "ColumnIndexSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.filter",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\filter\\InDimFilterTest.java",
      "className": "InDimFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final ColumnIndexSelector indexSelector = Mockito.mock(ColumnIndexSelector.class);",
        "line": 261,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUsesUtf8SetIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(indexSelector.getIndexSupplier(\"dim0\")).thenReturn(indexSupplier);",
        "line": 269,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUsesUtf8SetIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "bitmapColumnIndex",
    "variableType": "BitmapColumnIndex",
    "mockedClass": "BitmapColumnIndex",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.filter",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\filter\\InDimFilterTest.java",
      "className": "InDimFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final BitmapColumnIndex bitmapColumnIndex = Mockito.mock(BitmapColumnIndex.class);",
        "line": 264,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUsesUtf8SetIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "valueIndex",
    "variableType": "StringValueSetIndexes",
    "mockedClass": "StringValueSetIndexes",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.filter",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\filter\\InDimFilterTest.java",
      "className": "InDimFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final StringValueSetIndexes valueIndex = Mockito.mock(StringValueSetIndexes.class);",
        "line": 287,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUsesStringSetIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(valueIndex.forSortedValues(expectedValuesSet)).thenReturn(bitmapColumnIndex);",
        "line": 296,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUsesStringSetIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "indexSupplier",
    "variableType": "ColumnIndexSupplier",
    "mockedClass": "ColumnIndexSupplier",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.filter",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\filter\\InDimFilterTest.java",
      "className": "InDimFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final ColumnIndexSupplier indexSupplier = Mockito.mock(ColumnIndexSupplier.class);",
        "line": 286,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUsesStringSetIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Will check for UTF-8 first.\r\nMockito.when(indexSupplier.as(Utf8ValueSetIndexes.class)).thenReturn(null);",
        "line": 294,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUsesStringSetIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(indexSupplier.as(StringValueSetIndexes.class)).thenReturn(valueIndex);",
        "line": 295,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUsesStringSetIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "indexSelector",
    "variableType": "ColumnIndexSelector",
    "mockedClass": "ColumnIndexSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.filter",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\filter\\InDimFilterTest.java",
      "className": "InDimFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final ColumnIndexSelector indexSelector = Mockito.mock(ColumnIndexSelector.class);",
        "line": 285,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUsesStringSetIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(indexSelector.getIndexSupplier(\"dim0\")).thenReturn(indexSupplier);",
        "line": 293,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUsesStringSetIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "bitmapColumnIndex",
    "variableType": "BitmapColumnIndex",
    "mockedClass": "BitmapColumnIndex",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.filter",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\filter\\InDimFilterTest.java",
      "className": "InDimFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final BitmapColumnIndex bitmapColumnIndex = Mockito.mock(BitmapColumnIndex.class);",
        "line": 288,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUsesStringSetIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "indexSupplier",
    "variableType": "ColumnIndexSupplier",
    "mockedClass": "ColumnIndexSupplier",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.filter",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\filter\\LikeDimFilterTest.java",
      "className": "LikeDimFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final ColumnIndexSupplier indexSupplier = Mockito.mock(ColumnIndexSupplier.class);",
        "line": 113,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrefixMatchUsesRangeIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(indexSupplier.as(LexicographicalRangeIndexes.class)).thenReturn(rangeIndex);",
        "line": 118,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrefixMatchUsesRangeIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "rangeIndex",
    "variableType": "LexicographicalRangeIndexes",
    "mockedClass": "LexicographicalRangeIndexes",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.filter",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\filter\\LikeDimFilterTest.java",
      "className": "LikeDimFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final LexicographicalRangeIndexes rangeIndex = Mockito.mock(LexicographicalRangeIndexes.class);",
        "line": 114,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrefixMatchUsesRangeIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(// Verify that likeFilter uses forRange without a matcher predicate; it's unnecessary and slows things down\r\nrangeIndex.forRange(\"f\", false, \"f\" + Character.MAX_VALUE, false)).thenReturn(bitmapColumnIndex);",
        "line": 119,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrefixMatchUsesRangeIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "indexSelector",
    "variableType": "ColumnIndexSelector",
    "mockedClass": "ColumnIndexSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.filter",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\filter\\LikeDimFilterTest.java",
      "className": "LikeDimFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final ColumnIndexSelector indexSelector = Mockito.mock(ColumnIndexSelector.class);",
        "line": 112,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrefixMatchUsesRangeIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(indexSelector.getIndexSupplier(\"dim0\")).thenReturn(indexSupplier);",
        "line": 117,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrefixMatchUsesRangeIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "bitmapColumnIndex",
    "variableType": "BitmapColumnIndex",
    "mockedClass": "BitmapColumnIndex",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.filter",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\filter\\LikeDimFilterTest.java",
      "className": "LikeDimFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final BitmapColumnIndex bitmapColumnIndex = Mockito.mock(BitmapColumnIndex.class);",
        "line": 115,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrefixMatchUsesRangeIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "valueIndex",
    "variableType": "StringValueSetIndexes",
    "mockedClass": "StringValueSetIndexes",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.filter",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\filter\\LikeDimFilterTest.java",
      "className": "LikeDimFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final StringValueSetIndexes valueIndex = Mockito.mock(StringValueSetIndexes.class);",
        "line": 138,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExactMatchUsesValueIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(valueIndex.forValue(\"f\")).thenReturn(bitmapColumnIndex);",
        "line": 143,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExactMatchUsesValueIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "indexSupplier",
    "variableType": "ColumnIndexSupplier",
    "mockedClass": "ColumnIndexSupplier",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.filter",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\filter\\LikeDimFilterTest.java",
      "className": "LikeDimFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final ColumnIndexSupplier indexSupplier = Mockito.mock(ColumnIndexSupplier.class);",
        "line": 137,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExactMatchUsesValueIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(indexSupplier.as(StringValueSetIndexes.class)).thenReturn(valueIndex);",
        "line": 142,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExactMatchUsesValueIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "indexSelector",
    "variableType": "ColumnIndexSelector",
    "mockedClass": "ColumnIndexSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.filter",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\filter\\LikeDimFilterTest.java",
      "className": "LikeDimFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final ColumnIndexSelector indexSelector = Mockito.mock(ColumnIndexSelector.class);",
        "line": 136,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExactMatchUsesValueIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(indexSelector.getIndexSupplier(\"dim0\")).thenReturn(indexSupplier);",
        "line": 141,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExactMatchUsesValueIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "bitmapColumnIndex",
    "variableType": "BitmapColumnIndex",
    "mockedClass": "BitmapColumnIndex",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.filter",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\filter\\LikeDimFilterTest.java",
      "className": "LikeDimFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final BitmapColumnIndex bitmapColumnIndex = Mockito.mock(BitmapColumnIndex.class);",
        "line": 139,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExactMatchUsesValueIndex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "columnValueSelector",
    "variableType": "ColumnValueSelector",
    "mockedClass": "ColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayDoubleGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayDoubleGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ColumnValueSelector columnValueSelector = Mockito.mock(ColumnValueSelector.class);",
        "line": 110,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanity",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(columnValueSelector.getObject()).thenReturn(ImmutableList.of(1.0, 2.0));",
        "line": 111,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanity",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "groupByColumnSelectorPlus",
    "variableType": "GroupByColumnSelectorPlus",
    "mockedClass": "GroupByColumnSelectorPlus",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayDoubleGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayDoubleGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "GroupByColumnSelectorPlus groupByColumnSelectorPlus = Mockito.mock(GroupByColumnSelectorPlus.class);",
        "line": 114,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanity",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(groupByColumnSelectorPlus.getResultRowPosition()).thenReturn(0);",
        "line": 115,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanity",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "columnValueSelector",
    "variableType": "ColumnValueSelector",
    "mockedClass": "ColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayDoubleGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayDoubleGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ColumnValueSelector columnValueSelector = Mockito.mock(ColumnValueSelector.class);",
        "line": 127,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionary",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(columnValueSelector.getObject()).thenReturn(ImmutableList.of(4.0, 2.0));",
        "line": 128,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionary",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "groupByColumnSelectorPlus",
    "variableType": "GroupByColumnSelectorPlus",
    "mockedClass": "GroupByColumnSelectorPlus",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayDoubleGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayDoubleGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "GroupByColumnSelectorPlus groupByColumnSelectorPlus = Mockito.mock(GroupByColumnSelectorPlus.class);",
        "line": 131,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionary",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(groupByColumnSelectorPlus.getResultRowPosition()).thenReturn(0);",
        "line": 132,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionary",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "columnValueSelector",
    "variableType": "ColumnValueSelector",
    "mockedClass": "ColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayDoubleGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayDoubleGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ColumnValueSelector columnValueSelector = Mockito.mock(ColumnValueSelector.class);",
        "line": 143,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionaryWithObjects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(columnValueSelector.getObject()).thenReturn(new Object[] { 4.0D, 2.0D });",
        "line": 144,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionaryWithObjects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "groupByColumnSelectorPlus",
    "variableType": "GroupByColumnSelectorPlus",
    "mockedClass": "GroupByColumnSelectorPlus",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayDoubleGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayDoubleGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "GroupByColumnSelectorPlus groupByColumnSelectorPlus = Mockito.mock(GroupByColumnSelectorPlus.class);",
        "line": 147,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionaryWithObjects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(groupByColumnSelectorPlus.getResultRowPosition()).thenReturn(0);",
        "line": 148,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionaryWithObjects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "columnValueSelector",
    "variableType": "ColumnValueSelector",
    "mockedClass": "ColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayLongGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayLongGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ColumnValueSelector columnValueSelector = Mockito.mock(ColumnValueSelector.class);",
        "line": 113,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanity",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(columnValueSelector.getObject()).thenReturn(ImmutableList.of(1L, 2L));",
        "line": 114,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanity",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "groupByColumnSelectorPlus",
    "variableType": "GroupByColumnSelectorPlus",
    "mockedClass": "GroupByColumnSelectorPlus",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayLongGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayLongGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "GroupByColumnSelectorPlus groupByColumnSelectorPlus = Mockito.mock(GroupByColumnSelectorPlus.class);",
        "line": 117,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanity",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(groupByColumnSelectorPlus.getResultRowPosition()).thenReturn(0);",
        "line": 118,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanity",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "columnValueSelector",
    "variableType": "ColumnValueSelector",
    "mockedClass": "ColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayLongGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayLongGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ColumnValueSelector columnValueSelector = Mockito.mock(ColumnValueSelector.class);",
        "line": 130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionary",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(columnValueSelector.getObject()).thenReturn(ImmutableList.of(4L, 2L));",
        "line": 131,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionary",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "groupByColumnSelectorPlus",
    "variableType": "GroupByColumnSelectorPlus",
    "mockedClass": "GroupByColumnSelectorPlus",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayLongGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayLongGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "GroupByColumnSelectorPlus groupByColumnSelectorPlus = Mockito.mock(GroupByColumnSelectorPlus.class);",
        "line": 134,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionary",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(groupByColumnSelectorPlus.getResultRowPosition()).thenReturn(0);",
        "line": 135,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionary",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "columnValueSelector",
    "variableType": "ColumnValueSelector",
    "mockedClass": "ColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayLongGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayLongGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ColumnValueSelector columnValueSelector = Mockito.mock(ColumnValueSelector.class);",
        "line": 146,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionaryWithObjects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(columnValueSelector.getObject()).thenReturn(new Object[] { 4L, 2L });",
        "line": 147,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionaryWithObjects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "groupByColumnSelectorPlus",
    "variableType": "GroupByColumnSelectorPlus",
    "mockedClass": "GroupByColumnSelectorPlus",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayLongGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayLongGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "GroupByColumnSelectorPlus groupByColumnSelectorPlus = Mockito.mock(GroupByColumnSelectorPlus.class);",
        "line": 150,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionaryWithObjects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(groupByColumnSelectorPlus.getResultRowPosition()).thenReturn(0);",
        "line": 151,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionaryWithObjects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "columnValueSelector",
    "variableType": "ColumnValueSelector",
    "mockedClass": "ColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayStringGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayStringGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ColumnValueSelector columnValueSelector = Mockito.mock(ColumnValueSelector.class);",
        "line": 117,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanity",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(columnValueSelector.getObject()).thenReturn(ImmutableList.of(\"a\", \"b\"));",
        "line": 118,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanity",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "groupByColumnSelectorPlus",
    "variableType": "GroupByColumnSelectorPlus",
    "mockedClass": "GroupByColumnSelectorPlus",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayStringGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayStringGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "GroupByColumnSelectorPlus groupByColumnSelectorPlus = Mockito.mock(GroupByColumnSelectorPlus.class);",
        "line": 121,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanity",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(groupByColumnSelectorPlus.getResultRowPosition()).thenReturn(0);",
        "line": 122,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanity",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "columnValueSelector",
    "variableType": "ColumnValueSelector",
    "mockedClass": "ColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayStringGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayStringGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ColumnValueSelector columnValueSelector = Mockito.mock(ColumnValueSelector.class);",
        "line": 134,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionary",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(columnValueSelector.getObject()).thenReturn(ImmutableList.of(\"f\", \"a\"));",
        "line": 135,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionary",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "groupByColumnSelectorPlus",
    "variableType": "GroupByColumnSelectorPlus",
    "mockedClass": "GroupByColumnSelectorPlus",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayStringGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayStringGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "GroupByColumnSelectorPlus groupByColumnSelectorPlus = Mockito.mock(GroupByColumnSelectorPlus.class);",
        "line": 138,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionary",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(groupByColumnSelectorPlus.getResultRowPosition()).thenReturn(0);",
        "line": 139,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionary",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "columnValueSelector",
    "variableType": "ColumnValueSelector",
    "mockedClass": "ColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayStringGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayStringGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ColumnValueSelector columnValueSelector = Mockito.mock(ColumnValueSelector.class);",
        "line": 150,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionaryWithObjects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(columnValueSelector.getObject()).thenReturn(new Object[] { \"f\", \"a\" });",
        "line": 151,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionaryWithObjects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "groupByColumnSelectorPlus",
    "variableType": "GroupByColumnSelectorPlus",
    "mockedClass": "GroupByColumnSelectorPlus",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayStringGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayStringGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "GroupByColumnSelectorPlus groupByColumnSelectorPlus = Mockito.mock(GroupByColumnSelectorPlus.class);",
        "line": 154,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionaryWithObjects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(groupByColumnSelectorPlus.getResultRowPosition()).thenReturn(0);",
        "line": 155,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionaryWithObjects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "capabilities",
    "variableType": "ColumnCapabilities",
    "mockedClass": "ColumnCapabilities",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\StringGroupByColumnSelectorStrategyTest.java",
      "className": "StringGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ColumnCapabilities capabilities;",
        "line": 52,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(capabilities.areDictionaryValuesSorted()).thenReturn(ColumnCapabilities.Capable.FALSE);",
        "line": 72,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testBufferComparatorCannotCompareIntsAndNullStringComparatorShouldUseLexicographicComparator",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "aggregatorAdapters",
    "variableType": "AggregatorAdapters",
    "mockedClass": "AggregatorAdapters",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\HashVectorGrouperTest.java",
      "className": "HashVectorGrouperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final AggregatorAdapters aggregatorAdapters = Mockito.mock(AggregatorAdapters.class);",
        "line": 37,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCloseAggregatorAdaptorsShouldBeClosed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(aggregatorAdapters, Mockito.times(1)).close();",
        "line": 48,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCloseAggregatorAdaptorsShouldBeClosed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "aggregatorAdapters",
    "variableType": "AggregatorAdapters",
    "mockedClass": "AggregatorAdapters",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\HashVectorGrouperTest.java",
      "className": "HashVectorGrouperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final AggregatorAdapters aggregatorAdapters = Mockito.mock(AggregatorAdapters.class);",
        "line": 59,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTableStartIsNotMemoryStartIfNotMaxSized",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "aggregatorAdapters",
    "variableType": "AggregatorAdapters",
    "mockedClass": "AggregatorAdapters",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\HashVectorGrouperTest.java",
      "className": "HashVectorGrouperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final AggregatorAdapters aggregatorAdapters = Mockito.mock(AggregatorAdapters.class);",
        "line": 79,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTableStartIsNotMemoryStartIfIsMaxSized",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "aggregatorAdapters",
    "variableType": "AggregatorAdapters",
    "mockedClass": "AggregatorAdapters",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\HashVectorGrouperTest.java",
      "className": "HashVectorGrouperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final AggregatorAdapters aggregatorAdapters = Mockito.mock(AggregatorAdapters.class);",
        "line": 100,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGrowOnce",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(aggregatorAdapters.spaceNeeded()).thenReturn(aggSize);",
        "line": 101,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGrowOnce",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "aggregatorAdapters",
    "variableType": "AggregatorAdapters",
    "mockedClass": "AggregatorAdapters",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\HashVectorGrouperTest.java",
      "className": "HashVectorGrouperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final AggregatorAdapters aggregatorAdapters = Mockito.mock(AggregatorAdapters.class);",
        "line": 141,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGrowTwice",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(aggregatorAdapters.spaceNeeded()).thenReturn(aggSize);",
        "line": 142,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGrowTwice",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "aggregatorAdapters",
    "variableType": "AggregatorAdapters",
    "mockedClass": "AggregatorAdapters",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\HashVectorGrouperTest.java",
      "className": "HashVectorGrouperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final AggregatorAdapters aggregatorAdapters = Mockito.mock(AggregatorAdapters.class);",
        "line": 188,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGrowThreeTimes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(aggregatorAdapters.spaceNeeded()).thenReturn(aggSize);",
        "line": 189,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGrowThreeTimes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "aggregatorAdapters",
    "variableType": "AggregatorAdapters",
    "mockedClass": "AggregatorAdapters",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\HashVectorGrouperTest.java",
      "className": "HashVectorGrouperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final AggregatorAdapters aggregatorAdapters = Mockito.mock(AggregatorAdapters.class);",
        "line": 242,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGrowFourTimes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(aggregatorAdapters.spaceNeeded()).thenReturn(aggSize);",
        "line": 243,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGrowFourTimes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "iterator",
    "variableType": "VectorGroupByEngineIterator",
    "mockedClass": "VectorGroupByEngineIterator",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.vector",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\vector\\VectorGroupByEngineIteratorTest.java",
      "className": "VectorGroupByEngineIteratorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final VectorGroupByEngineIterator iterator = new VectorGroupByEngineIterator(query, new GroupByQueryConfig(), GroupByQueryRunnerTest.DEFAULT_PROCESSING_CONFIG, storageAdapter, cursor, interval, dimensions, byteBuffer, null) {\r\n\r\n    @Override\r\n    VectorGrouper makeGrouper() {\r\n        grouperCaptor.setValue(Mockito.spy(super.makeGrouper()));\r\n        return grouperCaptor.getValue();\r\n    }\r\n};",
        "line": 82,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateOneGrouperAndCloseItWhenClose",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "joinableFactoryWrapper",
    "variableType": "JoinableFactoryWrapper",
    "mockedClass": "JoinableFactoryWrapper",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\JoinDataSourceTest.java",
      "className": "JoinDataSourceTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate JoinableFactoryWrapper joinableFactoryWrapper;",
        "line": 82,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "joinableFactoryWrapper",
    "variableType": "JoinableFactoryWrapper",
    "mockedClass": "JoinableFactoryWrapper",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\JoinDataSourceTest.java",
      "className": "JoinDataSourceTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate JoinableFactoryWrapper joinableFactoryWrapper;",
        "line": 82,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "service",
    "variableType": "PrioritizedExecutorService",
    "mockedClass": "PrioritizedExecutorService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\MetricsEmittingQueryProcessingPoolTest.java",
      "className": "MetricsEmittingQueryProcessingPoolTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "PrioritizedExecutorService service = Mockito.mock(PrioritizedExecutorService.class);",
        "line": 40,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrioritizedExecutorDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(service.getQueueSize()).thenReturn(10);",
        "line": 41,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrioritizedExecutorDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(service.getActiveTasks()).thenReturn(2);",
        "line": 42,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrioritizedExecutorDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serviceEmitter",
    "variableType": "ServiceEmitter",
    "mockedClass": "ServiceEmitter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\MetricsEmittingQueryProcessingPoolTest.java",
      "className": "MetricsEmittingQueryProcessingPoolTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServiceEmitter serviceEmitter = new ServiceEmitter(\"service\", \"host\", Mockito.mock(Emitter.class)) {\r\n\r\n    @Override\r\n    public void emit(Event event) {\r\n        events.add(event);\r\n    }\r\n};",
        "line": 48,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrioritizedExecutorDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "service",
    "variableType": "ListeningExecutorService",
    "mockedClass": "ListeningExecutorService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.query",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\MetricsEmittingQueryProcessingPoolTest.java",
      "className": "MetricsEmittingQueryProcessingPoolTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ListeningExecutorService service = Mockito.mock(ListeningExecutorService.class);",
        "line": 67,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNonPrioritizedExecutorDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serviceEmitter",
    "variableType": "ServiceEmitter",
    "mockedClass": "ServiceEmitter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.query",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\MetricsEmittingQueryProcessingPoolTest.java",
      "className": "MetricsEmittingQueryProcessingPoolTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServiceEmitter serviceEmitter = Mockito.mock(ServiceEmitter.class);",
        "line": 72,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNonPrioritizedExecutorDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verifyNoInteractions(serviceEmitter);",
        "line": 74,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNonPrioritizedExecutorDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockSmooshedFileMapper",
    "variableType": "SmooshedFileMapper",
    "mockedClass": "SmooshedFileMapper",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\segment\\IndexMergerLongestSharedDimOrderTest.java",
      "className": "IndexMergerLongestSharedDimOrderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nSmooshedFileMapper mockSmooshedFileMapper;",
        "line": 53,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockBitmapFactory",
    "variableType": "BitmapFactory",
    "mockedClass": "BitmapFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\segment\\IndexMergerLongestSharedDimOrderTest.java",
      "className": "IndexMergerLongestSharedDimOrderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nBitmapFactory mockBitmapFactory;",
        "line": 56,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockSupplier",
    "variableType": "Supplier<ColumnHolder>",
    "mockedClass": "Supplier<ColumnHolder>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\segment\\IndexMergerLongestSharedDimOrderTest.java",
      "className": "IndexMergerLongestSharedDimOrderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nSupplier<ColumnHolder> mockSupplier;",
        "line": 47,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(mockSupplier.get()).thenReturn(mockColumnHolder);",
        "line": 62,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockColumnHolder",
    "variableType": "ColumnHolder",
    "mockedClass": "ColumnHolder",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\segment\\IndexMergerLongestSharedDimOrderTest.java",
      "className": "IndexMergerLongestSharedDimOrderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nColumnHolder mockColumnHolder;",
        "line": 50,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// This value does not matter\r\nwhen(mockColumnHolder.getLength()).thenReturn(1);",
        "line": 64,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "extractor",
    "variableType": "LookupExtractor",
    "mockedClass": "LookupExtractor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.join.lookup",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\segment\\join\\lookup\\LookupJoinableTest.java",
      "className": "LookupJoinableTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate LookupExtractor extractor;",
        "line": 56,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selector",
    "variableType": "BaseLongColumnValueSelector",
    "mockedClass": "BaseLongColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.join.table",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\segment\\join\\table\\IndexedTableJoinMatcherTest.java",
      "className": "MakeLongProcessorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate BaseLongColumnValueSelector selector;",
        "line": 65,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selector",
    "variableType": "BaseObjectColumnValueSelector<?>",
    "mockedClass": "BaseObjectColumnValueSelector<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.join.table",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\segment\\join\\table\\IndexedTableJoinMatcherTest.java",
      "className": "MakeComplexProcessorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate BaseObjectColumnValueSelector<?> selector;",
        "line": 153,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dimensionSelector",
    "variableType": "DimensionSelector",
    "mockedClass": "DimensionSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.join.table",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\segment\\join\\table\\IndexedTableJoinMatcherTest.java",
      "className": "MakeDimensionProcessorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate DimensionSelector dimensionSelector;",
        "line": 199,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selector",
    "variableType": "BaseObjectColumnValueSelector<?>",
    "mockedClass": "BaseObjectColumnValueSelector<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.join.table",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\segment\\join\\table\\IndexedTableJoinMatcherTest.java",
      "className": "MakeComplexProcessorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate BaseObjectColumnValueSelector<?> selector;",
        "line": 153,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dimensionSelector",
    "variableType": "DimensionSelector",
    "mockedClass": "DimensionSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.join.table",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\segment\\join\\table\\IndexedTableJoinMatcherTest.java",
      "className": "MakeDimensionProcessorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate DimensionSelector dimensionSelector;",
        "line": 199,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selector",
    "variableType": "BaseObjectColumnValueSelector<?>",
    "mockedClass": "BaseObjectColumnValueSelector<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.join.table",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\segment\\join\\table\\IndexedTableJoinMatcherTest.java",
      "className": "MakeComplexProcessorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate BaseObjectColumnValueSelector<?> selector;",
        "line": 153,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dimensionSelector",
    "variableType": "DimensionSelector",
    "mockedClass": "DimensionSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.join.table",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\segment\\join\\table\\IndexedTableJoinMatcherTest.java",
      "className": "MakeDimensionProcessorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate DimensionSelector dimensionSelector;",
        "line": 199,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selector",
    "variableType": "BaseObjectColumnValueSelector<?>",
    "mockedClass": "BaseObjectColumnValueSelector<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.join.table",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\segment\\join\\table\\IndexedTableJoinMatcherTest.java",
      "className": "MakeComplexProcessorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate BaseObjectColumnValueSelector<?> selector;",
        "line": 153,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dimensionSelector",
    "variableType": "DimensionSelector",
    "mockedClass": "DimensionSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.join.table",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\segment\\join\\table\\IndexedTableJoinMatcherTest.java",
      "className": "MakeDimensionProcessorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate DimensionSelector dimensionSelector;",
        "line": 199,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selector",
    "variableType": "BaseObjectColumnValueSelector<?>",
    "mockedClass": "BaseObjectColumnValueSelector<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.join.table",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\segment\\join\\table\\IndexedTableJoinMatcherTest.java",
      "className": "MakeComplexProcessorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate BaseObjectColumnValueSelector<?> selector;",
        "line": 153,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dimensionSelector",
    "variableType": "DimensionSelector",
    "mockedClass": "DimensionSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.join.table",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\segment\\join\\table\\IndexedTableJoinMatcherTest.java",
      "className": "MakeDimensionProcessorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate DimensionSelector dimensionSelector;",
        "line": 199,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "selector",
    "variableType": "BaseObjectColumnValueSelector<?>",
    "mockedClass": "BaseObjectColumnValueSelector<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.join.table",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\segment\\join\\table\\IndexedTableJoinMatcherTest.java",
      "className": "MakeComplexProcessorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate BaseObjectColumnValueSelector<?> selector;",
        "line": 153,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "leftSelectorFactory",
    "variableType": "ColumnSelectorFactory",
    "mockedClass": "ColumnSelectorFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.join.table",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\segment\\join\\table\\LookupJoinMatcherTest.java",
      "className": "LookupJoinMatcherTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ColumnSelectorFactory leftSelectorFactory;",
        "line": 56,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dimensionSelector",
    "variableType": "DimensionSelector",
    "mockedClass": "DimensionSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.join.table",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\segment\\join\\table\\LookupJoinMatcherTest.java",
      "className": "LookupJoinMatcherTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate DimensionSelector dimensionSelector;",
        "line": 59,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "extractor",
    "variableType": "LookupExtractor",
    "mockedClass": "LookupExtractor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.join.table",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\segment\\join\\table\\LookupJoinMatcherTest.java",
      "className": "LookupJoinMatcherTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate LookupExtractor extractor;",
        "line": 53,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "baseColumnSelectorFactory",
    "variableType": "ColumnSelectorFactory",
    "mockedClass": "ColumnSelectorFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.virtual",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\segment\\virtual\\VirtualColumnsTest.java",
      "className": "VirtualColumnsTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\npublic ColumnSelectorFactory baseColumnSelectorFactory;",
        "line": 83,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(baseColumnSelectorFactory.getRowIdSupplier()).thenReturn(null);",
        "line": 241,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMakeSelectors",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "baseColumnSelectorFactory",
    "variableType": "ColumnSelectorFactory",
    "mockedClass": "ColumnSelectorFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.virtual",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\segment\\virtual\\VirtualColumnsTest.java",
      "className": "VirtualColumnsTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\npublic ColumnSelectorFactory baseColumnSelectorFactory;",
        "line": 83,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(baseColumnSelectorFactory.getRowIdSupplier()).thenReturn(null);",
        "line": 241,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMakeSelectors",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serverView",
    "variableType": "TimelineServerView",
    "mockedClass": "TimelineServerView",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.client",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\client\\CachingClusteredClientPerfTest.java",
      "className": "CachingClusteredClientPerfTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TimelineServerView serverView = Mockito.mock(TimelineServerView.class);",
        "line": 121,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetQueryRunnerForSegments_singleIntervalLargeSegments",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "queryScheduler",
    "variableType": "QueryScheduler",
    "mockedClass": "QueryScheduler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.client",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\client\\CachingClusteredClientPerfTest.java",
      "className": "CachingClusteredClientPerfTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "QueryScheduler queryScheduler = Mockito.mock(QueryScheduler.class);",
        "line": 122,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetQueryRunnerForSegments_singleIntervalLargeSegments",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// mock scheduler to return same sequence as argument\r\nMockito.when(queryScheduler.run(any(), any())).thenAnswer(i -> i.getArgument(1));",
        "line": 124,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetQueryRunnerForSegments_singleIntervalLargeSegments",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(queryScheduler.prioritizeAndLaneQuery(any(), any())).thenAnswer(i -> ((QueryPlus) i.getArgument(0)).getQuery());",
        "line": 125,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetQueryRunnerForSegments_singleIntervalLargeSegments",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "cachingClusteredClient",
    "variableType": "CachingClusteredClient",
    "mockedClass": "CachingClusteredClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.client",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\client\\CachingClusteredClientPerfTest.java",
      "className": "CachingClusteredClientPerfTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CachingClusteredClient cachingClusteredClient = new CachingClusteredClient(new MockQueryToolChestWareHouse(), serverView, MapCache.create(1024), TestHelper.makeJsonMapper(), Mockito.mock(CachePopulator.class), new CacheConfig(), Mockito.mock(DruidHttpClientConfig.class), Mockito.mock(BrokerParallelMergeConfig.class), ForkJoinPool.commonPool(), queryScheduler, new NoopServiceEmitter());",
        "line": 130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetQueryRunnerForSegments_singleIntervalLargeSegments",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "JAVA_TYPE",
    "variableType": "JavaType",
    "mockedClass": "JavaType",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.client",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\client\\JsonParserIteratorTest.java",
      "className": "JsonParserIteratorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final JavaType JAVA_TYPE = Mockito.mock(JavaType.class);",
        "line": 60,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "exceptionThrowingStream",
    "variableType": "InputStream",
    "mockedClass": "InputStream",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.client",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\client\\JsonParserIteratorTest.java",
      "className": "FutureExceptionTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "InputStream exceptionThrowingStream = Mockito.mock(InputStream.class);",
        "line": 129,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConvertIOExceptionToQueryInterruptedException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(exceptionThrowingStream.read()).thenThrow(ioException);",
        "line": 131,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConvertIOExceptionToQueryInterruptedException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(exceptionThrowingStream.read(ArgumentMatchers.any())).thenThrow(ioException);",
        "line": 132,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConvertIOExceptionToQueryInterruptedException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(exceptionThrowingStream.read(ArgumentMatchers.any(), ArgumentMatchers.anyInt(), ArgumentMatchers.anyInt())).thenThrow(ioException);",
        "line": 133,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConvertIOExceptionToQueryInterruptedException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "JAVA_TYPE",
    "variableType": "JavaType",
    "mockedClass": "JavaType",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.client",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\client\\JsonParserIteratorTest.java",
      "className": "JsonParserIteratorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final JavaType JAVA_TYPE = Mockito.mock(JavaType.class);",
        "line": 60,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "JAVA_TYPE",
    "variableType": "JavaType",
    "mockedClass": "JavaType",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.client",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\client\\JsonParserIteratorTest.java",
      "className": "JsonParserIteratorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final JavaType JAVA_TYPE = Mockito.mock(JavaType.class);",
        "line": 60,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "JAVA_TYPE",
    "variableType": "JavaType",
    "mockedClass": "JavaType",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.client",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\client\\JsonParserIteratorTest.java",
      "className": "JsonParserIteratorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final JavaType JAVA_TYPE = Mockito.mock(JavaType.class);",
        "line": 60,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "iterator",
    "variableType": "JsonParserIterator<?>",
    "mockedClass": "JsonParserIterator<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.client",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\client\\JsonParserIteratorTest.java",
      "className": "TimeoutExceptionConversionTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "JsonParserIterator<?> iterator = new JsonParserIterator<>(JAVA_TYPE, Mockito.mock(Future.class), URL, // should always timeout\r\nmockQuery(\"qid\", 0L), HOST, OBJECT_MAPPER);",
        "line": 243,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTimeoutBeforeCallingFuture",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "query",
    "variableType": "Query<?>",
    "mockedClass": "Query",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Helper\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.client",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\client\\JsonParserIteratorTest.java",
      "className": "TimeoutExceptionConversionTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Query<?> query = Mockito.mock(Query.class);",
        "line": 310,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockQuery",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(query.getId()).thenReturn(queryId);",
        "line": 312,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockQuery",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(query.context()).thenReturn(QueryContext.of(ImmutableMap.of(DirectDruidClient.QUERY_FAIL_TIME, timeoutAt)));",
        "line": 313,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockQuery",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "context",
    "variableType": "QueryContext",
    "mockedClass": "QueryContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Helper\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.client",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\client\\JsonParserIteratorTest.java",
      "className": "TimeoutExceptionConversionTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "QueryContext context = Mockito.mock(QueryContext.class);",
        "line": 311,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockQuery",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "JAVA_TYPE",
    "variableType": "JavaType",
    "mockedClass": "JavaType",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.client",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\client\\JsonParserIteratorTest.java",
      "className": "JsonParserIteratorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final JavaType JAVA_TYPE = Mockito.mock(JavaType.class);",
        "line": 60,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "target",
    "variableType": "DataServerClient",
    "mockedClass": "DataServerClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.discovery",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\discovery\\DataServerClientTest.java",
      "className": "DataServerClientTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "DataServerClient target;",
        "line": 59,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = new DataServerClient(serviceClientFactory, mock(ServiceLocation.class), jsonMapper, Execs.scheduledSingleThreaded(\"query-cancellation-executor\"));",
        "line": 81,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "spyHttpClient",
    "variableType": "HttpClient",
    "mockedClass": "HttpClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.discovery",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\discovery\\DruidLeaderClientTest.java",
      "className": "DruidLeaderClientTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HttpClient spyHttpClient = Mockito.spy(this.httpClient);",
        "line": 242,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test503ResponseFromServerAndCacheRefresh",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "cachePopulatorStats",
    "variableType": "CachePopulatorStats",
    "mockedClass": "CachePopulatorStats",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.guice",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\guice\\BrokerProcessingModuleTest.java",
      "className": "BrokerProcessingModuleTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate CachePopulatorStats cachePopulatorStats;",
        "line": 55,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "cacheConfig",
    "variableType": "CacheConfig",
    "mockedClass": "CacheConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.guice",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\guice\\BrokerProcessingModuleTest.java",
      "className": "BrokerProcessingModuleTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate CacheConfig cacheConfig;",
        "line": 53,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serverTypeConfig",
    "variableType": "ServerTypeConfig",
    "mockedClass": "ServerTypeConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.guice",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\guice\\StorageNodeModuleTest.java",
      "className": "StorageNodeModuleTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock(answer = Answers.RETURNS_MOCKS)\r\nprivate ServerTypeConfig serverTypeConfig;",
        "line": 60,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segmentLoaderConfig",
    "variableType": "SegmentLoaderConfig",
    "mockedClass": "SegmentLoaderConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.guice",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\guice\\StorageNodeModuleTest.java",
      "className": "StorageNodeModuleTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate SegmentLoaderConfig segmentLoaderConfig;",
        "line": 64,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segmentLoaderConfig.getLocations()).thenReturn(Collections.singletonList(storageLocation));",
        "line": 75,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "self",
    "variableType": "DruidNode",
    "mockedClass": "DruidNode",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.guice",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\guice\\StorageNodeModuleTest.java",
      "className": "StorageNodeModuleTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock(answer = Answers.RETURNS_MOCKS)\r\nprivate DruidNode self;",
        "line": 58,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "storageLocation",
    "variableType": "StorageLocationConfig",
    "mockedClass": "StorageLocationConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.guice",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\guice\\StorageNodeModuleTest.java",
      "className": "StorageNodeModuleTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate StorageLocationConfig storageLocation;",
        "line": 66,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "druidProcessingConfig",
    "variableType": "DruidProcessingConfig",
    "mockedClass": "DruidProcessingConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.guice",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\guice\\StorageNodeModuleTest.java",
      "className": "StorageNodeModuleTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate DruidProcessingConfig druidProcessingConfig;",
        "line": 62,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "discoveryProvider",
    "variableType": "DruidNodeDiscoveryProvider",
    "mockedClass": "DruidNodeDiscoveryProvider",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.rpc",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\rpc\\DiscoveryServiceLocatorTest.java",
      "className": "DiscoveryServiceLocatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\npublic DruidNodeDiscoveryProvider discoveryProvider;",
        "line": 63,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(discoveryProvider.getForNodeRole(NodeRole.BROKER)).thenReturn(discovery);",
        "line": 80,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_locate_initializeEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(discoveryProvider.getForNodeRole(NodeRole.BROKER)).thenReturn(discovery);",
        "line": 95,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_locate_initializeNonEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(discoveryProvider.getForNodeRole(NodeRole.BROKER)).thenReturn(discovery);",
        "line": 123,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_locate_removeAfterAdd",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(discoveryProvider.getForNodeRole(NodeRole.BROKER)).thenReturn(discovery);",
        "line": 148,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_locate_closed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "discoveryProvider",
    "variableType": "DruidNodeDiscoveryProvider",
    "mockedClass": "DruidNodeDiscoveryProvider",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.rpc",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\rpc\\DiscoveryServiceLocatorTest.java",
      "className": "DiscoveryServiceLocatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\npublic DruidNodeDiscoveryProvider discoveryProvider;",
        "line": 63,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(discoveryProvider.getForNodeRole(NodeRole.BROKER)).thenReturn(discovery);",
        "line": 80,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_locate_initializeEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(discoveryProvider.getForNodeRole(NodeRole.BROKER)).thenReturn(discovery);",
        "line": 95,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_locate_initializeNonEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(discoveryProvider.getForNodeRole(NodeRole.BROKER)).thenReturn(discovery);",
        "line": 123,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_locate_removeAfterAdd",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(discoveryProvider.getForNodeRole(NodeRole.BROKER)).thenReturn(discovery);",
        "line": 148,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_locate_closed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "overlordClient",
    "variableType": "OverlordClient",
    "mockedClass": "OverlordClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.rpc.indexing",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\rpc\\indexing\\SpecificTaskServiceLocatorTest.java",
      "className": "SpecificTaskServiceLocatorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate OverlordClient overlordClient;",
        "line": 58,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(overlordClient.taskStatus(TASK_ID)).thenReturn(makeResponse(TaskState.RUNNING, TaskLocation.unknown()));",
        "line": 64,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_locate_noLocationYet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(overlordClient.taskStatus(TASK_ID)).thenReturn(makeResponse(TaskState.RUNNING, TASK_LOCATION1));",
        "line": 75,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_locate_taskRunning",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(overlordClient.taskStatus(TASK_ID)).thenReturn(Futures.immediateFuture(new TaskStatusResponse(TASK_ID, null)));",
        "line": 85,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_locate_taskNotFound",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(overlordClient.taskStatus(TASK_ID)).thenReturn(makeResponse(TaskState.SUCCESS, TaskLocation.unknown()));",
        "line": 96,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_locate_taskSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(overlordClient.taskStatus(TASK_ID)).thenReturn(makeResponse(TaskState.FAILED, TaskLocation.unknown()));",
        "line": 107,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_locate_taskFailed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(overlordClient.taskStatus(TASK_ID)).thenReturn(Futures.immediateFailedFuture(new ISE(\"oh no\")));",
        "line": 118,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_locate_overlordError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(overlordClient.taskStatus(TASK_ID)).thenReturn(overlordFuture);",
        "line": 138,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_locate_afterClose",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "httpClient",
    "variableType": "HttpClient",
    "mockedClass": "HttpClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Other Methods\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.rpc",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\rpc\\ServiceClientImplTest.java",
      "className": "ServiceClientImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate HttpClient httpClient;",
        "line": 81,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "return Mockito.when(httpClient.go(ArgumentMatchers.argThat(request -> request != null && expectedRequest.getMethod().equals(request.getMethod()) && expectedRequest.getUrl().equals(request.getUrl())), ArgumentMatchers.any(ObjectOrErrorResponseHandler.class), ArgumentMatchers.eq(RequestBuilder.DEFAULT_TIMEOUT)));",
        "line": 712,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "expectHttpCall",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "serviceLocator",
    "variableType": "ServiceLocator",
    "mockedClass": "ServiceLocator",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.rpc",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\rpc\\ServiceClientImplTest.java",
      "className": "ServiceClientImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ServiceLocator serviceLocator;",
        "line": 84,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Service unavailable at first, then available.\r\nMockito.when(serviceLocator.locate()).thenReturn(Futures.immediateFuture(locations())).thenReturn(Futures.immediateFuture(locations(SERVER1)));",
        "line": 504,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_request_serviceUnavailableRetry",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "gSpec",
    "variableType": "GranularitySpec",
    "mockedClass": "GranularitySpec",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.indexing",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\indexing\\DataSchemaTest.java",
      "className": "DataSchemaTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "GranularitySpec gSpec = Mockito.mock(GranularitySpec.class);",
        "line": 664,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithDimensionSpec",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "aggFactory",
    "variableType": "AggregatorFactory",
    "mockedClass": "AggregatorFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.indexing",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\indexing\\DataSchemaTest.java",
      "className": "DataSchemaTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "AggregatorFactory aggFactory = Mockito.mock(AggregatorFactory.class);",
        "line": 667,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithDimensionSpec",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(aggFactory.getName()).thenReturn(\"myAgg\");",
        "line": 668,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithDimensionSpec",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "tsSpec",
    "variableType": "TimestampSpec",
    "mockedClass": "TimestampSpec",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.indexing",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\indexing\\DataSchemaTest.java",
      "className": "DataSchemaTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TimestampSpec tsSpec = Mockito.mock(TimestampSpec.class);",
        "line": 663,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithDimensionSpec",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "oldDimSpec",
    "variableType": "DimensionsSpec",
    "mockedClass": "DimensionsSpec",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.indexing",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\indexing\\DataSchemaTest.java",
      "className": "DataSchemaTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DimensionsSpec oldDimSpec = Mockito.mock(DimensionsSpec.class);",
        "line": 665,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithDimensionSpec",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "newDimSpec",
    "variableType": "DimensionsSpec",
    "mockedClass": "DimensionsSpec",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.indexing",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\indexing\\DataSchemaTest.java",
      "className": "DataSchemaTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DimensionsSpec newDimSpec = Mockito.mock(DimensionsSpec.class);",
        "line": 666,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithDimensionSpec",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(newDimSpec.withDimensionExclusions(ArgumentMatchers.any(Set.class))).thenReturn(newDimSpec);",
        "line": 671,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithDimensionSpec",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "transSpec",
    "variableType": "TransformSpec",
    "mockedClass": "TransformSpec",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.indexing",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\indexing\\DataSchemaTest.java",
      "className": "DataSchemaTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TransformSpec transSpec = Mockito.mock(TransformSpec.class);",
        "line": 669,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithDimensionSpec",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "parserMap",
    "variableType": "Map<String,Object>",
    "mockedClass": "Map",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.indexing",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\indexing\\DataSchemaTest.java",
      "className": "DataSchemaTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Map<String, Object> parserMap = Mockito.mock(Map.class);",
        "line": 670,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithDimensionSpec",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "archiver",
    "variableType": "DataSegmentArchiver",
    "mockedClass": "DataSegmentArchiver",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.segment.loading",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\loading\\OmniDataSegmentArchiverTest.java",
      "className": "OmniDataSegmentArchiverTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final DataSegmentArchiver archiver = Mockito.mock(DataSegmentArchiver.class);",
        "line": 42,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testArchiveSegmentWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(archiver, Mockito.times(1)).archive(segment);",
        "line": 49,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testArchiveSegmentWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segment",
    "variableType": "DataSegment",
    "mockedClass": "DataSegment",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.loading",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\loading\\OmniDataSegmentArchiverTest.java",
      "className": "OmniDataSegmentArchiverTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final DataSegment segment = Mockito.mock(DataSegment.class);",
        "line": 43,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testArchiveSegmentWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segment.getLoadSpec()).thenReturn(ImmutableMap.of(\"type\", \"sane\"));",
        "line": 44,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testArchiveSegmentWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segment",
    "variableType": "DataSegment",
    "mockedClass": "DataSegment",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.loading",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\loading\\OmniDataSegmentArchiverTest.java",
      "className": "OmniDataSegmentArchiverTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final DataSegment segment = Mockito.mock(DataSegment.class);",
        "line": 55,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testArchiveSegmentUnknowType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segment.getLoadSpec()).thenReturn(ImmutableMap.of(\"type\", \"unknown-type\"));",
        "line": 56,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testArchiveSegmentUnknowType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segment",
    "variableType": "DataSegment",
    "mockedClass": "DataSegment",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.loading",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\loading\\OmniDataSegmentArchiverTest.java",
      "className": "OmniDataSegmentArchiverTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final DataSegment segment = Mockito.mock(DataSegment.class);",
        "line": 70,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testBadSegmentArchiverAccessException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segment.getLoadSpec()).thenReturn(ImmutableMap.of(\"type\", \"bad\"));",
        "line": 71,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testBadSegmentArchiverAccessException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segment",
    "variableType": "DataSegment",
    "mockedClass": "DataSegment",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.loading",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\loading\\OmniDataSegmentKillerTest.java",
      "className": "OmniDataSegmentKillerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final DataSegment segment = Mockito.mock(DataSegment.class);",
        "line": 52,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testKillSegmentWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segment.isTombstone()).thenReturn(false);",
        "line": 53,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testKillSegmentWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segment.getLoadSpec()).thenReturn(ImmutableMap.of(\"type\", \"sane\"));",
        "line": 54,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testKillSegmentWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "killer",
    "variableType": "DataSegmentKiller",
    "mockedClass": "DataSegmentKiller",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.segment.loading",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\loading\\OmniDataSegmentKillerTest.java",
      "className": "OmniDataSegmentKillerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final DataSegmentKiller killer = Mockito.mock(DataSegmentKiller.class);",
        "line": 51,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testKillSegmentWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(killer, Mockito.times(1)).kill(segment);",
        "line": 59,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testKillSegmentWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segment",
    "variableType": "DataSegment",
    "mockedClass": "DataSegment",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.loading",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\loading\\OmniDataSegmentKillerTest.java",
      "className": "OmniDataSegmentKillerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final DataSegment segment = Mockito.mock(DataSegment.class);",
        "line": 65,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testKillSegmentUnknowType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segment.getLoadSpec()).thenReturn(ImmutableMap.of(\"type\", \"unknown-type\"));",
        "line": 66,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testKillSegmentUnknowType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segment",
    "variableType": "DataSegment",
    "mockedClass": "DataSegment",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.loading",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\loading\\OmniDataSegmentKillerTest.java",
      "className": "OmniDataSegmentKillerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final DataSegment segment = Mockito.mock(DataSegment.class);",
        "line": 80,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testBadSegmentKillerAccessException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segment.getLoadSpec()).thenReturn(ImmutableMap.of(\"type\", \"bad\"));",
        "line": 81,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testBadSegmentKillerAccessException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segment2",
    "variableType": "DataSegment",
    "mockedClass": "DataSegment",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.loading",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\loading\\OmniDataSegmentKillerTest.java",
      "className": "OmniDataSegmentKillerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final DataSegment segment2 = Mockito.mock(DataSegment.class);",
        "line": 148,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testKillMultipleSegmentsWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segment2.isTombstone()).thenReturn(false);",
        "line": 152,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testKillMultipleSegmentsWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segment2.getLoadSpec()).thenReturn(ImmutableMap.of(\"type\", \"sane\"));",
        "line": 153,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testKillMultipleSegmentsWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segment1",
    "variableType": "DataSegment",
    "mockedClass": "DataSegment",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.loading",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\loading\\OmniDataSegmentKillerTest.java",
      "className": "OmniDataSegmentKillerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final DataSegment segment1 = Mockito.mock(DataSegment.class);",
        "line": 147,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testKillMultipleSegmentsWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segment1.isTombstone()).thenReturn(false);",
        "line": 150,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testKillMultipleSegmentsWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segment1.getLoadSpec()).thenReturn(ImmutableMap.of(\"type\", \"sane\"));",
        "line": 151,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testKillMultipleSegmentsWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "killerSane",
    "variableType": "DataSegmentKiller",
    "mockedClass": "DataSegmentKiller",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.segment.loading",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\loading\\OmniDataSegmentKillerTest.java",
      "className": "OmniDataSegmentKillerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final DataSegmentKiller killerSane = Mockito.mock(DataSegmentKiller.class);",
        "line": 145,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testKillMultipleSegmentsWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(killerSane, Mockito.times(1)).kill((List<DataSegment>) argThat(containsInAnyOrder(segment1, segment2)));",
        "line": 161,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testKillMultipleSegmentsWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "killerSaneTwo",
    "variableType": "DataSegmentKiller",
    "mockedClass": "DataSegmentKiller",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.segment.loading",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\loading\\OmniDataSegmentKillerTest.java",
      "className": "OmniDataSegmentKillerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final DataSegmentKiller killerSaneTwo = Mockito.mock(DataSegmentKiller.class);",
        "line": 146,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testKillMultipleSegmentsWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(killerSaneTwo, Mockito.times(1)).kill((List<DataSegment>) argThat(containsInAnyOrder(segment3)));",
        "line": 163,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testKillMultipleSegmentsWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segment3",
    "variableType": "DataSegment",
    "mockedClass": "DataSegment",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.loading",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\loading\\OmniDataSegmentKillerTest.java",
      "className": "OmniDataSegmentKillerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final DataSegment segment3 = Mockito.mock(DataSegment.class);",
        "line": 149,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testKillMultipleSegmentsWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segment3.isTombstone()).thenReturn(false);",
        "line": 154,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testKillMultipleSegmentsWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segment3.getLoadSpec()).thenReturn(ImmutableMap.of(\"type\", \"sane_2\"));",
        "line": 155,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testKillMultipleSegmentsWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mover",
    "variableType": "DataSegmentMover",
    "mockedClass": "DataSegmentMover",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.segment.loading",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\loading\\OmniDataSegmentMoverTest.java",
      "className": "OmniDataSegmentMoverTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final DataSegmentMover mover = Mockito.mock(DataSegmentMover.class);",
        "line": 44,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMoveSegmentWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mover, Mockito.times(1)).move(segment, ImmutableMap.of());",
        "line": 51,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMoveSegmentWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segment",
    "variableType": "DataSegment",
    "mockedClass": "DataSegment",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.loading",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\loading\\OmniDataSegmentMoverTest.java",
      "className": "OmniDataSegmentMoverTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final DataSegment segment = Mockito.mock(DataSegment.class);",
        "line": 45,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMoveSegmentWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segment.getLoadSpec()).thenReturn(ImmutableMap.of(\"type\", \"sane\"));",
        "line": 46,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMoveSegmentWithType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segment",
    "variableType": "DataSegment",
    "mockedClass": "DataSegment",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.loading",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\loading\\OmniDataSegmentMoverTest.java",
      "className": "OmniDataSegmentMoverTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final DataSegment segment = Mockito.mock(DataSegment.class);",
        "line": 57,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMoveSegmentUnknownType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segment.getLoadSpec()).thenReturn(ImmutableMap.of(\"type\", \"unknown-type\"));",
        "line": 58,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMoveSegmentUnknownType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segment",
    "variableType": "DataSegment",
    "mockedClass": "DataSegment",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.loading",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\loading\\OmniDataSegmentMoverTest.java",
      "className": "OmniDataSegmentMoverTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final DataSegment segment = Mockito.mock(DataSegment.class);",
        "line": 72,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testBadSegmentMoverAccessException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segment.getLoadSpec()).thenReturn(ImmutableMap.of(\"type\", \"bad\"));",
        "line": 73,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testBadSegmentMoverAccessException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "file",
    "variableType": "File",
    "mockedClass": "File",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Other Methods\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.segment.loading",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\loading\\StorageLocationTest.java",
      "className": "StorageLocationTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "File file = EasyMock.mock(File.class);",
        "line": 83,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "fakeLocation",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "emitter",
    "variableType": "ServiceEmitter",
    "mockedClass": "ServiceEmitter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.segment.loading",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\segment\\loading\\StorageLocationTest.java",
      "className": "StorageLocationTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServiceEmitter emitter = Mockito.mock(ServiceEmitter.class);",
        "line": 127,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMaybeReserve",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(emitter).emit(argumentCaptor.capture());",
        "line": 158,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMaybeReserve",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockConfigSerde",
    "variableType": "ConfigSerde<Map<String,String>>",
    "mockedClass": "ConfigSerde",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.audit",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\audit\\SQLAuditManagerTest.java",
      "className": "SQLAuditManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ConfigSerde<Map<String, String>> mockConfigSerde = Mockito.mock(ConfigSerde.class);",
        "line": 423,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateAuditEntryWithSkipNullConfigTrue",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockConfigSerde).serializeToString(ArgumentMatchers.eq(entryPayload1WithNull), ArgumentMatchers.eq(true));",
        "line": 448,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateAuditEntryWithSkipNullConfigTrue",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "loadDropHandler",
    "variableType": "SegmentLoadDropHandler",
    "mockedClass": "SegmentLoadDropHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordination",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordination\\SegmentLoadDropHandlerCacheTest.java",
      "className": "SegmentLoadDropHandlerCacheTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private SegmentLoadDropHandler loadDropHandler;",
        "line": 78,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "loadDropHandler = new SegmentLoadDropHandler(objectMapper, config, segmentAnnouncer, Mockito.mock(DataSegmentServerAnnouncer.class), segmentManager, cacheManager, new ServerTypeConfig(ServerType.HISTORICAL));",
        "line": 100,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segmentAnnouncer",
    "variableType": "DataSegmentAnnouncer",
    "mockedClass": "DataSegmentAnnouncer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.coordination",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordination\\SegmentLoadDropHandlerCacheTest.java",
      "className": "SegmentLoadDropHandlerCacheTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private DataSegmentAnnouncer segmentAnnouncer;",
        "line": 81,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "segmentAnnouncer = Mockito.mock(DataSegmentAnnouncer.class);",
        "line": 99,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(segmentAnnouncer).announceSegments(argCaptor.capture());",
        "line": 135,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testLoadLocalCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(segmentAnnouncer, Mockito.never()).announceSegment(any());",
        "line": 145,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testLoadLocalCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(segmentAnnouncer, Mockito.never()).announceSegments(any());",
        "line": 146,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testLoadLocalCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(segmentAnnouncer).announceSegment(newSegment);",
        "line": 151,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testLoadLocalCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "loadDropHandler",
    "variableType": "SegmentLoadDropHandler",
    "mockedClass": "SegmentLoadDropHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordination",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordination\\SegmentLoadDropHandlerCacheTest.java",
      "className": "SegmentLoadDropHandlerCacheTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private SegmentLoadDropHandler loadDropHandler;",
        "line": 78,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "loadDropHandler = new SegmentLoadDropHandler(objectMapper, config, segmentAnnouncer, Mockito.mock(DataSegmentServerAnnouncer.class), segmentManager, cacheManager, new ServerTypeConfig(ServerType.HISTORICAL));",
        "line": 100,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segmentAnnouncer",
    "variableType": "DataSegmentAnnouncer",
    "mockedClass": "DataSegmentAnnouncer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.coordination",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordination\\SegmentLoadDropHandlerCacheTest.java",
      "className": "SegmentLoadDropHandlerCacheTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private DataSegmentAnnouncer segmentAnnouncer;",
        "line": 81,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "segmentAnnouncer = Mockito.mock(DataSegmentAnnouncer.class);",
        "line": 99,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(segmentAnnouncer).announceSegments(argCaptor.capture());",
        "line": 135,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testLoadLocalCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(segmentAnnouncer, Mockito.never()).announceSegment(any());",
        "line": 145,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testLoadLocalCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(segmentAnnouncer, Mockito.never()).announceSegments(any());",
        "line": 146,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testLoadLocalCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(segmentAnnouncer).announceSegment(newSegment);",
        "line": 151,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testLoadLocalCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "loadDropHandler",
    "variableType": "SegmentLoadDropHandler",
    "mockedClass": "SegmentLoadDropHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordination",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordination\\SegmentLoadDropHandlerCacheTest.java",
      "className": "SegmentLoadDropHandlerCacheTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private SegmentLoadDropHandler loadDropHandler;",
        "line": 78,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "loadDropHandler = new SegmentLoadDropHandler(objectMapper, config, segmentAnnouncer, Mockito.mock(DataSegmentServerAnnouncer.class), segmentManager, cacheManager, new ServerTypeConfig(ServerType.HISTORICAL));",
        "line": 100,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segmentAnnouncer",
    "variableType": "DataSegmentAnnouncer",
    "mockedClass": "DataSegmentAnnouncer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.coordination",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordination\\SegmentLoadDropHandlerCacheTest.java",
      "className": "SegmentLoadDropHandlerCacheTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private DataSegmentAnnouncer segmentAnnouncer;",
        "line": 81,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "segmentAnnouncer = Mockito.mock(DataSegmentAnnouncer.class);",
        "line": 99,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(segmentAnnouncer).announceSegments(argCaptor.capture());",
        "line": 135,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testLoadLocalCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(segmentAnnouncer, Mockito.never()).announceSegment(any());",
        "line": 145,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testLoadLocalCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(segmentAnnouncer, Mockito.never()).announceSegments(any());",
        "line": 146,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testLoadLocalCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(segmentAnnouncer).announceSegment(newSegment);",
        "line": 151,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testLoadLocalCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "handler",
    "variableType": "SegmentLoadDropHandler",
    "mockedClass": "SegmentLoadDropHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordination",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordination\\SegmentLoadDropHandlerTest.java",
      "className": "SegmentLoadDropHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SegmentLoadDropHandler handler = new SegmentLoadDropHandler(jsonMapper, new SegmentLoaderConfig() {\r\n\r\n    @Override\r\n    public File getInfoDir() {\r\n        return infoDir;\r\n    }\r\n\r\n    @Override\r\n    public int getNumLoadingThreads() {\r\n        return 5;\r\n    }\r\n\r\n    @Override\r\n    public List<StorageLocationConfig> getLocations() {\r\n        return locations;\r\n    }\r\n\r\n    @Override\r\n    public int getAnnounceIntervalMillis() {\r\n        return 50;\r\n    }\r\n}, announcer, Mockito.mock(DataSegmentServerAnnouncer.class), segmentManager, segmentCacheManager, new ServerTypeConfig(ServerType.HISTORICAL));",
        "line": 415,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartStop",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segmentManager",
    "variableType": "SegmentManager",
    "mockedClass": "SegmentManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordination",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordination\\SegmentLoadDropHandlerTest.java",
      "className": "SegmentLoadDropHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final SegmentManager segmentManager = Mockito.mock(SegmentManager.class);",
        "line": 520,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessBatchDuplicateLoadRequestsWhenFirstRequestFailsSecondRequestShouldSucceed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segmentManager.loadSegment(ArgumentMatchers.any(), ArgumentMatchers.anyBoolean(), ArgumentMatchers.any(), ArgumentMatchers.any())).thenThrow(new RuntimeException(\"segment loading failure test\")).thenReturn(true);",
        "line": 521,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessBatchDuplicateLoadRequestsWhenFirstRequestFailsSecondRequestShouldSucceed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segmentLoadDropHandler",
    "variableType": "SegmentLoadDropHandler",
    "mockedClass": "SegmentLoadDropHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordination",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordination\\SegmentLoadDropHandlerTest.java",
      "className": "SegmentLoadDropHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final SegmentLoadDropHandler segmentLoadDropHandler = new SegmentLoadDropHandler(jsonMapper, segmentLoaderConfig, announcer, Mockito.mock(DataSegmentServerAnnouncer.class), segmentManager, segmentCacheManager, scheduledExecutorFactory.create(5, \"SegmentLoadDropHandlerTest-[%d]\"), new ServerTypeConfig(ServerType.HISTORICAL));",
        "line": 525,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessBatchDuplicateLoadRequestsWhenFirstRequestFailsSecondRequestShouldSucceed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segmentManager",
    "variableType": "SegmentManager",
    "mockedClass": "SegmentManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.coordination",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordination\\SegmentLoadDropHandlerTest.java",
      "className": "SegmentLoadDropHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final SegmentManager segmentManager = Mockito.mock(SegmentManager.class);",
        "line": 564,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessBatchLoadDropLoadSequenceForSameSegment",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// check invocations after a load-drop sequence\r\nMockito.verify(segmentManager, Mockito.times(1)).loadSegment(ArgumentMatchers.any(), ArgumentMatchers.anyBoolean(), ArgumentMatchers.any(), ArgumentMatchers.any());",
        "line": 610,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessBatchLoadDropLoadSequenceForSameSegment",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(segmentManager, Mockito.times(1)).dropSegment(ArgumentMatchers.any());",
        "line": 616,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessBatchLoadDropLoadSequenceForSameSegment",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// check invocations - 1 more load has happened\r\nMockito.verify(segmentManager, Mockito.times(2)).loadSegment(ArgumentMatchers.any(), ArgumentMatchers.anyBoolean(), ArgumentMatchers.any(), ArgumentMatchers.any());",
        "line": 630,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessBatchLoadDropLoadSequenceForSameSegment",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(segmentManager, Mockito.times(1)).dropSegment(ArgumentMatchers.any());",
        "line": 636,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessBatchLoadDropLoadSequenceForSameSegment",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// check invocations - the load segment counter should bump up\r\nMockito.verify(segmentManager, Mockito.times(3)).loadSegment(ArgumentMatchers.any(), ArgumentMatchers.anyBoolean(), ArgumentMatchers.any(), ArgumentMatchers.any());",
        "line": 650,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessBatchLoadDropLoadSequenceForSameSegment",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(segmentManager, Mockito.times(1)).dropSegment(ArgumentMatchers.any());",
        "line": 656,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessBatchLoadDropLoadSequenceForSameSegment",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segmentLoadDropHandler",
    "variableType": "SegmentLoadDropHandler",
    "mockedClass": "SegmentLoadDropHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordination",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordination\\SegmentLoadDropHandlerTest.java",
      "className": "SegmentLoadDropHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final SegmentLoadDropHandler segmentLoadDropHandler = new SegmentLoadDropHandler(jsonMapper, noAnnouncerSegmentLoaderConfig, announcer, Mockito.mock(DataSegmentServerAnnouncer.class), segmentManager, segmentCacheManager, scheduledExecutorFactory.create(5, \"SegmentLoadDropHandlerTest-[%d]\"), new ServerTypeConfig(ServerType.HISTORICAL));",
        "line": 572,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessBatchLoadDropLoadSequenceForSameSegment",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segmentLoadDropHandler",
    "variableType": "SegmentLoadDropHandler",
    "mockedClass": "SegmentLoadDropHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordination",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordination\\SegmentLoadDropHandlerTest.java",
      "className": "SegmentLoadDropHandlerTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private SegmentLoadDropHandler segmentLoadDropHandler;",
        "line": 81,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "segmentLoadDropHandler = new SegmentLoadDropHandler(jsonMapper, segmentLoaderConfig, announcer, Mockito.mock(DataSegmentServerAnnouncer.class), segmentManager, segmentCacheManager, scheduledExecutorFactory.create(5, \"SegmentLoadDropHandlerTest-[%d]\"), new ServerTypeConfig(ServerType.HISTORICAL));",
        "line": 269,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "coordinatorCompactionConfig",
    "variableType": "CoordinatorCompactionConfig",
    "mockedClass": "CoordinatorCompactionConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\DataSourceCompactionConfigAuditEntryTest.java",
      "className": "DataSourceCompactionConfigAuditEntryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate CoordinatorCompactionConfig coordinatorCompactionConfig;",
        "line": 37,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(coordinatorCompactionConfig.getCompactionTaskSlotRatio()).thenReturn(COMPACTION_TASK_SLOT_RATIO);",
        "line": 43,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(coordinatorCompactionConfig.getMaxCompactionTaskSlots()).thenReturn(MAX_COMPACTION_SLOTS);",
        "line": 44,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(coordinatorCompactionConfig.isUseAutoScaleSlots()).thenReturn(USE_AUTO_SCALE_SLOTS);",
        "line": 45,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "auditInfo2",
    "variableType": "AuditInfo",
    "mockedClass": "AuditInfo",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\DataSourceCompactionConfigHistoryTest.java",
      "className": "DataSourceCompactionConfigHistoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\r\nprivate AuditInfo auditInfo2;",
        "line": 58,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "auditInfo3",
    "variableType": "AuditInfo",
    "mockedClass": "AuditInfo",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\DataSourceCompactionConfigHistoryTest.java",
      "className": "DataSourceCompactionConfigHistoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\r\nprivate AuditInfo auditInfo3;",
        "line": 60,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "auditInfo",
    "variableType": "AuditInfo",
    "mockedClass": "AuditInfo",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\DataSourceCompactionConfigHistoryTest.java",
      "className": "DataSourceCompactionConfigHistoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\r\nprivate AuditInfo auditInfo;",
        "line": 56,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "configForDataSourceWithChange",
    "variableType": "DataSourceCompactionConfig",
    "mockedClass": "DataSourceCompactionConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\DataSourceCompactionConfigHistoryTest.java",
      "className": "DataSourceCompactionConfigHistoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock(answer = Answers.RETURNS_MOCKS)\r\nprivate DataSourceCompactionConfig configForDataSourceWithChange;",
        "line": 52,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(configForDataSourceWithChange.getDataSource()).thenReturn(DATASOURCE);",
        "line": 72,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "configForDataSource",
    "variableType": "DataSourceCompactionConfig",
    "mockedClass": "DataSourceCompactionConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\DataSourceCompactionConfigHistoryTest.java",
      "className": "DataSourceCompactionConfigHistoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock(answer = Answers.RETURNS_MOCKS)\r\nprivate DataSourceCompactionConfig configForDataSource;",
        "line": 50,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(configForDataSource.getDataSource()).thenReturn(DATASOURCE);",
        "line": 71,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "configForDataSource2",
    "variableType": "DataSourceCompactionConfig",
    "mockedClass": "DataSourceCompactionConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\DataSourceCompactionConfigHistoryTest.java",
      "className": "DataSourceCompactionConfigHistoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock(answer = Answers.RETURNS_MOCKS)\r\nprivate DataSourceCompactionConfig configForDataSource2;",
        "line": 54,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(configForDataSource2.getDataSource()).thenReturn(DATASOURCE_2);",
        "line": 73,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "compactionConfig",
    "variableType": "CoordinatorCompactionConfig",
    "mockedClass": "CoordinatorCompactionConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\DataSourceCompactionConfigHistoryTest.java",
      "className": "DataSourceCompactionConfigHistoryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate CoordinatorCompactionConfig compactionConfig;",
        "line": 48,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(compactionConfig.getCompactionTaskSlotRatio()).thenReturn(COMPACTION_TASK_SLOT_RATIO);",
        "line": 68,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(compactionConfig.getMaxCompactionTaskSlots()).thenReturn(MAX_COMPACTION_TASK_SLOTS);",
        "line": 69,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(compactionConfig.isUseAutoScaleSlots()).thenReturn(USE_AUTO_SCALE_SLOTS);",
        "line": 70,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(compactionConfig.getCompactionConfigs()).thenReturn(ImmutableList.of(configForDataSource, configForDataSource2));",
        "line": 74,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(compactionConfig.getCompactionConfigs()).thenReturn(ImmutableList.of(configForDataSource2));",
        "line": 94,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddAndDeleteCompactionConfigShouldAddBothToHistory",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(compactionConfig.getCompactionConfigs()).thenReturn(ImmutableList.of(configForDataSource));",
        "line": 111,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddAndDeleteAnotherCompactionConfigShouldNotAddToHistory",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(compactionConfig.getCompactionConfigs()).thenReturn(ImmutableList.of(configForDataSource2));",
        "line": 124,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddDeletedAddCompactionConfigShouldAddAllToHistory",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(compactionConfig.getCompactionConfigs()).thenReturn(ImmutableList.of(configForDataSourceWithChange, configForDataSource2));",
        "line": 126,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddDeletedAddCompactionConfigShouldAddAllToHistory",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(compactionConfig.getCompactionConfigs()).thenReturn(ImmutableList.of(configForDataSourceWithChange));",
        "line": 144,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddAndChangeCompactionConfigShouldAddBothToHistory",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(compactionConfig.getMaxCompactionTaskSlots()).thenReturn(newMaxTaskSlots);",
        "line": 162,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddAndChangeGlobalSettingsShouldAddTwice",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockTaskMaster",
    "variableType": "LoadQueueTaskMaster",
    "mockedClass": "LoadQueueTaskMaster",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CollectSegmentAndServerStatsTest.java",
      "className": "CollectSegmentAndServerStatsTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate LoadQueueTaskMaster mockTaskMaster;",
        "line": 42,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockTaskMaster.getAllPeons()).thenReturn(ImmutableMap.of(\"server1\", new TestLoadQueuePeon()));",
        "line": 56,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCollectedSegmentStats",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockClient",
    "variableType": "OverlordClient",
    "mockedClass": "OverlordClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "CompactSegmentsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final OverlordClient mockClient = Mockito.mock(OverlordClient.class);",
        "line": 677,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithoutGranularitySpec",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockClient",
    "variableType": "OverlordClient",
    "mockedClass": "OverlordClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "CompactSegmentsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final OverlordClient mockClient = Mockito.mock(OverlordClient.class);",
        "line": 734,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithNotNullIOConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockClient",
    "variableType": "OverlordClient",
    "mockedClass": "OverlordClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "CompactSegmentsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final OverlordClient mockClient = Mockito.mock(OverlordClient.class);",
        "line": 783,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithNullIOConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockClient",
    "variableType": "OverlordClient",
    "mockedClass": "OverlordClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "CompactSegmentsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final OverlordClient mockClient = Mockito.mock(OverlordClient.class);",
        "line": 832,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithGranularitySpec",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockClient",
    "variableType": "OverlordClient",
    "mockedClass": "OverlordClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "CompactSegmentsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final OverlordClient mockClient = Mockito.mock(OverlordClient.class);",
        "line": 892,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithDimensionSpec",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockClient",
    "variableType": "OverlordClient",
    "mockedClass": "OverlordClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "CompactSegmentsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final OverlordClient mockClient = Mockito.mock(OverlordClient.class);",
        "line": 944,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithoutDimensionSpec",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockClient",
    "variableType": "OverlordClient",
    "mockedClass": "OverlordClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "CompactSegmentsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final OverlordClient mockClient = Mockito.mock(OverlordClient.class);",
        "line": 993,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithRollupInGranularitySpec",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockClient",
    "variableType": "OverlordClient",
    "mockedClass": "OverlordClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "CompactSegmentsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final OverlordClient mockClient = Mockito.mock(OverlordClient.class);",
        "line": 1088,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithGranularitySpecConflictWithActiveCompactionTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockClient.runTask(ArgumentMatchers.anyString(), payloadCaptor.capture())).thenReturn(Futures.immediateFuture(null));",
        "line": 1090,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithGranularitySpecConflictWithActiveCompactionTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockClient.taskStatuses(null, null, 0)).thenReturn(Futures.immediateFuture(CloseableIterators.withEmptyBaggage(ImmutableList.of(runningConflictCompactionTask).iterator())));",
        "line": 1092,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithGranularitySpecConflictWithActiveCompactionTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockClient.findLockedIntervals(ArgumentMatchers.any())).thenReturn(Futures.immediateFuture(Collections.emptyMap()));",
        "line": 1096,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithGranularitySpecConflictWithActiveCompactionTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockClient.cancelTask(conflictTaskId)).thenReturn(Futures.immediateFuture(null));",
        "line": 1098,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithGranularitySpecConflictWithActiveCompactionTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockClient.getTotalWorkerCapacity()).thenReturn(Futures.immediateFuture(new IndexingTotalWorkerCapacityInfo(0, 0)));",
        "line": 1100,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithGranularitySpecConflictWithActiveCompactionTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockClient.taskPayload(ArgumentMatchers.eq(conflictTaskId))).thenReturn(Futures.immediateFuture(runningConflictCompactionTaskPayload));",
        "line": 1102,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithGranularitySpecConflictWithActiveCompactionTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// Verify that conflict task was canceled\r\nMockito.verify(mockClient).cancelTask(conflictTaskId);",
        "line": 1145,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithGranularitySpecConflictWithActiveCompactionTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockClient",
    "variableType": "OverlordClient",
    "mockedClass": "OverlordClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "CompactSegmentsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final OverlordClient mockClient = Mockito.mock(OverlordClient.class);",
        "line": 1217,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithTransformSpec",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockClient",
    "variableType": "OverlordClient",
    "mockedClass": "OverlordClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "CompactSegmentsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final OverlordClient mockClient = Mockito.mock(OverlordClient.class);",
        "line": 1267,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithoutCustomSpecs",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockClient",
    "variableType": "OverlordClient",
    "mockedClass": "OverlordClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "CompactSegmentsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final OverlordClient mockClient = Mockito.mock(OverlordClient.class);",
        "line": 1319,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithMetricsSpec",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockClient",
    "variableType": "OverlordClient",
    "mockedClass": "OverlordClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "CompactSegmentsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final OverlordClient mockClient = Mockito.mock(OverlordClient.class);",
        "line": 1400,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDetermineSegmentGranularityFromSegmentsToCompact",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockClient",
    "variableType": "OverlordClient",
    "mockedClass": "OverlordClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "CompactSegmentsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final OverlordClient mockClient = Mockito.mock(OverlordClient.class);",
        "line": 1486,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDetermineSegmentGranularityFromSegmentGranularityInCompactionConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockClient",
    "variableType": "OverlordClient",
    "mockedClass": "OverlordClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "CompactSegmentsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final OverlordClient mockClient = Mockito.mock(OverlordClient.class);",
        "line": 1542,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithMetricsSpecShouldSetPreserveExistingMetricsTrue",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockClient",
    "variableType": "OverlordClient",
    "mockedClass": "OverlordClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "CompactSegmentsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final OverlordClient mockClient = Mockito.mock(OverlordClient.class);",
        "line": 1594,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithoutMetricsSpecShouldSetPreserveExistingMetricsFalse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "COORDINATOR_CONFIG",
    "variableType": "DruidCoordinatorConfig",
    "mockedClass": "DruidCoordinatorConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "CompactSegmentsTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final DruidCoordinatorConfig COORDINATOR_CONFIG = Mockito.mock(DruidCoordinatorConfig.class);",
        "line": 123,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "COORDINATOR_CONFIG",
    "variableType": "DruidCoordinatorConfig",
    "mockedClass": "DruidCoordinatorConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "CompactSegmentsTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final DruidCoordinatorConfig COORDINATOR_CONFIG = Mockito.mock(DruidCoordinatorConfig.class);",
        "line": 123,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "tuningConfig",
    "variableType": "ClientCompactionTaskQueryTuningConfig",
    "mockedClass": "ClientCompactionTaskQueryTuningConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "StaticUtilsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ClientCompactionTaskQueryTuningConfig tuningConfig = Mockito.mock(ClientCompactionTaskQueryTuningConfig.class);",
        "line": 2132,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsParallelModeNullPartitionsSpecReturnFalse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tuningConfig.getPartitionsSpec()).thenReturn(null);",
        "line": 2133,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsParallelModeNullPartitionsSpecReturnFalse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "tuningConfig",
    "variableType": "ClientCompactionTaskQueryTuningConfig",
    "mockedClass": "ClientCompactionTaskQueryTuningConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "StaticUtilsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ClientCompactionTaskQueryTuningConfig tuningConfig = Mockito.mock(ClientCompactionTaskQueryTuningConfig.class);",
        "line": 2140,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsParallelModeNonRangePartitionVaryingMaxNumConcurrentSubTasks",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tuningConfig.getPartitionsSpec()).thenReturn(Mockito.mock(PartitionsSpec.class));",
        "line": 2141,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsParallelModeNonRangePartitionVaryingMaxNumConcurrentSubTasks",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tuningConfig.getMaxNumConcurrentSubTasks()).thenReturn(null);",
        "line": 2143,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsParallelModeNonRangePartitionVaryingMaxNumConcurrentSubTasks",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tuningConfig.getMaxNumConcurrentSubTasks()).thenReturn(1);",
        "line": 2146,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsParallelModeNonRangePartitionVaryingMaxNumConcurrentSubTasks",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tuningConfig.getMaxNumConcurrentSubTasks()).thenReturn(2);",
        "line": 2149,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsParallelModeNonRangePartitionVaryingMaxNumConcurrentSubTasks",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "tuningConfig",
    "variableType": "ClientCompactionTaskQueryTuningConfig",
    "mockedClass": "ClientCompactionTaskQueryTuningConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "StaticUtilsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ClientCompactionTaskQueryTuningConfig tuningConfig = Mockito.mock(ClientCompactionTaskQueryTuningConfig.class);",
        "line": 2156,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsParallelModeRangePartitionVaryingMaxNumConcurrentSubTasks",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tuningConfig.getPartitionsSpec()).thenReturn(Mockito.mock(SingleDimensionPartitionsSpec.class));",
        "line": 2157,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsParallelModeRangePartitionVaryingMaxNumConcurrentSubTasks",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tuningConfig.getMaxNumConcurrentSubTasks()).thenReturn(null);",
        "line": 2159,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsParallelModeRangePartitionVaryingMaxNumConcurrentSubTasks",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tuningConfig.getMaxNumConcurrentSubTasks()).thenReturn(1);",
        "line": 2162,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsParallelModeRangePartitionVaryingMaxNumConcurrentSubTasks",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tuningConfig.getMaxNumConcurrentSubTasks()).thenReturn(2);",
        "line": 2165,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsParallelModeRangePartitionVaryingMaxNumConcurrentSubTasks",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "tuningConfig",
    "variableType": "ClientCompactionTaskQueryTuningConfig",
    "mockedClass": "ClientCompactionTaskQueryTuningConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "StaticUtilsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ClientCompactionTaskQueryTuningConfig tuningConfig = Mockito.mock(ClientCompactionTaskQueryTuningConfig.class);",
        "line": 2172,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFindMaxNumTaskSlotsUsedByOneCompactionTaskWhenIsParallelMode",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tuningConfig.getPartitionsSpec()).thenReturn(Mockito.mock(PartitionsSpec.class));",
        "line": 2173,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFindMaxNumTaskSlotsUsedByOneCompactionTaskWhenIsParallelMode",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tuningConfig.getMaxNumConcurrentSubTasks()).thenReturn(2);",
        "line": 2174,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFindMaxNumTaskSlotsUsedByOneCompactionTaskWhenIsParallelMode",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "tuningConfig",
    "variableType": "ClientCompactionTaskQueryTuningConfig",
    "mockedClass": "ClientCompactionTaskQueryTuningConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "StaticUtilsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ClientCompactionTaskQueryTuningConfig tuningConfig = Mockito.mock(ClientCompactionTaskQueryTuningConfig.class);",
        "line": 2181,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFindMaxNumTaskSlotsUsedByOneCompactionTaskWhenIsSequentialMode",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tuningConfig.getPartitionsSpec()).thenReturn(Mockito.mock(PartitionsSpec.class));",
        "line": 2182,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFindMaxNumTaskSlotsUsedByOneCompactionTaskWhenIsSequentialMode",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(tuningConfig.getMaxNumConcurrentSubTasks()).thenReturn(1);",
        "line": 2183,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFindMaxNumTaskSlotsUsedByOneCompactionTaskWhenIsSequentialMode",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "COORDINATOR_CONFIG",
    "variableType": "DruidCoordinatorConfig",
    "mockedClass": "DruidCoordinatorConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "CompactSegmentsTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final DruidCoordinatorConfig COORDINATOR_CONFIG = Mockito.mock(DruidCoordinatorConfig.class);",
        "line": 123,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "mockDruidCoordinatorRuntimeParams",
    "variableType": "DruidCoordinatorRuntimeParams",
    "mockedClass": "DruidCoordinatorRuntimeParams",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillAuditLogTest.java",
      "className": "KillAuditLogTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate DruidCoordinatorRuntimeParams mockDruidCoordinatorRuntimeParams;",
        "line": 43,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockDruidCoordinatorRuntimeParams.getCoordinatorStats()).thenReturn(runStats);",
        "line": 53,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockAuditManager",
    "variableType": "AuditManager",
    "mockedClass": "AuditManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillAuditLogTest.java",
      "className": "KillAuditLogTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate AuditManager mockAuditManager;",
        "line": 40,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verifyNoInteractions(mockAuditManager);",
        "line": 68,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunSkipIfLastRunLessThanPeriod",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockAuditManager).removeAuditLogsOlderThan(ArgumentMatchers.anyLong());",
        "line": 83,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunNotSkipIfLastRunMoreThanPeriod",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockDruidCoordinatorRuntimeParams",
    "variableType": "DruidCoordinatorRuntimeParams",
    "mockedClass": "DruidCoordinatorRuntimeParams",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillCompactionConfigTest.java",
      "className": "KillCompactionConfigTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate DruidCoordinatorRuntimeParams mockDruidCoordinatorRuntimeParams;",
        "line": 54,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockDruidCoordinatorRuntimeParams.getCoordinatorStats()).thenReturn(runStats);",
        "line": 78,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockSqlSegmentsMetadataManager",
    "variableType": "SqlSegmentsMetadataManager",
    "mockedClass": "SqlSegmentsMetadataManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillCompactionConfigTest.java",
      "className": "KillCompactionConfigTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate SqlSegmentsMetadataManager mockSqlSegmentsMetadataManager;",
        "line": 57,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verifyNoInteractions(mockSqlSegmentsMetadataManager);",
        "line": 101,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunSkipIfLastRunLessThanPeriod",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verifyNoInteractions(mockSqlSegmentsMetadataManager);",
        "line": 160,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunDoNothingIfCurrentConfigIsEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockSqlSegmentsMetadataManager.retrieveAllDataSourceNames()).thenReturn(ImmutableSet.of(activeDatasourceName));",
        "line": 225,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunRemoveInactiveDatasourceCompactionConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockSqlSegmentsMetadataManager).retrieveAllDataSourceNames();",
        "line": 276,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunRemoveInactiveDatasourceCompactionConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verifyNoMoreInteractions(mockSqlSegmentsMetadataManager);",
        "line": 277,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunRemoveInactiveDatasourceCompactionConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockSqlSegmentsMetadataManager.retrieveAllDataSourceNames()).thenReturn(ImmutableSet.of());",
        "line": 312,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunRetryForRetryableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// Should call retrieveAllDataSourceNames four times due to RetryableException when failed\r\nMockito.verify(mockSqlSegmentsMetadataManager, Mockito.times(4)).retrieveAllDataSourceNames();",
        "line": 365,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunRetryForRetryableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verifyNoMoreInteractions(mockSqlSegmentsMetadataManager);",
        "line": 366,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunRetryForRetryableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockConnectorConfig",
    "variableType": "MetadataStorageTablesConfig",
    "mockedClass": "MetadataStorageTablesConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillCompactionConfigTest.java",
      "className": "KillCompactionConfigTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate MetadataStorageTablesConfig mockConnectorConfig;",
        "line": 66,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockConnectorConfig.getConfigTable()).thenReturn(\"druid_config\");",
        "line": 77,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockJacksonConfigManager",
    "variableType": "JacksonConfigManager",
    "mockedClass": "JacksonConfigManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillCompactionConfigTest.java",
      "className": "KillCompactionConfigTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate JacksonConfigManager mockJacksonConfigManager;",
        "line": 60,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verifyNoInteractions(mockJacksonConfigManager);",
        "line": 102,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunSkipIfLastRunLessThanPeriod",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.convertByteToConfig(ArgumentMatchers.eq(null), ArgumentMatchers.eq(CoordinatorCompactionConfig.class), ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))).thenReturn(CoordinatorCompactionConfig.empty());",
        "line": 142,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunDoNothingIfCurrentConfigIsEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockJacksonConfigManager).convertByteToConfig(ArgumentMatchers.eq(null), ArgumentMatchers.eq(CoordinatorCompactionConfig.class), ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()));",
        "line": 164,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunDoNothingIfCurrentConfigIsEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verifyNoMoreInteractions(mockJacksonConfigManager);",
        "line": 175,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunDoNothingIfCurrentConfigIsEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.convertByteToConfig(ArgumentMatchers.eq(originalCurrentConfigBytes), ArgumentMatchers.eq(CoordinatorCompactionConfig.class), ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))).thenReturn(originalCurrentConfig);",
        "line": 220,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunRemoveInactiveDatasourceCompactionConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.set(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY), oldConfigCaptor.capture(), newConfigCaptor.capture(), ArgumentMatchers.any())).thenReturn(ConfigManager.SetResult.ok());",
        "line": 228,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunRemoveInactiveDatasourceCompactionConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockJacksonConfigManager).convertByteToConfig(ArgumentMatchers.eq(originalCurrentConfigBytes), ArgumentMatchers.eq(CoordinatorCompactionConfig.class), ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()));",
        "line": 258,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunRemoveInactiveDatasourceCompactionConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockJacksonConfigManager).set(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY), ArgumentMatchers.any(byte[].class), ArgumentMatchers.any(CoordinatorCompactionConfig.class), ArgumentMatchers.any());",
        "line": 269,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunRemoveInactiveDatasourceCompactionConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verifyNoMoreInteractions(mockJacksonConfigManager);",
        "line": 275,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunRemoveInactiveDatasourceCompactionConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.convertByteToConfig(ArgumentMatchers.eq(originalCurrentConfigBytes), ArgumentMatchers.eq(CoordinatorCompactionConfig.class), ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))).thenReturn(originalCurrentConfig);",
        "line": 307,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunRetryForRetryableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.set(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY), ArgumentMatchers.any(byte[].class), ArgumentMatchers.any(CoordinatorCompactionConfig.class), ArgumentMatchers.any())).thenReturn(// Return fail result with RetryableException the first three calls to updated set\r\nConfigManager.SetResult.retryableFailure(new Exception()), ConfigManager.SetResult.retryableFailure(new Exception()), ConfigManager.SetResult.retryableFailure(new Exception()), // Return success ok on the fourth call to set updated config\r\nConfigManager.SetResult.ok());",
        "line": 313,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunRetryForRetryableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// Should call convertByteToConfig and lookup (to refresh current compaction config) four times due to RetryableException when failed\r\nMockito.verify(mockJacksonConfigManager, Mockito.times(4)).convertByteToConfig(ArgumentMatchers.eq(originalCurrentConfigBytes), ArgumentMatchers.eq(CoordinatorCompactionConfig.class), ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()));",
        "line": 344,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunRetryForRetryableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// Should call set (to try set new updated compaction config) four times due to RetryableException when failed\r\nMockito.verify(mockJacksonConfigManager, Mockito.times(4)).set(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY), ArgumentMatchers.any(byte[].class), ArgumentMatchers.any(CoordinatorCompactionConfig.class), ArgumentMatchers.any());",
        "line": 357,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunRetryForRetryableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verifyNoMoreInteractions(mockJacksonConfigManager);",
        "line": 363,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunRetryForRetryableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockConnector",
    "variableType": "MetadataStorageConnector",
    "mockedClass": "MetadataStorageConnector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillCompactionConfigTest.java",
      "className": "KillCompactionConfigTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate MetadataStorageConnector mockConnector;",
        "line": 63,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Set current compaction config to an empty compaction config\r\nMockito.when(mockConnector.lookup(ArgumentMatchers.anyString(), ArgumentMatchers.eq(\"name\"), ArgumentMatchers.eq(\"payload\"), ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY))).thenReturn(null);",
        "line": 136,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunDoNothingIfCurrentConfigIsEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockConnector).lookup(ArgumentMatchers.anyString(), ArgumentMatchers.eq(\"name\"), ArgumentMatchers.eq(\"payload\"), ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY));",
        "line": 169,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunDoNothingIfCurrentConfigIsEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockConnector.lookup(ArgumentMatchers.anyString(), ArgumentMatchers.eq(\"name\"), ArgumentMatchers.eq(\"payload\"), ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY))).thenReturn(originalCurrentConfigBytes);",
        "line": 214,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunRemoveInactiveDatasourceCompactionConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockConnector).lookup(ArgumentMatchers.anyString(), ArgumentMatchers.eq(\"name\"), ArgumentMatchers.eq(\"payload\"), ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY));",
        "line": 263,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunRemoveInactiveDatasourceCompactionConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockConnector.lookup(ArgumentMatchers.anyString(), ArgumentMatchers.eq(\"name\"), ArgumentMatchers.eq(\"payload\"), ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY))).thenReturn(originalCurrentConfigBytes);",
        "line": 301,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunRetryForRetryableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockConnector, Mockito.times(4)).lookup(ArgumentMatchers.anyString(), ArgumentMatchers.eq(\"name\"), ArgumentMatchers.eq(\"payload\"), ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY));",
        "line": 349,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunRetryForRetryableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockIndexerMetadataStorageCoordinator",
    "variableType": "IndexerMetadataStorageCoordinator",
    "mockedClass": "IndexerMetadataStorageCoordinator",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillDatasourceMetadataTest.java",
      "className": "KillDatasourceMetadataTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate IndexerMetadataStorageCoordinator mockIndexerMetadataStorageCoordinator;",
        "line": 42,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verifyNoInteractions(mockIndexerMetadataStorageCoordinator);",
        "line": 73,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunSkipIfLastRunLessThanPeriod",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockIndexerMetadataStorageCoordinator).removeDataSourceMetadataOlderThan(ArgumentMatchers.anyLong(), ArgumentMatchers.anySet());",
        "line": 95,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunNotSkipIfLastRunMoreThanPeriod",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockIndexerMetadataStorageCoordinator).removeDataSourceMetadataOlderThan(ArgumentMatchers.anyLong(), ArgumentMatchers.eq(ImmutableSet.of()));",
        "line": 161,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunWithEmptyFilterExcludedDatasource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockDruidCoordinatorRuntimeParams",
    "variableType": "DruidCoordinatorRuntimeParams",
    "mockedClass": "DruidCoordinatorRuntimeParams",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillDatasourceMetadataTest.java",
      "className": "KillDatasourceMetadataTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate DruidCoordinatorRuntimeParams mockDruidCoordinatorRuntimeParams;",
        "line": 48,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockDruidCoordinatorRuntimeParams.getCoordinatorStats()).thenReturn(runStats);",
        "line": 58,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockDruidCoordinatorRuntimeParams.getCoordinatorStats()).thenReturn(runStats);",
        "line": 80,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunNotSkipIfLastRunMoreThanPeriod",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockMetadataSupervisorManager",
    "variableType": "MetadataSupervisorManager",
    "mockedClass": "MetadataSupervisorManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillDatasourceMetadataTest.java",
      "className": "KillDatasourceMetadataTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate MetadataSupervisorManager mockMetadataSupervisorManager;",
        "line": 45,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verifyNoInteractions(mockMetadataSupervisorManager);",
        "line": 74,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunSkipIfLastRunLessThanPeriod",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockDruidCoordinatorRuntimeParams",
    "variableType": "DruidCoordinatorRuntimeParams",
    "mockedClass": "DruidCoordinatorRuntimeParams",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillRulesTest.java",
      "className": "KillRulesTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate DruidCoordinatorRuntimeParams mockDruidCoordinatorRuntimeParams;",
        "line": 43,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockDruidCoordinatorRuntimeParams.getCoordinatorStats()).thenReturn(runStats);",
        "line": 53,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockRuleManager",
    "variableType": "MetadataRuleManager",
    "mockedClass": "MetadataRuleManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillRulesTest.java",
      "className": "KillRulesTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate MetadataRuleManager mockRuleManager;",
        "line": 40,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verifyNoInteractions(mockRuleManager);",
        "line": 68,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunSkipIfLastRunLessThanPeriod",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockRuleManager).removeRulesForEmptyDatasourcesOlderThan(ArgumentMatchers.anyLong());",
        "line": 83,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunNotSkipIfLastRunMoreThanPeriod",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockDruidCoordinatorRuntimeParams",
    "variableType": "DruidCoordinatorRuntimeParams",
    "mockedClass": "DruidCoordinatorRuntimeParams",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillSupervisorsCustomDutyTest.java",
      "className": "KillSupervisorsCustomDutyTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate DruidCoordinatorRuntimeParams mockDruidCoordinatorRuntimeParams;",
        "line": 43,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockDruidCoordinatorRuntimeParams.getCoordinatorStats()).thenReturn(runStats);",
        "line": 103,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRun",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "coordinatorConfig",
    "variableType": "DruidCoordinatorConfig",
    "mockedClass": "DruidCoordinatorConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillSupervisorsCustomDutyTest.java",
      "className": "KillSupervisorsCustomDutyTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate DruidCoordinatorConfig coordinatorConfig;",
        "line": 46,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(coordinatorConfig.getCoordinatorMetadataStoreManagementPeriod()).thenReturn(new Duration(3600 * 1000));",
        "line": 54,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockMetadataSupervisorManager",
    "variableType": "MetadataSupervisorManager",
    "mockedClass": "MetadataSupervisorManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillSupervisorsCustomDutyTest.java",
      "className": "KillSupervisorsCustomDutyTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate MetadataSupervisorManager mockMetadataSupervisorManager;",
        "line": 40,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockMetadataSupervisorManager).removeTerminatedSupervisorsOlderThan(ArgumentMatchers.anyLong());",
        "line": 110,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRun",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockDruidCoordinatorRuntimeParams",
    "variableType": "DruidCoordinatorRuntimeParams",
    "mockedClass": "DruidCoordinatorRuntimeParams",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillSupervisorsTest.java",
      "className": "KillSupervisorsTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate DruidCoordinatorRuntimeParams mockDruidCoordinatorRuntimeParams;",
        "line": 43,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockDruidCoordinatorRuntimeParams.getCoordinatorStats()).thenReturn(runStats);",
        "line": 53,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockMetadataSupervisorManager",
    "variableType": "MetadataSupervisorManager",
    "mockedClass": "MetadataSupervisorManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillSupervisorsTest.java",
      "className": "KillSupervisorsTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate MetadataSupervisorManager mockMetadataSupervisorManager;",
        "line": 40,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verifyNoInteractions(mockMetadataSupervisorManager);",
        "line": 68,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunSkipIfLastRunLessThanPeriod",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockMetadataSupervisorManager).removeTerminatedSupervisorsOlderThan(ArgumentMatchers.anyLong());",
        "line": 83,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunNotSkipIfLastRunMoreThanPeriod",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "overlordClient",
    "variableType": "OverlordClient",
    "mockedClass": "OverlordClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case\n— Other Methods",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillUnusedSegmentsTest.java",
      "className": "KillUnusedSegmentsTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate OverlordClient overlordClient;",
        "line": 79,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(overlordClient, Mockito.never()).runKillTask(anyString(), anyString(), any(Interval.class));",
        "line": 176,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunWithNoIntervalShouldNotKillAnySegments",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(overlordClient, Mockito.never()).runKillTask(anyString(), anyString(), any(Interval.class));",
        "line": 194,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunWithSpecificDatasourceAndNoIntervalShouldNotKillAnySegments",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(overlordClient, Mockito.times(1)).runKillTask(ArgumentMatchers.anyString(), ArgumentMatchers.eq(DATASOURCE), ArgumentMatchers.eq(expectedKillInterval), ArgumentMatchers.eq(limit));",
        "line": 375,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "runAndVerifyKillInterval",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(overlordClient, Mockito.times(1)).runKillTask(ArgumentMatchers.anyString(), ArgumentMatchers.eq(DATASOURCE), ArgumentMatchers.eq(expectedKillInterval), ArgumentMatchers.eq(limit));",
        "line": 400,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "runAndVerifyKillIntervals",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(overlordClient, Mockito.never()).runKillTask(ArgumentMatchers.anyString(), ArgumentMatchers.anyString(), ArgumentMatchers.any(Interval.class), ArgumentMatchers.anyInt());",
        "line": 429,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "runAndVerifyNoKill",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "segmentsMetadataManager",
    "variableType": "SegmentsMetadataManager",
    "mockedClass": "SegmentsMetadataManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillUnusedSegmentsTest.java",
      "className": "KillUnusedSegmentsTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate SegmentsMetadataManager segmentsMetadataManager;",
        "line": 77,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segmentsMetadataManager.getUnusedSegmentIntervals(ArgumentMatchers.anyString(), ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.anyInt(), ArgumentMatchers.any())).thenAnswer(invocation -> {\r\n    DateTime minStartTime = invocation.getArgument(1);\r\n    DateTime maxEndTime = invocation.getArgument(2);\r\n    long maxEndMillis = maxEndTime.getMillis();\r\n    Long minStartMillis = minStartTime != null ? minStartTime.getMillis() : null;\r\n    List<Interval> unusedIntervals = unusedSegments.stream().map(DataSegment::getInterval).filter(i -> i.getEnd().getMillis() <= maxEndMillis && (null == minStartMillis || i.getStart().getMillis() >= minStartMillis)).collect(Collectors.toList());\r\n    int limit = invocation.getArgument(3);\r\n    return unusedIntervals.size() <= limit ? unusedIntervals : unusedIntervals.subList(0, limit);\r\n});",
        "line": 132,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "params",
    "variableType": "DruidCoordinatorRuntimeParams",
    "mockedClass": "DruidCoordinatorRuntimeParams",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillUnusedSegmentsTest.java",
      "className": "KillUnusedSegmentsTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate DruidCoordinatorRuntimeParams params;",
        "line": 86,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "stats",
    "variableType": "CoordinatorRunStats",
    "mockedClass": "CoordinatorRunStats",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Other Methods",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillUnusedSegmentsTest.java",
      "className": "KillUnusedSegmentsTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate CoordinatorRunStats stats;",
        "line": 84,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(stats, Mockito.times(times)).add(Stats.Kill.AVAILABLE_SLOTS, availableSlots);",
        "line": 416,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "verifyStats",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(stats, Mockito.times(times)).add(Stats.Kill.SUBMITTED_TASKS, submittedTasks);",
        "line": 417,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "verifyStats",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(stats, Mockito.times(times)).add(Stats.Kill.MAX_SLOTS, maxSlots);",
        "line": 418,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "verifyStats",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "coordinatorDynamicConfig",
    "variableType": "CoordinatorDynamicConfig",
    "mockedClass": "CoordinatorDynamicConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillUnusedSegmentsTest.java",
      "className": "KillUnusedSegmentsTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate CoordinatorDynamicConfig coordinatorDynamicConfig;",
        "line": 88,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "config",
    "variableType": "DruidCoordinatorConfig",
    "mockedClass": "DruidCoordinatorConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillUnusedSegmentsTest.java",
      "className": "KillUnusedSegmentsTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\r\nprivate DruidCoordinatorConfig config;",
        "line": 81,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockConnectorConfig",
    "variableType": "MetadataStorageTablesConfig",
    "mockedClass": "MetadataStorageTablesConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.http",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\http\\CoordinatorCompactionConfigsResourceTest.java",
      "className": "CoordinatorCompactionConfigsResourceTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate MetadataStorageTablesConfig mockConnectorConfig;",
        "line": 97,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockConnectorConfig.getConfigTable()).thenReturn(\"druid_config\");",
        "line": 121,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockJacksonConfigManager",
    "variableType": "JacksonConfigManager",
    "mockedClass": "JacksonConfigManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.http",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\http\\CoordinatorCompactionConfigsResourceTest.java",
      "className": "CoordinatorCompactionConfigsResourceTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate JacksonConfigManager mockJacksonConfigManager;",
        "line": 88,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.convertByteToConfig(ArgumentMatchers.eq(OLD_CONFIG_IN_BYTES), ArgumentMatchers.eq(CoordinatorCompactionConfig.class), ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))).thenReturn(ORIGINAL_CONFIG);",
        "line": 115,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.set(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY), oldConfigCaptor.capture(), newConfigCaptor.capture(), ArgumentMatchers.any())).thenReturn(ConfigManager.SetResult.ok());",
        "line": 141,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetCompactionTaskLimitWithExistingConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.set(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY), oldConfigCaptor.capture(), newConfigCaptor.capture(), ArgumentMatchers.any())).thenReturn(ConfigManager.SetResult.ok());",
        "line": 176,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddOrUpdateCompactionConfigWithExistingConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.set(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY), oldConfigCaptor.capture(), newConfigCaptor.capture(), ArgumentMatchers.any())).thenReturn(ConfigManager.SetResult.ok());",
        "line": 221,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteCompactionConfigWithExistingConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.convertByteToConfig(ArgumentMatchers.eq(OLD_CONFIG_IN_BYTES), ArgumentMatchers.eq(CoordinatorCompactionConfig.class), ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))).thenReturn(originalConfig);",
        "line": 244,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteCompactionConfigWithExistingConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.set(ArgumentMatchers.anyString(), ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any())).thenReturn(ConfigManager.SetResult.retryableFailure(new ISE(\"retryable\")));",
        "line": 269,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateShouldRetryIfRetryableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// Verify that the update is retried upto the max number of retries\r\nMockito.verify(mockJacksonConfigManager, Mockito.times(CoordinatorCompactionConfigsResource.UPDATE_NUM_RETRY)).set(ArgumentMatchers.anyString(), ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());",
        "line": 286,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateShouldRetryIfRetryableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.set(ArgumentMatchers.anyString(), ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any())).thenReturn(ConfigManager.SetResult.failure(new ISE(\"retryable\")));",
        "line": 300,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateShouldNotRetryIfNotRetryableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// Verify that the update is tried only once\r\nMockito.verify(mockJacksonConfigManager, Mockito.times(1)).set(ArgumentMatchers.anyString(), ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());",
        "line": 317,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateShouldNotRetryIfNotRetryableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.convertByteToConfig(ArgumentMatchers.eq(null), ArgumentMatchers.eq(CoordinatorCompactionConfig.class), ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))).thenReturn(CoordinatorCompactionConfig.empty());",
        "line": 335,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetCompactionTaskLimitWithoutExistingConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.set(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY), oldConfigCaptor.capture(), newConfigCaptor.capture(), ArgumentMatchers.any())).thenReturn(ConfigManager.SetResult.ok());",
        "line": 344,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetCompactionTaskLimitWithoutExistingConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.convertByteToConfig(ArgumentMatchers.eq(null), ArgumentMatchers.eq(CoordinatorCompactionConfig.class), ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))).thenReturn(CoordinatorCompactionConfig.empty());",
        "line": 382,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddOrUpdateCompactionConfigWithoutExistingConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.set(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY), oldConfigCaptor.capture(), newConfigCaptor.capture(), ArgumentMatchers.any())).thenReturn(ConfigManager.SetResult.ok());",
        "line": 391,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddOrUpdateCompactionConfigWithoutExistingConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.convertByteToConfig(ArgumentMatchers.eq(null), ArgumentMatchers.eq(CoordinatorCompactionConfig.class), ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))).thenReturn(CoordinatorCompactionConfig.empty());",
        "line": 438,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteCompactionConfigWithoutExistingConfigShouldFailAsDatasourceNotExist",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockConnector",
    "variableType": "MetadataStorageConnector",
    "mockedClass": "MetadataStorageConnector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.http",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\http\\CoordinatorCompactionConfigsResourceTest.java",
      "className": "CoordinatorCompactionConfigsResourceTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate MetadataStorageConnector mockConnector;",
        "line": 94,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockConnector.lookup(ArgumentMatchers.anyString(), ArgumentMatchers.eq(\"name\"), ArgumentMatchers.eq(\"payload\"), ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY))).thenReturn(OLD_CONFIG_IN_BYTES);",
        "line": 108,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockConnector.lookup(ArgumentMatchers.anyString(), ArgumentMatchers.eq(\"name\"), ArgumentMatchers.eq(\"payload\"), ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY))).thenReturn(null);",
        "line": 328,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetCompactionTaskLimitWithoutExistingConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockConnector.lookup(ArgumentMatchers.anyString(), ArgumentMatchers.eq(\"name\"), ArgumentMatchers.eq(\"payload\"), ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY))).thenReturn(null);",
        "line": 375,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddOrUpdateCompactionConfigWithoutExistingConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockConnector.lookup(ArgumentMatchers.anyString(), ArgumentMatchers.eq(\"name\"), ArgumentMatchers.eq(\"payload\"), ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY))).thenReturn(null);",
        "line": 431,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteCompactionConfigWithoutExistingConfigShouldFailAsDatasourceNotExist",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockHttpServletRequest",
    "variableType": "HttpServletRequest",
    "mockedClass": "HttpServletRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.http",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\http\\CoordinatorCompactionConfigsResourceTest.java",
      "className": "CoordinatorCompactionConfigsResourceTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate HttpServletRequest mockHttpServletRequest;",
        "line": 91,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockHttpServletRequest.getRemoteAddr()).thenReturn(\"123\");",
        "line": 132,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockAuditManager",
    "variableType": "AuditManager",
    "mockedClass": "AuditManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.http",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\http\\CoordinatorCompactionConfigsResourceTest.java",
      "className": "CoordinatorCompactionConfigsResourceTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate AuditManager mockAuditManager;",
        "line": 100,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockAuditManager.fetchAuditHistory(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY), ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY), ArgumentMatchers.any())).thenReturn(ImmutableList.of());",
        "line": 122,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "coordinator",
    "variableType": "DruidCoordinator",
    "mockedClass": "DruidCoordinator",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in @Before\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.http",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\http\\MetadataResourceTest.java",
      "className": "MetadataResourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DruidCoordinator coordinator = Mockito.mock(DruidCoordinator.class);",
        "line": 84,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dataSourcesSnapshot",
    "variableType": "DataSourcesSnapshot",
    "mockedClass": "DataSourcesSnapshot",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in @Before\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.http",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\http\\MetadataResourceTest.java",
      "className": "MetadataResourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataSourcesSnapshot dataSourcesSnapshot = Mockito.mock(DataSourcesSnapshot.class);",
        "line": 75,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segmentsMetadataManager",
    "variableType": "SegmentsMetadataManager",
    "mockedClass": "SegmentsMetadataManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in @Before\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.http",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\http\\MetadataResourceTest.java",
      "className": "MetadataResourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SegmentsMetadataManager segmentsMetadataManager = Mockito.mock(SegmentsMetadataManager.class);",
        "line": 68,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "storageCoordinator",
    "variableType": "IndexerMetadataStorageCoordinator",
    "mockedClass": "IndexerMetadataStorageCoordinator",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in @Before\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.http",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\http\\MetadataResourceTest.java",
      "className": "MetadataResourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "IndexerMetadataStorageCoordinator storageCoordinator = Mockito.mock(IndexerMetadataStorageCoordinator.class);",
        "line": 92,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "request",
    "variableType": "HttpServletRequest",
    "mockedClass": "HttpServletRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.http",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\http\\MetadataResourceTest.java",
      "className": "MetadataResourceTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private HttpServletRequest request;",
        "line": 52,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "request = Mockito.mock(HttpServletRequest.class);",
        "line": 64,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serviceEmitter",
    "variableType": "ServiceEmitter",
    "mockedClass": "ServiceEmitter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.initialization.jetty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\initialization\\jetty\\JettyServerModuleTest.java",
      "className": "JettyServerModuleTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServiceEmitter serviceEmitter = new ServiceEmitter(\"service\", \"host\", Mockito.mock(Emitter.class)) {\r\n\r\n    @Override\r\n    public void emit(Event event) {\r\n        events.add(event);\r\n    }\r\n};",
        "line": 42,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJettyServerModule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "jettyServerThreadPool",
    "variableType": "QueuedThreadPool",
    "mockedClass": "QueuedThreadPool",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.initialization.jetty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\initialization\\jetty\\JettyServerModuleTest.java",
      "className": "JettyServerModuleTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "QueuedThreadPool jettyServerThreadPool = Mockito.mock(QueuedThreadPool.class);",
        "line": 50,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJettyServerModule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(jettyServerThreadPool.getThreads()).thenReturn(100);",
        "line": 52,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJettyServerModule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(jettyServerThreadPool.getIdleThreads()).thenReturn(40);",
        "line": 53,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJettyServerModule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(jettyServerThreadPool.isLowOnThreads()).thenReturn(true);",
        "line": 54,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJettyServerModule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(jettyServerThreadPool.getMinThreads()).thenReturn(30);",
        "line": 55,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJettyServerModule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(jettyServerThreadPool.getMaxThreads()).thenReturn(100);",
        "line": 56,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJettyServerModule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(jettyServerThreadPool.getQueueSize()).thenReturn(50);",
        "line": 57,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJettyServerModule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(jettyServerThreadPool.getBusyThreads()).thenReturn(60);",
        "line": 58,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJettyServerModule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockTLSCertificateChecker",
    "variableType": "TLSCertificateChecker",
    "mockedClass": "TLSCertificateChecker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.initialization",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\initialization\\JettyTest.java",
      "className": "JettyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TLSCertificateChecker mockTLSCertificateChecker = Mockito.mock(TLSCertificateChecker.class);",
        "line": 536,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCustomCheckX509TrustManagerSetEndpointIdentificationAlgorithmToNullWithValidateServerHostnamesSetToFalse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockTLSCertificateChecker).checkServer(ArgumentMatchers.eq(chain), ArgumentMatchers.eq(authType), captor.capture(), ArgumentMatchers.eq(mockX509ExtendedTrustManager));",
        "line": 553,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCustomCheckX509TrustManagerSetEndpointIdentificationAlgorithmToNullWithValidateServerHostnamesSetToFalse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockX509Certificate",
    "variableType": "X509Certificate",
    "mockedClass": "X509Certificate",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.initialization",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\initialization\\JettyTest.java",
      "className": "JettyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "X509Certificate mockX509Certificate = Mockito.mock(X509Certificate.class);",
        "line": 537,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCustomCheckX509TrustManagerSetEndpointIdentificationAlgorithmToNullWithValidateServerHostnamesSetToFalse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockX509ExtendedTrustManager",
    "variableType": "X509ExtendedTrustManager",
    "mockedClass": "X509ExtendedTrustManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.initialization",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\initialization\\JettyTest.java",
      "className": "JettyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "X509ExtendedTrustManager mockX509ExtendedTrustManager = Mockito.mock(X509ExtendedTrustManager.class);",
        "line": 535,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCustomCheckX509TrustManagerSetEndpointIdentificationAlgorithmToNullWithValidateServerHostnamesSetToFalse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "emitter",
    "variableType": "ServiceEmitter",
    "mockedClass": "ServiceEmitter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\metrics\\MetricsModuleTest.java",
      "className": "MetricsModuleTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final ServiceEmitter emitter = Mockito.mock(ServiceEmitter.class);",
        "line": 182,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetSysMonitorViaInjector",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(emitter, Mockito.never()).emit(ArgumentMatchers.any(ServiceEventBuilder.class));",
        "line": 186,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetSysMonitorViaInjector",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "emitter",
    "variableType": "ServiceEmitter",
    "mockedClass": "ServiceEmitter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\metrics\\MetricsModuleTest.java",
      "className": "MetricsModuleTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final ServiceEmitter emitter = Mockito.mock(ServiceEmitter.class);",
        "line": 197,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetSysMonitorWhenNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(emitter, Mockito.atLeastOnce()).emit(ArgumentMatchers.any(ServiceEventBuilder.class));",
        "line": 201,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetSysMonitorWhenNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "emitter",
    "variableType": "ServiceEmitter",
    "mockedClass": "ServiceEmitter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\metrics\\MetricsModuleTest.java",
      "className": "MetricsModuleTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final ServiceEmitter emitter = Mockito.mock(ServiceEmitter.class);",
        "line": 209,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetOshiSysMonitorViaInjector",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(emitter, Mockito.never()).emit(ArgumentMatchers.any(ServiceEventBuilder.class));",
        "line": 213,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetOshiSysMonitorViaInjector",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "emitter",
    "variableType": "ServiceEmitter",
    "mockedClass": "ServiceEmitter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\metrics\\MetricsModuleTest.java",
      "className": "MetricsModuleTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final ServiceEmitter emitter = Mockito.mock(ServiceEmitter.class);",
        "line": 221,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetOshiSysMonitorWhenNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(emitter, Mockito.atLeastOnce()).emit(ArgumentMatchers.any(ServiceEventBuilder.class));",
        "line": 225,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetOshiSysMonitorWhenNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segmentLoaderConfig",
    "variableType": "SegmentLoaderConfig",
    "mockedClass": "SegmentLoaderConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\metrics\\SegmentStatsMonitorTest.java",
      "className": "SegmentStatsMonitorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SegmentLoaderConfig segmentLoaderConfig = Mockito.mock(SegmentLoaderConfig.class);",
        "line": 75,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testLazyLoadOnStartThrowsException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segmentLoaderConfig.isLazyLoadOnStart()).thenReturn(true);",
        "line": 76,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testLazyLoadOnStartThrowsException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "druidServerConfig",
    "variableType": "DruidServerConfig",
    "mockedClass": "DruidServerConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\metrics\\SegmentStatsMonitorTest.java",
      "className": "SegmentStatsMonitorTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private DruidServerConfig druidServerConfig;",
        "line": 51,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "druidServerConfig = Mockito.mock(DruidServerConfig.class);",
        "line": 60,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(druidServerConfig.getTier()).thenReturn(TIER);",
        "line": 68,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(druidServerConfig.getPriority()).thenReturn(PRIORITY);",
        "line": 69,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "segmentLoadDropMgr",
    "variableType": "SegmentLoadDropHandler",
    "mockedClass": "SegmentLoadDropHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\metrics\\SegmentStatsMonitorTest.java",
      "className": "SegmentStatsMonitorTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private SegmentLoadDropHandler segmentLoadDropMgr;",
        "line": 52,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "segmentLoadDropMgr = Mockito.mock(SegmentLoadDropHandler.class);",
        "line": 61,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segmentLoadDropMgr.getAverageNumOfRowsPerSegmentForDatasource()).thenReturn(ImmutableMap.of(DATA_SOURCE, 100_000L));",
        "line": 88,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimple",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segmentLoadDropMgr.getRowCountDistributionPerDatasource()).thenReturn(ImmutableMap.of(DATA_SOURCE, segmentRowCountDistribution));",
        "line": 90,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimple",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segmentLoadDropMgr.getAverageNumOfRowsPerSegmentForDatasource()).thenReturn(ImmutableMap.of(DATA_SOURCE, 50_000L));",
        "line": 130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testZeroAndTombstoneDistribution",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segmentLoadDropMgr.getRowCountDistributionPerDatasource()).thenReturn(ImmutableMap.of(DATA_SOURCE, segmentRowCountDistribution));",
        "line": 132,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testZeroAndTombstoneDistribution",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serviceEmitter",
    "variableType": "ServiceEmitter",
    "mockedClass": "ServiceEmitter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.metrics",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\metrics\\SegmentStatsMonitorTest.java",
      "className": "SegmentStatsMonitorTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private ServiceEmitter serviceEmitter;",
        "line": 53,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "serviceEmitter = Mockito.mock(ServiceEmitter.class);",
        "line": 62,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(serviceEmitter, Mockito.atLeastOnce()).emit(eventArgumentCaptor.capture());",
        "line": 96,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSimple",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(serviceEmitter, Mockito.atLeastOnce()).emit(eventArgumentCaptor.capture());",
        "line": 138,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testZeroAndTombstoneDistribution",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "request",
    "variableType": "HttpServletRequest",
    "mockedClass": "HttpServletRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server.security",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\security\\AllowHttpMethodsResourceFilterTest.java",
      "className": "AllowHttpMethodsResourceFilterTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate HttpServletRequest request;",
        "line": 42,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "response",
    "variableType": "HttpServletResponse",
    "mockedClass": "HttpServletResponse",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.security",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\security\\AllowHttpMethodsResourceFilterTest.java",
      "className": "AllowHttpMethodsResourceFilterTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate HttpServletResponse response;",
        "line": 44,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(response).sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);",
        "line": 62,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDoFilterMethodNotAllowedShouldReturnAnError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "filterChain",
    "variableType": "FilterChain",
    "mockedClass": "FilterChain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.security",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\security\\AllowHttpMethodsResourceFilterTest.java",
      "className": "AllowHttpMethodsResourceFilterTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate FilterChain filterChain;",
        "line": 46,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(filterChain).doFilter(request, response);",
        "line": 70,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDoFilterMethodAllowedShouldFilter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(filterChain).doFilter(request, response);",
        "line": 79,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDoFilterSupportedHttpMethodsShouldFilter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "trasformFunction",
    "variableType": "Function<String,String>",
    "mockedClass": "Function<String,String>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.security",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\security\\ForbiddenExceptionTest.java",
      "className": "ForbiddenExceptionTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate Function<String, String> trasformFunction;",
        "line": 38,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(trasformFunction.apply(ArgumentMatchers.eq(ERROR_MESSAGE_ORIGINAL))).thenReturn(null);",
        "line": 44,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanitizeWithTransformFunctionReturningNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(trasformFunction).apply(ArgumentMatchers.eq(ERROR_MESSAGE_ORIGINAL));",
        "line": 49,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanitizeWithTransformFunctionReturningNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verifyNoMoreInteractions(trasformFunction);",
        "line": 50,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanitizeWithTransformFunctionReturningNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(trasformFunction.apply(ArgumentMatchers.eq(ERROR_MESSAGE_ORIGINAL))).thenReturn(ERROR_MESSAGE_TRANSFORMED);",
        "line": 56,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanitizeWithTransformFunctionReturningNewString",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(trasformFunction).apply(ArgumentMatchers.eq(ERROR_MESSAGE_ORIGINAL));",
        "line": 61,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanitizeWithTransformFunctionReturningNewString",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verifyNoMoreInteractions(trasformFunction);",
        "line": 62,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanitizeWithTransformFunctionReturningNewString",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "injector",
    "variableType": "Injector",
    "mockedClass": "Injector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in @Override\n\nStubbing:\n— @Override\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\CreateTablesTest.java",
      "className": "CreateTablesTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Injector injector = Mockito.mock(Injector.class);",
        "line": 71,
        "locate": "@Override",
        "locationContext": {
          "methodName": "makeInjector",
          "methodAnnotations": [
            "@Override"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(injector.getInstance(MetadataStorageConnector.class)).thenReturn(connector);",
        "line": 72,
        "locate": "@Override",
        "locationContext": {
          "methodName": "makeInjector",
          "methodAnnotations": [
            "@Override"
          ]
        }
      }
    ]
  },
  {
    "variableName": "createTables",
    "variableType": "CreateTables",
    "mockedClass": "CreateTables",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\CreateTablesTest.java",
      "className": "CreateTablesTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// Run CreateTables\r\nCreateTables createTables = new CreateTables() {\r\n\r\n    @Override\r\n    public Injector makeInjector() {\r\n        Injector injector = Mockito.mock(Injector.class);\r\n        Mockito.when(injector.getInstance(MetadataStorageConnector.class)).thenReturn(connector);\r\n        return injector;\r\n    }\r\n};",
        "line": 66,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunCreatesAllTables",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "lifecycle",
    "variableType": "Lifecycle",
    "mockedClass": "Lifecycle",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DiscoverySideEffectsProviderTest.java",
      "className": "DiscoverySideEffectsProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate Lifecycle lifecycle;",
        "line": 65,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "druidNode",
    "variableType": "DruidNode",
    "mockedClass": "DruidNode",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DiscoverySideEffectsProviderTest.java",
      "className": "DiscoverySideEffectsProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate DruidNode druidNode;",
        "line": 56,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "discoverableOnlyAnnouncer",
    "variableType": "DruidNodeAnnouncer",
    "mockedClass": "DruidNodeAnnouncer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DiscoverySideEffectsProviderTest.java",
      "className": "DiscoverySideEffectsProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "/**\r\n * This announcer is mocked to fail if it tries to announce a Druid service that is not discoverable.\r\n */\r\n@Mock\r\nprivate DruidNodeAnnouncer discoverableOnlyAnnouncer;",
        "line": 61,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "legacyAnnouncer",
    "variableType": "ServiceAnnouncer",
    "mockedClass": "ServiceAnnouncer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DiscoverySideEffectsProviderTest.java",
      "className": "DiscoverySideEffectsProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ServiceAnnouncer legacyAnnouncer;",
        "line": 63,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "lifecycle",
    "variableType": "Lifecycle",
    "mockedClass": "Lifecycle",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DiscoverySideEffectsProviderTest.java",
      "className": "DiscoverySideEffectsProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate Lifecycle lifecycle;",
        "line": 65,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "druidNode",
    "variableType": "DruidNode",
    "mockedClass": "DruidNode",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DiscoverySideEffectsProviderTest.java",
      "className": "DiscoverySideEffectsProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate DruidNode druidNode;",
        "line": 56,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "discoverableOnlyAnnouncer",
    "variableType": "DruidNodeAnnouncer",
    "mockedClass": "DruidNodeAnnouncer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DiscoverySideEffectsProviderTest.java",
      "className": "DiscoverySideEffectsProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "/**\r\n * This announcer is mocked to fail if it tries to announce a Druid service that is not discoverable.\r\n */\r\n@Mock\r\nprivate DruidNodeAnnouncer discoverableOnlyAnnouncer;",
        "line": 61,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "legacyAnnouncer",
    "variableType": "ServiceAnnouncer",
    "mockedClass": "ServiceAnnouncer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DiscoverySideEffectsProviderTest.java",
      "className": "DiscoverySideEffectsProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ServiceAnnouncer legacyAnnouncer;",
        "line": 63,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "lifecycle",
    "variableType": "Lifecycle",
    "mockedClass": "Lifecycle",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DiscoverySideEffectsProviderTest.java",
      "className": "DiscoverySideEffectsProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate Lifecycle lifecycle;",
        "line": 65,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "druidNode",
    "variableType": "DruidNode",
    "mockedClass": "DruidNode",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DiscoverySideEffectsProviderTest.java",
      "className": "DiscoverySideEffectsProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate DruidNode druidNode;",
        "line": 56,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "discoverableOnlyAnnouncer",
    "variableType": "DruidNodeAnnouncer",
    "mockedClass": "DruidNodeAnnouncer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DiscoverySideEffectsProviderTest.java",
      "className": "DiscoverySideEffectsProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "/**\r\n * This announcer is mocked to fail if it tries to announce a Druid service that is not discoverable.\r\n */\r\n@Mock\r\nprivate DruidNodeAnnouncer discoverableOnlyAnnouncer;",
        "line": 61,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "legacyAnnouncer",
    "variableType": "ServiceAnnouncer",
    "mockedClass": "ServiceAnnouncer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DiscoverySideEffectsProviderTest.java",
      "className": "DiscoverySideEffectsProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ServiceAnnouncer legacyAnnouncer;",
        "line": 63,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "lifecycle",
    "variableType": "Lifecycle",
    "mockedClass": "Lifecycle",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DiscoverySideEffectsProviderTest.java",
      "className": "DiscoverySideEffectsProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate Lifecycle lifecycle;",
        "line": 65,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "druidNode",
    "variableType": "DruidNode",
    "mockedClass": "DruidNode",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DiscoverySideEffectsProviderTest.java",
      "className": "DiscoverySideEffectsProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate DruidNode druidNode;",
        "line": 56,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "discoverableOnlyAnnouncer",
    "variableType": "DruidNodeAnnouncer",
    "mockedClass": "DruidNodeAnnouncer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DiscoverySideEffectsProviderTest.java",
      "className": "DiscoverySideEffectsProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "/**\r\n * This announcer is mocked to fail if it tries to announce a Druid service that is not discoverable.\r\n */\r\n@Mock\r\nprivate DruidNodeAnnouncer discoverableOnlyAnnouncer;",
        "line": 61,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "legacyAnnouncer",
    "variableType": "ServiceAnnouncer",
    "mockedClass": "ServiceAnnouncer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DiscoverySideEffectsProviderTest.java",
      "className": "DiscoverySideEffectsProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ServiceAnnouncer legacyAnnouncer;",
        "line": 63,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "lifecycle",
    "variableType": "Lifecycle",
    "mockedClass": "Lifecycle",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DiscoverySideEffectsProviderTest.java",
      "className": "DiscoverySideEffectsProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate Lifecycle lifecycle;",
        "line": 65,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "druidNode",
    "variableType": "DruidNode",
    "mockedClass": "DruidNode",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DiscoverySideEffectsProviderTest.java",
      "className": "DiscoverySideEffectsProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate DruidNode druidNode;",
        "line": 56,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "discoverableOnlyAnnouncer",
    "variableType": "DruidNodeAnnouncer",
    "mockedClass": "DruidNodeAnnouncer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DiscoverySideEffectsProviderTest.java",
      "className": "DiscoverySideEffectsProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "/**\r\n * This announcer is mocked to fail if it tries to announce a Druid service that is not discoverable.\r\n */\r\n@Mock\r\nprivate DruidNodeAnnouncer discoverableOnlyAnnouncer;",
        "line": 61,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "legacyAnnouncer",
    "variableType": "ServiceAnnouncer",
    "mockedClass": "ServiceAnnouncer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DiscoverySideEffectsProviderTest.java",
      "className": "DiscoverySideEffectsProviderTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ServiceAnnouncer legacyAnnouncer;",
        "line": 63,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      }
    ]
  },
  {
    "variableName": "factory",
    "variableType": "QueryRunnerFactory",
    "mockedClass": "QueryRunnerFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DumpSegmentTest.java",
      "className": "DumpSegmentTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "QueryRunnerFactory factory = Mockito.mock(QueryRunnerFactory.class, Mockito.RETURNS_DEEP_STUBS);",
        "line": 102,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteQuery",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(factory.createRunner(ArgumentMatchers.any())).thenReturn(runner);",
        "line": 109,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteQuery",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(factory.getToolchest().mergeResults(factory.mergeRunners(DirectQueryProcessingPool.INSTANCE, ImmutableList.of(runner)))).thenReturn(mergeRunner);",
        "line": 110,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteQuery",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "query",
    "variableType": "Query",
    "mockedClass": "Query",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DumpSegmentTest.java",
      "className": "DumpSegmentTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Query query = Mockito.mock(Query.class);",
        "line": 105,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteQuery",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "conglomerate",
    "variableType": "QueryRunnerFactoryConglomerate",
    "mockedClass": "QueryRunnerFactoryConglomerate",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DumpSegmentTest.java",
      "className": "DumpSegmentTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "QueryRunnerFactoryConglomerate conglomerate = Mockito.mock(QueryRunnerFactoryConglomerate.class);",
        "line": 101,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteQuery",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(conglomerate.findFactory(ArgumentMatchers.any())).thenReturn(factory);",
        "line": 108,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteQuery",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mergeRunner",
    "variableType": "QueryRunner",
    "mockedClass": "QueryRunner",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DumpSegmentTest.java",
      "className": "DumpSegmentTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "QueryRunner mergeRunner = Mockito.mock(QueryRunner.class);",
        "line": 104,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteQuery",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mergeRunner.run(ArgumentMatchers.any(), ArgumentMatchers.any())).thenReturn(expected);",
        "line": 111,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteQuery",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "injector",
    "variableType": "Injector",
    "mockedClass": "Injector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DumpSegmentTest.java",
      "className": "DumpSegmentTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Injector injector = Mockito.mock(Injector.class);",
        "line": 100,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteQuery",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(injector.getInstance(QueryRunnerFactoryConglomerate.class)).thenReturn(conglomerate);",
        "line": 107,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteQuery",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "runner",
    "variableType": "QueryRunner",
    "mockedClass": "QueryRunner",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DumpSegmentTest.java",
      "className": "DumpSegmentTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "QueryRunner runner = Mockito.mock(QueryRunner.class);",
        "line": 103,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteQuery",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "queryableIndex",
    "variableType": "QueryableIndex",
    "mockedClass": "QueryableIndex",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DumpSegmentTest.java",
      "className": "DumpSegmentTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "QueryableIndex queryableIndex = Mockito.mock(QueryableIndex.class);",
        "line": 120,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDumpBitmap",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(queryableIndex.getBitmapFactoryForDimensions()).thenReturn(bitmapFactory);",
        "line": 131,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDumpBitmap",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(queryableIndex.getColumnHolder(\"x\")).thenReturn(xHolder);",
        "line": 133,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDumpBitmap",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(queryableIndex.getColumnHolder(\"y\")).thenReturn(yHolder);",
        "line": 134,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDumpBitmap",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "valueIndex",
    "variableType": "DictionaryEncodedStringValueIndex",
    "mockedClass": "DictionaryEncodedStringValueIndex",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DumpSegmentTest.java",
      "className": "DumpSegmentTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DictionaryEncodedStringValueIndex valueIndex = Mockito.mock(DictionaryEncodedStringValueIndex.class);",
        "line": 126,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDumpBitmap",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(valueIndex.getCardinality()).thenReturn(1);",
        "line": 138,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDumpBitmap",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(valueIndex.getBitmap(0)).thenReturn(bitmap);",
        "line": 139,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDumpBitmap",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(valueIndex.getValue(0)).thenReturn(\"val\");",
        "line": 140,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDumpBitmap",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "indexSupplier",
    "variableType": "ColumnIndexSupplier",
    "mockedClass": "ColumnIndexSupplier",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DumpSegmentTest.java",
      "className": "DumpSegmentTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ColumnIndexSupplier indexSupplier = Mockito.mock(ColumnIndexSupplier.class);",
        "line": 125,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDumpBitmap",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(indexSupplier.as(DictionaryEncodedStringValueIndex.class)).thenReturn(valueIndex);",
        "line": 137,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDumpBitmap",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "xHolder",
    "variableType": "ColumnHolder",
    "mockedClass": "ColumnHolder",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DumpSegmentTest.java",
      "className": "DumpSegmentTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ColumnHolder xHolder = Mockito.mock(ColumnHolder.class);",
        "line": 123,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDumpBitmap",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(xHolder.getIndexSupplier()).thenReturn(indexSupplier);",
        "line": 136,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDumpBitmap",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "yHolder",
    "variableType": "ColumnHolder",
    "mockedClass": "ColumnHolder",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DumpSegmentTest.java",
      "className": "DumpSegmentTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ColumnHolder yHolder = Mockito.mock(ColumnHolder.class);",
        "line": 124,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDumpBitmap",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "injector",
    "variableType": "Injector",
    "mockedClass": "Injector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DumpSegmentTest.java",
      "className": "DumpSegmentTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Injector injector = Mockito.mock(Injector.class);",
        "line": 119,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDumpBitmap",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(injector.getInstance(Key.get(ObjectMapper.class, Json.class))).thenReturn(mapper);",
        "line": 129,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDumpBitmap",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "injector",
    "variableType": "Injector",
    "mockedClass": "Injector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DumpSegmentTest.java",
      "className": "DumpSegmentTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Injector injector = Mockito.mock(Injector.class);",
        "line": 155,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDumpNestedColumn",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(injector.getInstance(Key.get(ObjectMapper.class, Json.class))).thenReturn(mapper);",
        "line": 164,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDumpNestedColumn",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(injector.getInstance(DefaultColumnFormatConfig.class)).thenReturn(new DefaultColumnFormatConfig(null));",
        "line": 165,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDumpNestedColumn",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "injector",
    "variableType": "Injector",
    "mockedClass": "Injector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\DumpSegmentTest.java",
      "className": "DumpSegmentTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Injector injector = Mockito.mock(Injector.class);",
        "line": 195,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDumpNestedColumnPath",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(injector.getInstance(Key.get(ObjectMapper.class, Json.class))).thenReturn(mapper);",
        "line": 204,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDumpNestedColumnPath",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(injector.getInstance(DefaultColumnFormatConfig.class)).thenReturn(new DefaultColumnFormatConfig(null));",
        "line": 205,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDumpNestedColumnPath",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "injector",
    "variableType": "Injector",
    "mockedClass": "Injector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.cli",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\cli\\ValidateSegmentsTest.java",
      "className": "ValidateSegmentsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Injector injector = Mockito.mock(Injector.class);",
        "line": 89,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testValidateSegments",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(injector.getInstance(IndexIO.class)).thenReturn(bob.getIndexIO());",
        "line": 90,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testValidateSegments",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "response",
    "variableType": "HttpServletResponse",
    "mockedClass": "HttpServletResponse",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\server\\AsyncQueryForwardingServletTest.java",
      "className": "AsyncQueryForwardingServletTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HttpServletResponse response = Mockito.mock(HttpServletResponse.class);",
        "line": 269,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleExceptionWithFilterDisabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(response.getOutputStream()).thenReturn(outputStream);",
        "line": 271,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleExceptionWithFilterDisabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockMapper",
    "variableType": "ObjectMapper",
    "mockedClass": "ObjectMapper",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\server\\AsyncQueryForwardingServletTest.java",
      "className": "AsyncQueryForwardingServletTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ObjectMapper mockMapper = Mockito.mock(ObjectMapper.class);",
        "line": 268,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleExceptionWithFilterDisabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockMapper).writeValue(ArgumentMatchers.eq(outputStream), captor.capture());",
        "line": 289,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleExceptionWithFilterDisabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "outputStream",
    "variableType": "ServletOutputStream",
    "mockedClass": "ServletOutputStream",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\server\\AsyncQueryForwardingServletTest.java",
      "className": "AsyncQueryForwardingServletTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServletOutputStream outputStream = Mockito.mock(ServletOutputStream.class);",
        "line": 270,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleExceptionWithFilterDisabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "response",
    "variableType": "HttpServletResponse",
    "mockedClass": "HttpServletResponse",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\server\\AsyncQueryForwardingServletTest.java",
      "className": "AsyncQueryForwardingServletTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HttpServletResponse response = Mockito.mock(HttpServletResponse.class);",
        "line": 301,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleExceptionWithFilterEnabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(response.getOutputStream()).thenReturn(outputStream);",
        "line": 303,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleExceptionWithFilterEnabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockMapper",
    "variableType": "ObjectMapper",
    "mockedClass": "ObjectMapper",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\server\\AsyncQueryForwardingServletTest.java",
      "className": "AsyncQueryForwardingServletTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ObjectMapper mockMapper = Mockito.mock(ObjectMapper.class);",
        "line": 300,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleExceptionWithFilterEnabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockMapper).writeValue(ArgumentMatchers.eq(outputStream), captor.capture());",
        "line": 334,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleExceptionWithFilterEnabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "outputStream",
    "variableType": "ServletOutputStream",
    "mockedClass": "ServletOutputStream",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\server\\AsyncQueryForwardingServletTest.java",
      "className": "AsyncQueryForwardingServletTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServletOutputStream outputStream = Mockito.mock(ServletOutputStream.class);",
        "line": 302,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleExceptionWithFilterEnabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "response",
    "variableType": "HttpServletResponse",
    "mockedClass": "HttpServletResponse",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\server\\AsyncQueryForwardingServletTest.java",
      "className": "AsyncQueryForwardingServletTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HttpServletResponse response = Mockito.mock(HttpServletResponse.class);",
        "line": 347,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleExceptionWithFilterEnabledButMessageMatchAllowedRegex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(response.getOutputStream()).thenReturn(outputStream);",
        "line": 349,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleExceptionWithFilterEnabledButMessageMatchAllowedRegex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockMapper",
    "variableType": "ObjectMapper",
    "mockedClass": "ObjectMapper",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\server\\AsyncQueryForwardingServletTest.java",
      "className": "AsyncQueryForwardingServletTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ObjectMapper mockMapper = Mockito.mock(ObjectMapper.class);",
        "line": 346,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleExceptionWithFilterEnabledButMessageMatchAllowedRegex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockMapper).writeValue(ArgumentMatchers.eq(outputStream), captor.capture());",
        "line": 380,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleExceptionWithFilterEnabledButMessageMatchAllowedRegex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "outputStream",
    "variableType": "ServletOutputStream",
    "mockedClass": "ServletOutputStream",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\server\\AsyncQueryForwardingServletTest.java",
      "className": "AsyncQueryForwardingServletTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServletOutputStream outputStream = Mockito.mock(ServletOutputStream.class);",
        "line": 348,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleExceptionWithFilterEnabledButMessageMatchAllowedRegex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "request",
    "variableType": "HttpServletRequest",
    "mockedClass": "HttpServletRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\server\\AsyncQueryForwardingServletTest.java",
      "className": "AsyncQueryForwardingServletTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HttpServletRequest request = Mockito.mock(HttpServletRequest.class);",
        "line": 393,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleQueryParseExceptionWithFilterDisabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "response",
    "variableType": "HttpServletResponse",
    "mockedClass": "HttpServletResponse",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\server\\AsyncQueryForwardingServletTest.java",
      "className": "AsyncQueryForwardingServletTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HttpServletResponse response = Mockito.mock(HttpServletResponse.class);",
        "line": 394,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleQueryParseExceptionWithFilterDisabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(response.getOutputStream()).thenReturn(outputStream);",
        "line": 396,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleQueryParseExceptionWithFilterDisabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockMapper",
    "variableType": "ObjectMapper",
    "mockedClass": "ObjectMapper",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\server\\AsyncQueryForwardingServletTest.java",
      "className": "AsyncQueryForwardingServletTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ObjectMapper mockMapper = Mockito.mock(ObjectMapper.class);",
        "line": 392,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleQueryParseExceptionWithFilterDisabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockMapper).writeValue(ArgumentMatchers.eq(outputStream), captor.capture());",
        "line": 414,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleQueryParseExceptionWithFilterDisabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "outputStream",
    "variableType": "ServletOutputStream",
    "mockedClass": "ServletOutputStream",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\server\\AsyncQueryForwardingServletTest.java",
      "className": "AsyncQueryForwardingServletTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServletOutputStream outputStream = Mockito.mock(ServletOutputStream.class);",
        "line": 395,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleQueryParseExceptionWithFilterDisabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "request",
    "variableType": "HttpServletRequest",
    "mockedClass": "HttpServletRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\server\\AsyncQueryForwardingServletTest.java",
      "className": "AsyncQueryForwardingServletTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HttpServletRequest request = Mockito.mock(HttpServletRequest.class);",
        "line": 426,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleQueryParseExceptionWithFilterEnabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "response",
    "variableType": "HttpServletResponse",
    "mockedClass": "HttpServletResponse",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\server\\AsyncQueryForwardingServletTest.java",
      "className": "AsyncQueryForwardingServletTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HttpServletResponse response = Mockito.mock(HttpServletResponse.class);",
        "line": 427,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleQueryParseExceptionWithFilterEnabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(response.getOutputStream()).thenReturn(outputStream);",
        "line": 429,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleQueryParseExceptionWithFilterEnabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockMapper",
    "variableType": "ObjectMapper",
    "mockedClass": "ObjectMapper",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\server\\AsyncQueryForwardingServletTest.java",
      "className": "AsyncQueryForwardingServletTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ObjectMapper mockMapper = Mockito.mock(ObjectMapper.class);",
        "line": 425,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleQueryParseExceptionWithFilterEnabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockMapper).writeValue(ArgumentMatchers.eq(outputStream), captor.capture());",
        "line": 460,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleQueryParseExceptionWithFilterEnabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "outputStream",
    "variableType": "ServletOutputStream",
    "mockedClass": "ServletOutputStream",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\server\\AsyncQueryForwardingServletTest.java",
      "className": "AsyncQueryForwardingServletTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServletOutputStream outputStream = Mockito.mock(ServletOutputStream.class);",
        "line": 428,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleQueryParseExceptionWithFilterEnabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "request",
    "variableType": "HttpServletRequest",
    "mockedClass": "HttpServletRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\server\\AsyncQueryForwardingServletTest.java",
      "className": "AsyncQueryForwardingServletTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HttpServletRequest request = Mockito.mock(HttpServletRequest.class);",
        "line": 473,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleQueryParseExceptionWithFilterEnabledButMessageMatchAllowedRegex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "response",
    "variableType": "HttpServletResponse",
    "mockedClass": "HttpServletResponse",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\server\\AsyncQueryForwardingServletTest.java",
      "className": "AsyncQueryForwardingServletTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HttpServletResponse response = Mockito.mock(HttpServletResponse.class);",
        "line": 474,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleQueryParseExceptionWithFilterEnabledButMessageMatchAllowedRegex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(response.getOutputStream()).thenReturn(outputStream);",
        "line": 476,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleQueryParseExceptionWithFilterEnabledButMessageMatchAllowedRegex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockMapper",
    "variableType": "ObjectMapper",
    "mockedClass": "ObjectMapper",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\server\\AsyncQueryForwardingServletTest.java",
      "className": "AsyncQueryForwardingServletTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ObjectMapper mockMapper = Mockito.mock(ObjectMapper.class);",
        "line": 472,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleQueryParseExceptionWithFilterEnabledButMessageMatchAllowedRegex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(mockMapper).writeValue(ArgumentMatchers.eq(outputStream), captor.capture());",
        "line": 507,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleQueryParseExceptionWithFilterEnabledButMessageMatchAllowedRegex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "outputStream",
    "variableType": "ServletOutputStream",
    "mockedClass": "ServletOutputStream",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\server\\AsyncQueryForwardingServletTest.java",
      "className": "AsyncQueryForwardingServletTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServletOutputStream outputStream = Mockito.mock(ServletOutputStream.class);",
        "line": 475,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testHandleQueryParseExceptionWithFilterEnabledButMessageMatchAllowedRegex",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "proxyRequestMock",
    "variableType": "Request",
    "mockedClass": "Request",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Other Methods\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.server",
      "filePath": "C:\\java tool\\Apache\\druid\\services\\src\\test\\java\\org\\apache\\druid\\server\\AsyncQueryForwardingServletTest.java",
      "className": "AsyncQueryForwardingServletTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Request proxyRequestMock = Mockito.spy(Request.class);",
        "line": 593,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "verifyServletCallsForQuery",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "serverConfig",
    "variableType": "ServerConfig",
    "mockedClass": "ServerConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.sql.avatica",
      "filePath": "C:\\java tool\\Apache\\druid\\sql\\src\\test\\java\\org\\apache\\druid\\sql\\avatica\\ErrorHandlerTest.java",
      "className": "ErrorHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServerConfig serverConfig = Mockito.mock(ServerConfig.class);",
        "line": 37,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testErrorHandlerSanitizesErrorAsExpected",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(serverConfig.getErrorResponseTransformStrategy()).thenReturn(emptyAllowedRegexErrorResponseTransformStrategy);",
        "line": 41,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testErrorHandlerSanitizesErrorAsExpected",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serverConfig",
    "variableType": "ServerConfig",
    "mockedClass": "ServerConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.sql.avatica",
      "filePath": "C:\\java tool\\Apache\\druid\\sql\\src\\test\\java\\org\\apache\\druid\\sql\\avatica\\ErrorHandlerTest.java",
      "className": "ErrorHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServerConfig serverConfig = Mockito.mock(ServerConfig.class);",
        "line": 64,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testErrorHandlerHasAffectingErrorResponseTransformStrategyReturnsTrueWhenNotUsingNoErrorResponseTransformStrategy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(serverConfig.getErrorResponseTransformStrategy()).thenReturn(emptyAllowedRegexErrorResponseTransformStrategy);",
        "line": 68,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testErrorHandlerHasAffectingErrorResponseTransformStrategyReturnsTrueWhenNotUsingNoErrorResponseTransformStrategy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serverConfig",
    "variableType": "ServerConfig",
    "mockedClass": "ServerConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.sql.avatica",
      "filePath": "C:\\java tool\\Apache\\druid\\sql\\src\\test\\java\\org\\apache\\druid\\sql\\avatica\\ErrorHandlerTest.java",
      "className": "ErrorHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServerConfig serverConfig = Mockito.mock(ServerConfig.class);",
        "line": 85,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testErrorHandlerHandlesNonSanitizableExceptionCorrectly",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(serverConfig.getErrorResponseTransformStrategy()).thenReturn(emptyAllowedRegexErrorResponseTransformStrategy);",
        "line": 89,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testErrorHandlerHandlesNonSanitizableExceptionCorrectly",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "relDataType",
    "variableType": "RelDataType",
    "mockedClass": "RelDataType",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Helper\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.sql.calcite.expression",
      "filePath": "C:\\java tool\\Apache\\druid\\sql\\src\\test\\java\\org\\apache\\druid\\sql\\calcite\\expression\\OperatorConversionsTest.java",
      "className": "DefaultOperandTypeCheckerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "RelDataType relDataType = Mockito.mock(RelDataType.class);",
        "line": 475,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockCallBinding",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(relDataType.isNullable()).thenReturn(true);",
        "line": 478,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockCallBinding",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(relDataType.isNullable()).thenReturn(false);",
        "line": 480,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockCallBinding",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(relDataType.getSqlTypeName()).thenReturn(operand.type);",
        "line": 484,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockCallBinding",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "node",
    "variableType": "SqlNode",
    "mockedClass": "SqlNode",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Helper\n— Local Assignment in Helper Method\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.sql.calcite.expression",
      "filePath": "C:\\java tool\\Apache\\druid\\sql\\src\\test\\java\\org\\apache\\druid\\sql\\calcite\\expression\\OperatorConversionsTest.java",
      "className": "DefaultOperandTypeCheckerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final SqlNode node;",
        "line": 464,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockCallBinding",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "node = Mockito.mock(SqlLiteral.class);",
        "line": 466,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockCallBinding",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "node = Mockito.mock(SqlNode.class);",
        "line": 469,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockCallBinding",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(node.getKind()).thenReturn(SqlKind.LITERAL);",
        "line": 467,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockCallBinding",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "// Setting this as SqlUtil.isLiteral makes a call on\r\n// node.getKind() and without this change would\r\n// return a NPE\r\nMockito.when(node.getKind()).thenReturn(SqlKind.OTHER_FUNCTION);",
        "line": 473,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockCallBinding",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "pos",
    "variableType": "SqlParserPos",
    "mockedClass": "SqlParserPos",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Helper\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.sql.calcite.expression",
      "filePath": "C:\\java tool\\Apache\\druid\\sql\\src\\test\\java\\org\\apache\\druid\\sql\\calcite\\expression\\OperatorConversionsTest.java",
      "className": "DefaultOperandTypeCheckerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SqlParserPos pos = Mockito.mock(SqlParserPos.class);",
        "line": 489,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockCallBinding",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(pos.plusAll((SqlNode[]) ArgumentMatchers.any())).thenReturn(pos);",
        "line": 491,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockCallBinding",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "validator",
    "variableType": "SqlValidator",
    "mockedClass": "SqlValidator",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Helper\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.sql.calcite.expression",
      "filePath": "C:\\java tool\\Apache\\druid\\sql\\src\\test\\java\\org\\apache\\druid\\sql\\calcite\\expression\\OperatorConversionsTest.java",
      "className": "DefaultOperandTypeCheckerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SqlValidator validator = Mockito.mock(SqlValidator.class);",
        "line": 460,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockCallBinding",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(validator.getTypeFactory()).thenReturn(new SqlTypeFactoryImpl(DruidTypeSystem.INSTANCE));",
        "line": 461,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockCallBinding",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(validator.deriveType(ArgumentMatchers.any(), ArgumentMatchers.eq(node))).thenReturn(relDataType);",
        "line": 482,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockCallBinding",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(validator.newValidationError(ArgumentMatchers.any(), ArgumentMatchers.any())).thenAnswer((Answer<CalciteContextException>) invocationOnMock -> new CalciteContextException(StringUtils.format(\"Exception in test for operator[%s]\", function.getName()), invocationOnMock.getArgument(1, ExInst.class).ex()));",
        "line": 499,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockCallBinding",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "operand",
    "variableType": "OperandSpec",
    "mockedClass": "OperandSpec",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Helper\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.sql.calcite.expression",
      "filePath": "C:\\java tool\\Apache\\druid\\sql\\src\\test\\java\\org\\apache\\druid\\sql\\calcite\\expression\\OperatorConversionsTest.java",
      "className": "DefaultOperandTypeCheckerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "for (OperandSpec operand : actualOperands) {\r\n    final SqlNode node;\r\n    if (operand.isLiteral) {\r\n        node = Mockito.mock(SqlLiteral.class);\r\n        Mockito.when(node.getKind()).thenReturn(SqlKind.LITERAL);\r\n    } else {\r\n        node = Mockito.mock(SqlNode.class);\r\n        // Setting this as SqlUtil.isLiteral makes a call on\r\n        // node.getKind() and without this change would\r\n        // return a NPE\r\n        Mockito.when(node.getKind()).thenReturn(SqlKind.OTHER_FUNCTION);\r\n    }\r\n    RelDataType relDataType = Mockito.mock(RelDataType.class);\r\n    if (operand.isNullable) {\r\n        Mockito.when(relDataType.isNullable()).thenReturn(true);\r\n    } else {\r\n        Mockito.when(relDataType.isNullable()).thenReturn(false);\r\n    }\r\n    Mockito.when(validator.deriveType(ArgumentMatchers.any(), ArgumentMatchers.eq(node))).thenReturn(relDataType);\r\n    Mockito.when(relDataType.getSqlTypeName()).thenReturn(operand.type);\r\n    operands.add(node);\r\n}",
        "line": 463,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockCallBinding",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "callBinding",
    "variableType": "SqlCallBinding",
    "mockedClass": "SqlCallBinding",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Helper\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.sql.calcite.expression",
      "filePath": "C:\\java tool\\Apache\\druid\\sql\\src\\test\\java\\org\\apache\\druid\\sql\\calcite\\expression\\OperatorConversionsTest.java",
      "className": "DefaultOperandTypeCheckerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SqlCallBinding callBinding = new SqlCallBinding(validator, Mockito.mock(SqlValidatorScope.class), function.createCall(pos, operands));",
        "line": 493,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockCallBinding",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "plannerContext",
    "variableType": "PlannerContext",
    "mockedClass": "PlannerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in @Before\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.sql.calcite.rule",
      "filePath": "C:\\java tool\\Apache\\druid\\sql\\src\\test\\java\\org\\apache\\druid\\sql\\calcite\\rule\\DruidJoinRuleTest.java",
      "className": "DruidJoinRuleTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "PlannerContext plannerContext = Mockito.mock(PlannerContext.class);",
        "line": 70,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(plannerContext.queryContext()).thenReturn(QueryContext.empty());",
        "line": 71,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(plannerContext.getJoinAlgorithm()).thenReturn(JoinAlgorithm.BROADCAST);",
        "line": 72,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ]
  },
  {
    "variableName": "DEFAULT_CONTEXT",
    "variableType": "PlannerContext",
    "mockedClass": "PlannerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.sql.calcite.rule",
      "filePath": "C:\\java tool\\Apache\\druid\\sql\\src\\test\\java\\org\\apache\\druid\\sql\\calcite\\rule\\DruidLogicalValuesRuleTest.java",
      "className": "DruidLogicalValuesRuleTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final PlannerContext DEFAULT_CONTEXT = Mockito.mock(PlannerContext.class);",
        "line": 56,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "literal",
    "variableType": "RexLiteral",
    "mockedClass": "RexLiteral",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.druid.sql.calcite.rule",
      "filePath": "C:\\java tool\\Apache\\druid\\sql\\src\\test\\java\\org\\apache\\druid\\sql\\calcite\\rule\\DruidLogicalValuesRuleTest.java",
      "className": "GetValueFromLiteralSimpleTypesTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final RexLiteral literal = Mockito.spy(makeLiteral(val, sqlTypeName, javaType));",
        "line": 91,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetValueFromLiteral",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(literal, Mockito.times(1)).getType();",
        "line": 95,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetValueFromLiteral",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "DEFAULT_CONTEXT",
    "variableType": "PlannerContext",
    "mockedClass": "PlannerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.sql.calcite.rule",
      "filePath": "C:\\java tool\\Apache\\druid\\sql\\src\\test\\java\\org\\apache\\druid\\sql\\calcite\\rule\\DruidLogicalValuesRuleTest.java",
      "className": "DruidLogicalValuesRuleTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final PlannerContext DEFAULT_CONTEXT = Mockito.mock(PlannerContext.class);",
        "line": 56,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "DEFAULT_CONTEXT",
    "variableType": "PlannerContext",
    "mockedClass": "PlannerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.sql.calcite.rule",
      "filePath": "C:\\java tool\\Apache\\druid\\sql\\src\\test\\java\\org\\apache\\druid\\sql\\calcite\\rule\\DruidLogicalValuesRuleTest.java",
      "className": "GetValueFromLiteralOtherTypesTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final PlannerContext DEFAULT_CONTEXT = Mockito.mock(PlannerContext.class);",
        "line": 110,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(DEFAULT_CONTEXT.getTimeZone()).thenReturn(TIME_ZONE);",
        "line": 121,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@BeforeClass"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockOperatorTable",
    "variableType": "DruidOperatorTable",
    "mockedClass": "DruidOperatorTable",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.sql.calcite.schema",
      "filePath": "C:\\java tool\\Apache\\druid\\sql\\src\\test\\java\\org\\apache\\druid\\sql\\calcite\\schema\\InformationSchemaTest.java",
      "className": "InformationSchemaTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DruidOperatorTable mockOperatorTable = Mockito.mock(DruidOperatorTable.class);",
        "line": 128,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testScanRoutinesTableWithCustomOperators",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockOperatorTable.getOperatorList()).thenReturn(sqlOperators);",
        "line": 129,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testScanRoutinesTableWithCustomOperators",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockOperatorTable",
    "variableType": "DruidOperatorTable",
    "mockedClass": "DruidOperatorTable",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Mock Creation in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.druid.sql.calcite.schema",
      "filePath": "C:\\java tool\\Apache\\druid\\sql\\src\\test\\java\\org\\apache\\druid\\sql\\calcite\\schema\\InformationSchemaTest.java",
      "className": "InformationSchemaTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DruidOperatorTable mockOperatorTable = Mockito.mock(DruidOperatorTable.class);",
        "line": 149,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testScanRoutinesTableWithAnEmptyOperatorTable",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockOperatorTable.getOperatorList()).thenReturn(emptyOperatorList);",
        "line": 153,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testScanRoutinesTableWithAnEmptyOperatorTable",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ]
  }
]
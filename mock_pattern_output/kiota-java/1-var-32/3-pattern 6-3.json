[
  {
    "variableName": "mockSerializationWriter",
    "variableType": "var",
    "mockedClass": "SerializationWriter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "com.microsoft.kiota.serialization",
      "filePath": "C:\\java tool\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\SerializationHelpersTest.java",
      "className": "SerializationHelpersTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final var mockSerializationWriter = mock(SerializationWriter.class);",
        "line": 48,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "serializesObject",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"{'id':'123'}\".getBytes(_charset)));",
        "line": 49,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "serializesObject",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(mockSerializationWriter, times(1)).writeObjectValue(eq(\"\"), any(Parsable.class));",
        "line": 65,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "serializesObject",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "mockSerializationWriter",
    "variableType": "var",
    "mockedClass": "SerializationWriter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "com.microsoft.kiota.serialization",
      "filePath": "C:\\java tool\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\SerializationHelpersTest.java",
      "className": "SerializationHelpersTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final var mockSerializationWriter = mock(SerializationWriter.class);",
        "line": 70,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "serializesObjectCollection",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"[{'id':'123'}]\".getBytes(_charset)));",
        "line": 71,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "serializesObjectCollection",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(mockSerializationWriter, times(1)).writeCollectionOfObjectValues(eq(\"\"), any());",
        "line": 92,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "serializesObjectCollection",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "mockParseNode",
    "variableType": "var",
    "mockedClass": "ParseNode",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "com.microsoft.kiota.http",
      "filePath": "C:\\java tool\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
      "className": "OkHttpRequestAdapterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final var mockParseNode = mock(ParseNode.class);",
        "line": 267,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "throwsAPIException",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@ParameterizedTest",
            "@MethodSource"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);",
        "line": 268,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "throwsAPIException",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@ParameterizedTest",
            "@MethodSource"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);",
        "line": 290,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "throwsAPIException",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@ParameterizedTest",
            "@MethodSource"
          ]
        }
      }
    ],
    "pattern_id": 6
  }
]
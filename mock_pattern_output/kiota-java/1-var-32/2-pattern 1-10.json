[
  {
    "variableName": "mockSerializationWriterFactory",
    "variableType": "var",
    "mockedClass": "SerializationWriterFactory",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.microsoft.kiota.serialization",
      "filePath": "C:\\java tool\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\SerializationHelpersTest.java",
      "className": "SerializationHelpersTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);",
        "line": 51,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "serializesObject",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);",
        "line": 52,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "serializesObject",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "mockSerializationWriterFactory",
    "variableType": "var",
    "mockedClass": "SerializationWriterFactory",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.microsoft.kiota.serialization",
      "filePath": "C:\\java tool\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\SerializationHelpersTest.java",
      "className": "SerializationHelpersTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);",
        "line": 73,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "serializesObjectCollection",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);",
        "line": 74,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "serializesObjectCollection",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "tokenCredential",
    "variableType": "var",
    "mockedClass": "TokenCredential",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.microsoft.kiota.authentication",
      "filePath": "C:\\java tool\\Microsoft\\kiota-java\\components\\authentication\\azure\\src\\test\\java\\com\\microsoft\\kiota\\authentication\\AzureIdentityAccessTokenProviderTest.java",
      "className": "AzureIdentityAccessTokenProviderTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "var tokenCredential = mock(TokenCredential.class);",
        "line": 32,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testLocalhostHttpUrlIsValid",
          "methodAnnotations": [
            "@ParameterizedTest",
            "@ValueSource"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(tokenCredential.getTokenSync(any(TokenRequestContext.class))).thenReturn(new AccessToken(\"token\", null));",
        "line": 33,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testLocalhostHttpUrlIsValid",
          "methodAnnotations": [
            "@ParameterizedTest",
            "@ValueSource"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "mockEntity",
    "variableType": "var",
    "mockedClass": "Parsable",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.microsoft.kiota.http",
      "filePath": "C:\\java tool\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
      "className": "OkHttpRequestAdapterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final var mockEntity = mock(Parsable.class);",
        "line": 170,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendReturnsNullOnNoContent",
          "methodAnnotations": [
            "@ParameterizedTest",
            "@ValueSource"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());",
        "line": 171,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendReturnsNullOnNoContent",
          "methodAnnotations": [
            "@ParameterizedTest",
            "@ValueSource"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "mockFactory",
    "variableType": "var",
    "mockedClass": "ParseNodeFactory",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.microsoft.kiota.http",
      "filePath": "C:\\java tool\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
      "className": "OkHttpRequestAdapterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final var mockFactory = mock(ParseNodeFactory.class);",
        "line": 205,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendReturnsObjectOnContent",
          "methodAnnotations": [
            "@ParameterizedTest",
            "@ValueSource"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);",
        "line": 206,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendReturnsObjectOnContent",
          "methodAnnotations": [
            "@ParameterizedTest",
            "@ValueSource"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(mockFactory.getValidContentType()).thenReturn(\"application/json\");",
        "line": 208,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendReturnsObjectOnContent",
          "methodAnnotations": [
            "@ParameterizedTest",
            "@ValueSource"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "mockParseNode",
    "variableType": "var",
    "mockedClass": "ParseNode",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.microsoft.kiota.http",
      "filePath": "C:\\java tool\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
      "className": "OkHttpRequestAdapterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final var mockParseNode = mock(ParseNode.class);",
        "line": 203,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendReturnsObjectOnContent",
          "methodAnnotations": [
            "@ParameterizedTest",
            "@ValueSource"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);",
        "line": 204,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendReturnsObjectOnContent",
          "methodAnnotations": [
            "@ParameterizedTest",
            "@ValueSource"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "mockEntity",
    "variableType": "var",
    "mockedClass": "Parsable",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.microsoft.kiota.http",
      "filePath": "C:\\java tool\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
      "className": "OkHttpRequestAdapterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final var mockEntity = mock(Parsable.class);",
        "line": 201,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendReturnsObjectOnContent",
          "methodAnnotations": [
            "@ParameterizedTest",
            "@ValueSource"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());",
        "line": 202,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendReturnsObjectOnContent",
          "methodAnnotations": [
            "@ParameterizedTest",
            "@ValueSource"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "mockParsableFactory",
    "variableType": "var",
    "mockedClass": "ParsableFactory",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.microsoft.kiota.http",
      "filePath": "C:\\java tool\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
      "className": "OkHttpRequestAdapterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final var mockParsableFactory = mock(ParsableFactory.class);",
        "line": 265,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "throwsAPIException",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@ParameterizedTest",
            "@MethodSource"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);",
        "line": 266,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "throwsAPIException",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@ParameterizedTest",
            "@MethodSource"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "mockFactory",
    "variableType": "var",
    "mockedClass": "ParseNodeFactory",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.microsoft.kiota.http",
      "filePath": "C:\\java tool\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
      "className": "OkHttpRequestAdapterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final var mockFactory = mock(ParseNodeFactory.class);",
        "line": 269,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "throwsAPIException",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@ParameterizedTest",
            "@MethodSource"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);",
        "line": 270,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "throwsAPIException",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@ParameterizedTest",
            "@MethodSource"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(mockFactory.getValidContentType()).thenReturn(\"application/json\");",
        "line": 272,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "throwsAPIException",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@ParameterizedTest",
            "@MethodSource"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "mockEntity",
    "variableType": "var",
    "mockedClass": "Parsable",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.microsoft.kiota.http",
      "filePath": "C:\\java tool\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
      "className": "OkHttpRequestAdapterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final var mockEntity = mock(Parsable.class);",
        "line": 263,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "throwsAPIException",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@ParameterizedTest",
            "@MethodSource"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());",
        "line": 264,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "throwsAPIException",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@ParameterizedTest",
            "@MethodSource"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
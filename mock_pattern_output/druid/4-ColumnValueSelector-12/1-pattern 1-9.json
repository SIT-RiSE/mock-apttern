[
  {
    "variableName": "columnValueSelector",
    "variableType": "ColumnValueSelector",
    "mockedClass": "ColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayDoubleGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayDoubleGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ColumnValueSelector columnValueSelector = Mockito.mock(ColumnValueSelector.class);",
        "line": 110,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanity",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(columnValueSelector.getObject()).thenReturn(ImmutableList.of(1.0, 2.0));",
        "line": 111,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanity",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "columnValueSelector",
    "variableType": "ColumnValueSelector",
    "mockedClass": "ColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayDoubleGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayDoubleGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ColumnValueSelector columnValueSelector = Mockito.mock(ColumnValueSelector.class);",
        "line": 127,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionary",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(columnValueSelector.getObject()).thenReturn(ImmutableList.of(4.0, 2.0));",
        "line": 128,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionary",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "columnValueSelector",
    "variableType": "ColumnValueSelector",
    "mockedClass": "ColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayDoubleGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayDoubleGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ColumnValueSelector columnValueSelector = Mockito.mock(ColumnValueSelector.class);",
        "line": 143,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionaryWithObjects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(columnValueSelector.getObject()).thenReturn(new Object[] { 4.0D, 2.0D });",
        "line": 144,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionaryWithObjects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "columnValueSelector",
    "variableType": "ColumnValueSelector",
    "mockedClass": "ColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayLongGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayLongGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ColumnValueSelector columnValueSelector = Mockito.mock(ColumnValueSelector.class);",
        "line": 113,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanity",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(columnValueSelector.getObject()).thenReturn(ImmutableList.of(1L, 2L));",
        "line": 114,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanity",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "columnValueSelector",
    "variableType": "ColumnValueSelector",
    "mockedClass": "ColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayLongGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayLongGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ColumnValueSelector columnValueSelector = Mockito.mock(ColumnValueSelector.class);",
        "line": 130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionary",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(columnValueSelector.getObject()).thenReturn(ImmutableList.of(4L, 2L));",
        "line": 131,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionary",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "columnValueSelector",
    "variableType": "ColumnValueSelector",
    "mockedClass": "ColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayLongGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayLongGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ColumnValueSelector columnValueSelector = Mockito.mock(ColumnValueSelector.class);",
        "line": 146,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionaryWithObjects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(columnValueSelector.getObject()).thenReturn(new Object[] { 4L, 2L });",
        "line": 147,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionaryWithObjects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "columnValueSelector",
    "variableType": "ColumnValueSelector",
    "mockedClass": "ColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayStringGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayStringGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ColumnValueSelector columnValueSelector = Mockito.mock(ColumnValueSelector.class);",
        "line": 117,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanity",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(columnValueSelector.getObject()).thenReturn(ImmutableList.of(\"a\", \"b\"));",
        "line": 118,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSanity",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "columnValueSelector",
    "variableType": "ColumnValueSelector",
    "mockedClass": "ColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayStringGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayStringGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ColumnValueSelector columnValueSelector = Mockito.mock(ColumnValueSelector.class);",
        "line": 134,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionary",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(columnValueSelector.getObject()).thenReturn(ImmutableList.of(\"f\", \"a\"));",
        "line": 135,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionary",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "columnValueSelector",
    "variableType": "ColumnValueSelector",
    "mockedClass": "ColumnValueSelector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.druid.query.groupby.epinephelinae.column",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\query\\groupby\\epinephelinae\\column\\ArrayStringGroupByColumnSelectorStrategyTest.java",
      "className": "ArrayStringGroupByColumnSelectorStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ColumnValueSelector columnValueSelector = Mockito.mock(ColumnValueSelector.class);",
        "line": 150,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionaryWithObjects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(columnValueSelector.getObject()).thenReturn(new Object[] { \"f\", \"a\" });",
        "line": 151,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddingInDictionaryWithObjects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
[
  {
    "variableName": "monitorScheduler",
    "variableType": "MonitorScheduler",
    "mockedClass": "MonitorScheduler",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.worker.shuffle",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\worker\\shuffle\\ShuffleModuleTest.java",
      "className": "ShuffleModuleTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final MonitorScheduler monitorScheduler = Mockito.mock(MonitorScheduler.class);",
        "line": 51,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetShuffleMetricsWhenShuffleMonitorExists",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(monitorScheduler.findMonitor(ShuffleMonitor.class)).thenReturn(Optional.of(shuffleMonitor));",
        "line": 52,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetShuffleMetricsWhenShuffleMonitorExists",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "monitorScheduler",
    "variableType": "MonitorScheduler",
    "mockedClass": "MonitorScheduler",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.worker.shuffle",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\worker\\shuffle\\ShuffleModuleTest.java",
      "className": "ShuffleModuleTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final MonitorScheduler monitorScheduler = Mockito.mock(MonitorScheduler.class);",
        "line": 64,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetShuffleMetricsWithNoShuffleMonitor",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(monitorScheduler.findMonitor(ArgumentMatchers.eq(ShuffleMonitor.class))).thenReturn(Optional.empty());",
        "line": 65,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetShuffleMetricsWithNoShuffleMonitor",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
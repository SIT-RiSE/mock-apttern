[
  {
    "variableName": "target",
    "variableType": "WorkerSketchFetcher",
    "mockedClass": "WorkerSketchFetcher",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Declaration Attribute\n\u2014 Lazy-init via Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.druid.msq.exec",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\exec\\WorkerSketchFetcherTest.java",
      "className": "WorkerSketchFetcherTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private WorkerSketchFetcher target;",
        "line": 69,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = spy(new WorkerSketchFetcher(workerClient, workerTaskLauncher, true));",
        "line": 103,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_submitFetcherTask_parallelFetch",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = spy(new WorkerSketchFetcher(workerClient, workerTaskLauncher, true));",
        "line": 126,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_submitFetcherTask_sequentialFetch",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = spy(new WorkerSketchFetcher(workerClient, workerTaskLauncher, true));",
        "line": 154,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_sequentialMerge_nonCompleteInformation",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = spy(new WorkerSketchFetcher(workerClient, workerTaskLauncher, true));",
        "line": 169,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_inMemoryRetryEnabled_retryInvoked",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = spy(new WorkerSketchFetcher(workerClient, workerTaskLauncher, true));",
        "line": 198,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_SequentialRetryEnabled_retryInvoked",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = spy(new WorkerSketchFetcher(workerClient, workerTaskLauncher, false));",
        "line": 225,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_InMemoryRetryDisabled_multipleFailures",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = spy(new WorkerSketchFetcher(workerClient, workerTaskLauncher, false));",
        "line": 254,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_InMemoryRetryDisabled_singleFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = spy(new WorkerSketchFetcher(workerClient, workerTaskLauncher, false));",
        "line": 285,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_SequentialRetryDisabled_multipleFailures",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "target = spy(new WorkerSketchFetcher(workerClient, workerTaskLauncher, false));",
        "line": 317,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_SequentialRetryDisabled_singleFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 34
  }
]
[
  {
    "variableName": "segmentsMetadataManager",
    "variableType": "SegmentsMetadataManager",
    "mockedClass": "SegmentsMetadataManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 @Before\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillUnusedSegmentsTest.java",
      "className": "KillUnusedSegmentsTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate SegmentsMetadataManager segmentsMetadataManager;",
        "line": 77,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(segmentsMetadataManager.getUnusedSegmentIntervals(ArgumentMatchers.anyString(), ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.anyInt(), ArgumentMatchers.any())).thenAnswer(invocation -> {\r\n    DateTime minStartTime = invocation.getArgument(1);\r\n    DateTime maxEndTime = invocation.getArgument(2);\r\n    long maxEndMillis = maxEndTime.getMillis();\r\n    Long minStartMillis = minStartTime != null ? minStartTime.getMillis() : null;\r\n    List<Interval> unusedIntervals = unusedSegments.stream().map(DataSegment::getInterval).filter(i -> i.getEnd().getMillis() <= maxEndMillis && (null == minStartMillis || i.getStart().getMillis() >= minStartMillis)).collect(Collectors.toList());\r\n    int limit = invocation.getArgument(3);\r\n    return unusedIntervals.size() <= limit ? unusedIntervals : unusedIntervals.subList(0, limit);\r\n});",
        "line": 132,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ],
    "pattern_id": 7
  }
]
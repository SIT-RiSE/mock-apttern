[
  {
    "variableName": "taskActionClient",
    "variableType": "TaskActionClient",
    "mockedClass": "TaskActionClient",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.common.task.batch.parallel",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\common\\task\\batch\\parallel\\TombstoneHelperTest.java",
      "className": "TombstoneHelperTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private final TaskActionClient taskActionClient = Mockito.mock(TaskActionClient.class);",
        "line": 57,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "// Assume no used segments :\r\nMockito.when(taskActionClient.submit(any(TaskAction.class))).thenReturn(Collections.emptyList());",
        "line": 72,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "noTombstonesWhenNoDataInInputIntervalAndNoExistingSegments",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(TaskAction.class))).thenReturn(Collections.singletonList(existingUsedSegment));",
        "line": 106,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "tombstonesCreatedWhenNoDataInInputIntervalAndExistingSegments",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(TaskAction.class))).thenReturn(Collections.singletonList(existingUsedSegment));",
        "line": 140,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "tombstoneIntervalsCreatedForReplaceWhenReplaceIsContainedInUsedIntervals",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(TaskAction.class))).thenReturn(existingUsedSegments);",
        "line": 175,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "tombstoneIntervalsCreatedForReplaceWhenThereIsAGapInUsedIntervals",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(TaskAction.class))).thenReturn(Collections.singletonList(existingUsedSegment));",
        "line": 209,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "tombstoneIntervalsCreatedForReplaceWhenUsedIntervalsDonotAlign",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(TaskAction.class))).thenReturn(Collections.singletonList(existingUsedSegment));",
        "line": 238,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "tombstoneIntervalsCreatedForReplaceWhenUsedIntervalsAreCompletelyDisjoint",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(TaskAction.class))).thenReturn(Collections.singletonList(existingUsedSegment));",
        "line": 267,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTombstoneIntervalsCreatedForReplaceWhenDataLiesOnLeft",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(TaskAction.class))).thenReturn(Collections.singletonList(existingUsedSegment));",
        "line": 296,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTombstoneIntervalsCreatedForReplaceWhenDataLiesOnRight",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(TaskAction.class))).thenReturn(Collections.singletonList(existingUsedSegment));",
        "line": 328,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTombstoneIntervalsCreatedForReplaceWhenDataLiesInMiddle",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(TaskAction.class))).thenReturn(Collections.singletonList(existingUsedSegment));",
        "line": 360,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTombstoneIntervalsCreatedForReplaceWhenExistingGranularityIsEternity",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(TaskAction.class))).thenReturn(Collections.singletonList(existingUsedSegment));",
        "line": 392,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTombstoneIntervalsCreatedForReplaceWhenReplaceAll",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(RetrieveUsedSegmentsAction.class))).thenReturn(Collections.singletonList(existingUsedSegment));",
        "line": 427,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTombstoneSegmentsForReplaceWhenLockRevoked",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(taskActionClient.submit(any(LockListAction.class))).thenReturn(ImmutableList.of());",
        "line": 429,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTombstoneSegmentsForReplaceWhenLockRevoked",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
[
  {
    "variableName": "successfulHandler",
    "variableType": "InputRowHandler",
    "mockedClass": "HandlingInputRowIterator.InputRowHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 @Before\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.apache.druid.data.input",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\data\\input\\HandlingInputRowIteratorTest.java",
      "className": "PresentRowTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private InputRowHandler successfulHandler;",
        "line": 94,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "// Construct mock object\r\nsuccessfulHandler = mock(HandlingInputRowIterator.InputRowHandler.class);",
        "line": 101,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Method Stubs\r\nwhen(successfulHandler.handle(any(InputRow.class))).thenReturn(true);",
        "line": 103,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(successfulHandler, Mockito.times(1)).handle(INPUT_ROW1);",
        "line": 131,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "yieldsNullIfHandledByFirst",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(successfulHandler, Mockito.times(1)).handle(INPUT_ROW1);",
        "line": 141,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "yieldsNullIfHandledBySecond",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 15
  },
  {
    "variableName": "unsuccessfulHandler",
    "variableType": "InputRowHandler",
    "mockedClass": "HandlingInputRowIterator.InputRowHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 @Before\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.apache.druid.data.input",
      "filePath": "C:\\java tool\\Apache\\druid\\processing\\src\\test\\java\\org\\apache\\druid\\data\\input\\HandlingInputRowIteratorTest.java",
      "className": "PresentRowTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private InputRowHandler unsuccessfulHandler;",
        "line": 95,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "// Construct mock object\r\nunsuccessfulHandler = mock(HandlingInputRowIterator.InputRowHandler.class);",
        "line": 105,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Method Stubs\r\nwhen(unsuccessfulHandler.handle(any(InputRow.class))).thenReturn(false);",
        "line": 107,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(unsuccessfulHandler, Mockito.never()).handle(INPUT_ROW1);",
        "line": 115,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "hasNext",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(unsuccessfulHandler, Mockito.times(2)).handle(INPUT_ROW1);",
        "line": 123,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "yieldsNextIfUnhandled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(unsuccessfulHandler, Mockito.never()).handle(INPUT_ROW1);",
        "line": 132,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "yieldsNullIfHandledByFirst",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(unsuccessfulHandler, Mockito.times(1)).handle(INPUT_ROW1);",
        "line": 140,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "yieldsNullIfHandledBySecond",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 15
  }
]
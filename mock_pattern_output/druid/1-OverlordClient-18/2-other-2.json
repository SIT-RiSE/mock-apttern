[
  {
    "variableName": "overlordClient",
    "variableType": "OverlordClient",
    "mockedClass": "OverlordClient",
    "isReuseableMock": null,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\u2014 Global Init in @Before\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.druid.msq.sql.resources",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\multi-stage-query\\src\\test\\java\\org\\apache\\druid\\msq\\sql\\resources\\SqlStatementResourceTest.java",
      "className": "SqlStatementResourceTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate OverlordClient overlordClient;",
        "line": 390,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "overlordClient = Mockito.mock(OverlordClient.class);",
        "line": 703,
        "locate": "@Before",
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(overlordClient.taskStatus(taskIdNotFound)).thenReturn(settableFuture);",
        "line": 1130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTaskIdNotFound",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 41
  },
  {
    "variableName": "overlordClient",
    "variableType": "OverlordClient",
    "mockedClass": "OverlordClient",
    "isReuseableMock": null,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case\n\u2014 Other Methods",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\KillUnusedSegmentsTest.java",
      "className": "KillUnusedSegmentsTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate OverlordClient overlordClient;",
        "line": 79,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(overlordClient, Mockito.never()).runKillTask(anyString(), anyString(), any(Interval.class));",
        "line": 176,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunWithNoIntervalShouldNotKillAnySegments",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(overlordClient, Mockito.never()).runKillTask(anyString(), anyString(), any(Interval.class));",
        "line": 194,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRunWithSpecificDatasourceAndNoIntervalShouldNotKillAnySegments",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(overlordClient, Mockito.times(1)).runKillTask(ArgumentMatchers.anyString(), ArgumentMatchers.eq(DATASOURCE), ArgumentMatchers.eq(expectedKillInterval), ArgumentMatchers.eq(limit));",
        "line": 375,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "runAndVerifyKillInterval",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(overlordClient, Mockito.times(1)).runKillTask(ArgumentMatchers.anyString(), ArgumentMatchers.eq(DATASOURCE), ArgumentMatchers.eq(expectedKillInterval), ArgumentMatchers.eq(limit));",
        "line": 400,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "runAndVerifyKillIntervals",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(overlordClient, Mockito.never()).runKillTask(ArgumentMatchers.anyString(), ArgumentMatchers.anyString(), ArgumentMatchers.any(Interval.class), ArgumentMatchers.anyInt());",
        "line": 429,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "runAndVerifyNoKill",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 54
  }
]
[
  {
    "variableName": "mockClient",
    "variableType": "OverlordClient",
    "mockedClass": "OverlordClient",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.coordinator.duty",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\coordinator\\duty\\CompactSegmentsTest.java",
      "className": "CompactSegmentsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final OverlordClient mockClient = Mockito.mock(OverlordClient.class);",
        "line": 1088,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithGranularitySpecConflictWithActiveCompactionTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockClient.runTask(ArgumentMatchers.anyString(), payloadCaptor.capture())).thenReturn(Futures.immediateFuture(null));",
        "line": 1090,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithGranularitySpecConflictWithActiveCompactionTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockClient.taskStatuses(null, null, 0)).thenReturn(Futures.immediateFuture(CloseableIterators.withEmptyBaggage(ImmutableList.of(runningConflictCompactionTask).iterator())));",
        "line": 1092,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithGranularitySpecConflictWithActiveCompactionTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockClient.findLockedIntervals(ArgumentMatchers.any())).thenReturn(Futures.immediateFuture(Collections.emptyMap()));",
        "line": 1096,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithGranularitySpecConflictWithActiveCompactionTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockClient.cancelTask(conflictTaskId)).thenReturn(Futures.immediateFuture(null));",
        "line": 1098,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithGranularitySpecConflictWithActiveCompactionTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockClient.getTotalWorkerCapacity()).thenReturn(Futures.immediateFuture(new IndexingTotalWorkerCapacityInfo(0, 0)));",
        "line": 1100,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithGranularitySpecConflictWithActiveCompactionTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockClient.taskPayload(ArgumentMatchers.eq(conflictTaskId))).thenReturn(Futures.immediateFuture(runningConflictCompactionTaskPayload));",
        "line": 1102,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithGranularitySpecConflictWithActiveCompactionTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// Verify that conflict task was canceled\r\nMockito.verify(mockClient).cancelTask(conflictTaskId);",
        "line": 1145,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCompactWithGranularitySpecConflictWithActiveCompactionTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  }
]
[
  {
    "variableName": "registry",
    "variableType": "SchemaRegistryClient",
    "mockedClass": "SchemaRegistryClient",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.druid.data.input.avro",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\avro-extensions\\src\\test\\java\\org\\apache\\druid\\data\\input\\avro\\SchemaRegistryBasedAvroBytesDecoderTest.java",
      "className": "SchemaRegistryBasedAvroBytesDecoderTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private SchemaRegistryClient registry;",
        "line": 53,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "registry = Mockito.mock(SchemaRegistryClient.class);",
        "line": 58,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Given\r\nMockito.when(registry.getSchemaById(ArgumentMatchers.eq(1234))).thenReturn(new AvroSchema(SomeAvroDatum.getClassSchema()));",
        "line": 116,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Given\r\nMockito.when(registry.getSchemaById(ArgumentMatchers.eq(1234))).thenReturn(new AvroSchema(SomeAvroDatum.getClassSchema()));",
        "line": 141,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParseCorruptedPartial",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Given\r\nMockito.when(registry.getSchemaById(ArgumentMatchers.eq(1234))).thenReturn(Mockito.mock(ParsedSchema.class));",
        "line": 156,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParseWrongSchemaType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Given\r\nMockito.when(registry.getSchemaById(ArgumentMatchers.anyInt())).thenThrow(new IOException(\"no pasaran\"));",
        "line": 167,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParseWrongId",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "registry",
    "variableType": "SchemaRegistryClient",
    "mockedClass": "CachedSchemaRegistryClient",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.druid.data.input.protobuf",
      "filePath": "C:\\java tool\\Apache\\druid\\extensions-core\\protobuf-extensions\\src\\test\\java\\org\\apache\\druid\\data\\input\\protobuf\\SchemaRegistryBasedProtobufBytesDecoderTest.java",
      "className": "SchemaRegistryBasedProtobufBytesDecoderTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private SchemaRegistryClient registry;",
        "line": 51,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "registry = Mockito.mock(CachedSchemaRegistryClient.class);",
        "line": 56,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(registry.getSchemaById(ArgumentMatchers.eq(1234))).thenReturn(parseProtobufSchema());",
        "line": 63,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(registry.getSchemaById(ArgumentMatchers.eq(1234))).thenReturn(parseProtobufSchema());",
        "line": 77,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParseCorrupted",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Given\r\nMockito.when(registry.getSchemaById(ArgumentMatchers.anyInt())).thenThrow(new IOException(\"no pasaran\"));",
        "line": 89,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testParseWrongId",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
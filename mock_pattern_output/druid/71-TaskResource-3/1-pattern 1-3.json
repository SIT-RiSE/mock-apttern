[
  {
    "variableName": "taskResource0",
    "variableType": "TaskResource",
    "mockedClass": "TaskResource",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.overlord",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\overlord\\ImmutableWorkerInfoTest.java",
      "className": "ImmutableWorkerInfoTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// Parallel index task\r\nTaskResource taskResource0 = mock(TaskResource.class);",
        "line": 235,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(taskResource0.getRequiredCapacity()).thenReturn(3);",
        "line": 236,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "taskResource1",
    "variableType": "TaskResource",
    "mockedClass": "TaskResource",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.overlord",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\overlord\\ImmutableWorkerInfoTest.java",
      "className": "ImmutableWorkerInfoTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// Some other indexing task\r\nTaskResource taskResource1 = mock(TaskResource.class);",
        "line": 249,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(taskResource1.getRequiredCapacity()).thenReturn(5);",
        "line": 250,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "taskResource2",
    "variableType": "TaskResource",
    "mockedClass": "TaskResource",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.druid.indexing.overlord",
      "filePath": "C:\\java tool\\Apache\\druid\\indexing-service\\src\\test\\java\\org\\apache\\druid\\indexing\\overlord\\ImmutableWorkerInfoTest.java",
      "className": "ImmutableWorkerInfoTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// Task has an availability conflict (\"grp1\")\r\nTaskResource taskResource2 = mock(TaskResource.class);",
        "line": 261,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(taskResource2.getRequiredCapacity()).thenReturn(1);",
        "line": 262,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(taskResource2.getAvailabilityGroup()).thenReturn(\"grp1\");",
        "line": 263,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_canRunTask",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
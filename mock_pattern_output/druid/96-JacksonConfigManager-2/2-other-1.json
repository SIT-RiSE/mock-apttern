[
  {
    "variableName": "mockJacksonConfigManager",
    "variableType": "JacksonConfigManager",
    "mockedClass": "JacksonConfigManager",
    "isReuseableMock": null,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 @Before\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.apache.druid.server.http",
      "filePath": "C:\\java tool\\Apache\\druid\\server\\src\\test\\java\\org\\apache\\druid\\server\\http\\CoordinatorCompactionConfigsResourceTest.java",
      "className": "CoordinatorCompactionConfigsResourceTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate JacksonConfigManager mockJacksonConfigManager;",
        "line": 88,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.convertByteToConfig(ArgumentMatchers.eq(OLD_CONFIG_IN_BYTES), ArgumentMatchers.eq(CoordinatorCompactionConfig.class), ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))).thenReturn(ORIGINAL_CONFIG);",
        "line": 115,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.set(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY), oldConfigCaptor.capture(), newConfigCaptor.capture(), ArgumentMatchers.any())).thenReturn(ConfigManager.SetResult.ok());",
        "line": 141,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetCompactionTaskLimitWithExistingConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.set(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY), oldConfigCaptor.capture(), newConfigCaptor.capture(), ArgumentMatchers.any())).thenReturn(ConfigManager.SetResult.ok());",
        "line": 176,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddOrUpdateCompactionConfigWithExistingConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.set(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY), oldConfigCaptor.capture(), newConfigCaptor.capture(), ArgumentMatchers.any())).thenReturn(ConfigManager.SetResult.ok());",
        "line": 221,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteCompactionConfigWithExistingConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.convertByteToConfig(ArgumentMatchers.eq(OLD_CONFIG_IN_BYTES), ArgumentMatchers.eq(CoordinatorCompactionConfig.class), ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))).thenReturn(originalConfig);",
        "line": 244,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteCompactionConfigWithExistingConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.set(ArgumentMatchers.anyString(), ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any())).thenReturn(ConfigManager.SetResult.retryableFailure(new ISE(\"retryable\")));",
        "line": 269,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateShouldRetryIfRetryableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// Verify that the update is retried upto the max number of retries\r\nMockito.verify(mockJacksonConfigManager, Mockito.times(CoordinatorCompactionConfigsResource.UPDATE_NUM_RETRY)).set(ArgumentMatchers.anyString(), ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());",
        "line": 286,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateShouldRetryIfRetryableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.set(ArgumentMatchers.anyString(), ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any())).thenReturn(ConfigManager.SetResult.failure(new ISE(\"retryable\")));",
        "line": 300,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateShouldNotRetryIfNotRetryableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// Verify that the update is tried only once\r\nMockito.verify(mockJacksonConfigManager, Mockito.times(1)).set(ArgumentMatchers.anyString(), ArgumentMatchers.any(), ArgumentMatchers.any(), ArgumentMatchers.any());",
        "line": 317,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateShouldNotRetryIfNotRetryableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.convertByteToConfig(ArgumentMatchers.eq(null), ArgumentMatchers.eq(CoordinatorCompactionConfig.class), ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))).thenReturn(CoordinatorCompactionConfig.empty());",
        "line": 335,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetCompactionTaskLimitWithoutExistingConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.set(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY), oldConfigCaptor.capture(), newConfigCaptor.capture(), ArgumentMatchers.any())).thenReturn(ConfigManager.SetResult.ok());",
        "line": 344,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetCompactionTaskLimitWithoutExistingConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.convertByteToConfig(ArgumentMatchers.eq(null), ArgumentMatchers.eq(CoordinatorCompactionConfig.class), ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))).thenReturn(CoordinatorCompactionConfig.empty());",
        "line": 382,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddOrUpdateCompactionConfigWithoutExistingConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.set(ArgumentMatchers.eq(CoordinatorCompactionConfig.CONFIG_KEY), oldConfigCaptor.capture(), newConfigCaptor.capture(), ArgumentMatchers.any())).thenReturn(ConfigManager.SetResult.ok());",
        "line": 391,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddOrUpdateCompactionConfigWithoutExistingConfig",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mockJacksonConfigManager.convertByteToConfig(ArgumentMatchers.eq(null), ArgumentMatchers.eq(CoordinatorCompactionConfig.class), ArgumentMatchers.eq(CoordinatorCompactionConfig.empty()))).thenReturn(CoordinatorCompactionConfig.empty());",
        "line": 438,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteCompactionConfigWithoutExistingConfigShouldFailAsDatasourceNotExist",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 21
  }
]
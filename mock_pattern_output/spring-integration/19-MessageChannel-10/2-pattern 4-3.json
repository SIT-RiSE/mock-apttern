[
  {
    "variableName": "outputChannel",
    "variableType": "MessageChannel",
    "mockedClass": "MessageChannel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.integration.aggregator",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-core\\src\\test\\java\\org\\springframework\\integration\\aggregator\\CorrelatingMessageHandlerTests.java",
      "className": "CorrelatingMessageHandlerTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private MessageChannel outputChannel;",
        "line": 62,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "outputChannel = mock(MessageChannel.class);",
        "line": 71,
        "locate": "@Before",
        "locationContext": {
          "methodName": "initializeSubject",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(outputChannel.send(any(Message.class), eq(30000L))).thenReturn(true);",
        "line": 87,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "bufferCompletesNormally",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(outputChannel.send(any(Message.class), eq(30000L))).thenReturn(true);",
        "line": 143,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shouldNotPruneWhileCompleting",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "channel",
    "variableType": "MessageChannel",
    "mockedClass": "MessageChannel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.integration.handler",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-core\\src\\test\\java\\org\\springframework\\integration\\handler\\AbstractReplyProducingMessageHandlerTests.java",
      "className": "AbstractReplyProducingMessageHandlerTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private MessageChannel channel;",
        "line": 59,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "channel = mock(MessageChannel.class);",
        "line": 63,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.channel.send(this.message)).willReturn(false);",
        "line": 71,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "errorMessageShouldContainChannelName",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.channel.toString()).willReturn(\"testChannel\");",
        "line": 72,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "errorMessageShouldContainChannelName",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "channel",
    "variableType": "MessageChannel",
    "mockedClass": "MessageChannel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.integration.test.matcher",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-test-support\\src\\test\\java\\org\\springframework\\integration\\test\\matcher\\MockitoMessageMatchersTests.java",
      "className": "MockitoMessageMatchersTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nMessageChannel channel;",
        "line": 58,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(this.channel.send(MockitoMessageMatchers.messageWithPayload(SOME_PAYLOAD))).thenReturn(true);",
        "line": 90,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "anyMatcher_withWhenArgumentMatcherAndEqualPayload_matching",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(this.channel.send(MockitoMessageMatchers.messageWithHeaderEntry(SOME_HEADER_KEY, Matchers.is(Matchers.instanceOf(Short.class))))).thenReturn(true);",
        "line": 96,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "anyMatcher_withWhenAndDifferentPayload_notMatching",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
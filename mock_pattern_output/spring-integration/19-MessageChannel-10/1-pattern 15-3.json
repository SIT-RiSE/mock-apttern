[
  {
    "variableName": "outputChannel",
    "variableType": "MessageChannel",
    "mockedClass": "MessageChannel",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 @Before\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.integration.aggregator",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-core\\src\\test\\java\\org\\springframework\\integration\\aggregator\\CorrelatingMessageHandlerIntegrationTests.java",
      "className": "CorrelatingMessageHandlerIntegrationTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private final MessageChannel outputChannel = mock(MessageChannel.class);",
        "line": 46,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(outputChannel.send(isA(Message.class))).thenReturn(true);",
        "line": 54,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setupHandler",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(outputChannel).send(message);",
        "line": 66,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "completesSingleMessage",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(outputChannel).send(message1);",
        "line": 78,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "completesAfterThreshold",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(outputChannel, never()).send(message2);",
        "line": 80,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "completesAfterThreshold",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(outputChannel, never()).send(message3);",
        "line": 91,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "completesIfNoSequence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(outputChannel).send(message2);",
        "line": 93,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "completesIfNoSequence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(outputChannel, never()).send(message3);",
        "line": 95,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "completesIfNoSequence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(outputChannel, never()).send(message1);",
        "line": 106,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "completesWithoutReleasingIncompleteCorrelations",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(outputChannel, never()).send(message2);",
        "line": 107,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "completesWithoutReleasingIncompleteCorrelations",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(outputChannel).send(message1);",
        "line": 109,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "completesWithoutReleasingIncompleteCorrelations",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(outputChannel).send(message1a);",
        "line": 110,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "completesWithoutReleasingIncompleteCorrelations",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(outputChannel, never()).send(message2);",
        "line": 111,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "completesWithoutReleasingIncompleteCorrelations",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(outputChannel, never()).send(message2a);",
        "line": 112,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "completesWithoutReleasingIncompleteCorrelations",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(outputChannel).send(message2);",
        "line": 114,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "completesWithoutReleasingIncompleteCorrelations",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(outputChannel).send(message2a);",
        "line": 115,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "completesWithoutReleasingIncompleteCorrelations",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(outputChannel, never()).send(message1);",
        "line": 123,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "completesAfterSequenceComplete",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(outputChannel).send(message1);",
        "line": 125,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "completesAfterSequenceComplete",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(outputChannel).send(message2);",
        "line": 126,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "completesAfterSequenceComplete",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 15
  },
  {
    "variableName": "outputChannel",
    "variableType": "MessageChannel",
    "mockedClass": "MessageChannel",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 @Before\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.integration.handler",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-core\\src\\test\\java\\org\\springframework\\integration\\handler\\MessageHandlerChainTests.java",
      "className": "MessageHandlerChainTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private MessageChannel outputChannel;",
        "line": 49,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "outputChannel = mock(MessageChannel.class);",
        "line": 61,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(outputChannel.send(Mockito.any(Message.class), eq(30000L))).thenReturn(true);",
        "line": 65,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(outputChannel).send(Mockito.eq(message), eq(30000L));",
        "line": 83,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "chainWithOutputChannel",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(outputChannel).send(Mockito.any(Message.class), eq(30000L));",
        "line": 125,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "chainForwardsToReplyChannel",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(outputChannel).send(Mockito.eq(message), eq(30000L));",
        "line": 142,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "chainResolvesReplyChannelName",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 15
  },
  {
    "variableName": "outputChannel",
    "variableType": "MessageChannel",
    "mockedClass": "MessageChannel",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 @Before\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.integration.handler",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-core\\src\\test\\java\\org\\springframework\\integration\\handler\\MessageHandlerChainTests.java",
      "className": "MessageHandlerChainTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private MessageChannel outputChannel;",
        "line": 49,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "outputChannel = mock(MessageChannel.class);",
        "line": 61,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(outputChannel.send(Mockito.any(Message.class), eq(30000L))).thenReturn(true);",
        "line": 65,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(outputChannel).send(Mockito.eq(message), eq(30000L));",
        "line": 83,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "chainWithOutputChannel",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(outputChannel).send(Mockito.any(Message.class), eq(30000L));",
        "line": 125,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "chainForwardsToReplyChannel",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(outputChannel).send(Mockito.eq(message), eq(30000L));",
        "line": 142,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "chainResolvesReplyChannelName",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 15
  }
]
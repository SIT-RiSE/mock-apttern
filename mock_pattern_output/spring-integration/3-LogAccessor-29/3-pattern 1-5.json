[
  {
    "variableName": "logger",
    "variableType": "LogAccessor",
    "mockedClass": "LogAccessor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.integration.amqp.outbound",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-amqp\\src\\test\\java\\org\\springframework\\integration\\amqp\\outbound\\AsyncAmqpGatewayTests.java",
      "className": "AsyncAmqpGatewayTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "LogAccessor logger = spy(TestUtils.getPropertyValue(gateway, \"logger\", LogAccessor.class));",
        "line": 108,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConfirmsAndReturns",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(logger.isDebugEnabled()).willReturn(true);",
        "line": 109,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConfirmsAndReturns",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "logger",
    "variableType": "LogAccessor",
    "mockedClass": "LogAccessor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.integration.config",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-core\\src\\test\\java\\org\\springframework\\integration\\config\\ChainParserTests.java",
      "className": "ChainParserTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "LogAccessor logger = mock(LogAccessor.class);",
        "line": 300,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "chainWithLoggingChannelAdapter",
          "methodAnnotations": [
            "@Test",
            "@SuppressWarnings"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(logger.isWarnEnabled()).thenReturn(true);",
        "line": 302,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "chainWithLoggingChannelAdapter",
          "methodAnnotations": [
            "@Test",
            "@SuppressWarnings"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "logger",
    "variableType": "LogAccessor",
    "mockedClass": "LogAccessor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.integration.configuration",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-core\\src\\test\\java\\org\\springframework\\integration\\configuration\\EnableIntegrationTests.java",
      "className": "EnableIntegrationTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "LogAccessor logger = spy(TestUtils.getPropertyValue(this.serviceActivatorEndpoint, \"logger\", LogAccessor.class));",
        "line": 331,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAnnotatedServiceActivator",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(logger.isDebugEnabled()).thenReturn(true);",
        "line": 332,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAnnotatedServiceActivator",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "logger",
    "variableType": "LogAccessor",
    "mockedClass": "LogAccessor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.integration.handler.advice",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-core\\src\\test\\java\\org\\springframework\\integration\\handler\\advice\\AdvisedMessageHandlerTests.java",
      "className": "AdvisedMessageHandlerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "LogAccessor logger = spy(TestUtils.getPropertyValue(advice, \"logger\", LogAccessor.class));",
        "line": 905,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInappropriateAdvice",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(logger.isWarnEnabled()).thenReturn(Boolean.TRUE);",
        "line": 906,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInappropriateAdvice",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "logger",
    "variableType": "LogAccessor",
    "mockedClass": "LogAccessor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.integration.file",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-file\\src\\test\\java\\org\\springframework\\integration\\file\\FileWritingMessageHandlerTests.java",
      "className": "FileWritingMessageHandlerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "LogAccessor logger = spy(TestUtils.getPropertyValue(handler, \"logger\", LogAccessor.class));",
        "line": 548,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "noFlushAppend",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(logger.isDebugEnabled()).thenReturn(true);",
        "line": 550,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "noFlushAppend",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
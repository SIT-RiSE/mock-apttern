[
  {
    "variableName": "logger",
    "variableType": "LogAccessor",
    "mockedClass": "LogAccessor",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.integration.channel",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-core\\src\\test\\java\\org\\springframework\\integration\\channel\\DirectChannelTests.java",
      "className": "DirectChannelTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "LogAccessor logger = spy(TestUtils.getPropertyValue(channel, \"logger\", LogAccessor.class));",
        "line": 59,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(logger.isDebugEnabled()).thenReturn(true);",
        "line": 60,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(logger, times(2)).debug(captor.capture());",
        "line": 73,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "logger",
    "variableType": "LogAccessor",
    "mockedClass": "LogAccessor",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.integration.channel",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-core\\src\\test\\java\\org\\springframework\\integration\\channel\\P2pChannelTests.java",
      "className": "P2pChannelTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final LogAccessor logger = mock(LogAccessor.class);",
        "line": 100,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecutorChannelLoggingWithMoreThenOneSubscriber",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(logger.isInfoEnabled()).thenReturn(true);",
        "line": 101,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecutorChannelLoggingWithMoreThenOneSubscriber",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(logger, times(2)).info(Mockito.anyString());",
        "line": 110,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecutorChannelLoggingWithMoreThenOneSubscriber",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "logger",
    "variableType": "LogAccessor",
    "mockedClass": "LogAccessor",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.integration.channel",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-core\\src\\test\\java\\org\\springframework\\integration\\channel\\P2pChannelTests.java",
      "className": "P2pChannelTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final LogAccessor logger = mock(LogAccessor.class);",
        "line": 118,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPubSubChannelLoggingWithMoreThenOneSubscriber",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(logger.isInfoEnabled()).thenReturn(true);",
        "line": 119,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPubSubChannelLoggingWithMoreThenOneSubscriber",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(logger, times(2)).info(Mockito.anyString());",
        "line": 128,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPubSubChannelLoggingWithMoreThenOneSubscriber",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "log",
    "variableType": "LogAccessor",
    "mockedClass": "LogAccessor",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.integration.config.annotation",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-core\\src\\test\\java\\org\\springframework\\integration\\config\\annotation\\CustomMessagingAnnotationTests.java",
      "className": "CustomMessagingAnnotationTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "LogAccessor log = spy(TestUtils.getPropertyValue(this.loggingHandler, \"messageLogger\", LogAccessor.class));",
        "line": 79,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testLogAnnotation",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(log.isWarnEnabled()).willReturn(true);",
        "line": 81,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testLogAnnotation",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(log).warn(argumentCaptor.capture());",
        "line": 94,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testLogAnnotation",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "logger",
    "variableType": "LogAccessor",
    "mockedClass": "LogAccessor",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.integration.config.xml",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-core\\src\\test\\java\\org\\springframework\\integration\\config\\xml\\GatewayParserTests.java",
      "className": "GatewayParserTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "LogAccessor logger = spy(TestUtils.getPropertyValue(gateway, \"logger\", LogAccessor.class));",
        "line": 299,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCustomCompletableNoAsyncAttemptAsync",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(logger.isDebugEnabled()).thenReturn(true);",
        "line": 300,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCustomCompletableNoAsyncAttemptAsync",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(logger).debug(ArgumentMatchers.<Supplier<String>>argThat(logMessage -> logMessage.get().equals(\"AsyncTaskExecutor submit*() return types are incompatible \" + \"with the method return type; \" + \"running on calling thread; the downstream flow must return the required Future: \" + \"MyCompletableFuture\")));",
        "line": 321,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCustomCompletableNoAsyncAttemptAsync",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "logger",
    "variableType": "LogAccessor",
    "mockedClass": "LogAccessor",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.integration.ip.tcp.connection",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-ip\\src\\test\\java\\org\\springframework\\integration\\ip\\tcp\\connection\\CachingClientConnectionFactoryTests.java",
      "className": "CachingClientConnectionFactoryTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "LogAccessor logger = spy(TestUtils.getPropertyValue(gate, \"logger\", LogAccessor.class));",
        "line": 737,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGatewayRelease",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(logger.isDebugEnabled()).thenReturn(true);",
        "line": 739,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGatewayRelease",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(logger, never()).error(anyString());",
        "line": 772,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGatewayRelease",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "logger",
    "variableType": "LogAccessor",
    "mockedClass": "LogAccessor",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.integration.mail",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-mail\\src\\test\\java\\org\\springframework\\integration\\mail\\ImapMailReceiverTests.java",
      "className": "ImapMailReceiverTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "LogAccessor logger = spy(TestUtils.getPropertyValue(receiver, \"logger\", LogAccessor.class));",
        "line": 376,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "receiveAndDebugIsDisabledNotLogFiltered",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(logger.isDebugEnabled()).thenReturn(false);",
        "line": 378,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "receiveAndDebugIsDisabledNotLogFiltered",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(logger, times(2)).isDebugEnabled();",
        "line": 385,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "receiveAndDebugIsDisabledNotLogFiltered",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(logger, never()).debug(Mockito.startsWith(\"Expunged message received\"));",
        "line": 390,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "receiveAndDebugIsDisabledNotLogFiltered",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(logger, never()).debug(org.mockito.ArgumentMatchers.contains(\"will be discarded by the matching filter\"));",
        "line": 391,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "receiveAndDebugIsDisabledNotLogFiltered",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "logger",
    "variableType": "LogAccessor",
    "mockedClass": "LogAccessor",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.integration.mail",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-mail\\src\\test\\java\\org\\springframework\\integration\\mail\\ImapMailReceiverTests.java",
      "className": "ImapMailReceiverTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "LogAccessor logger = spy(TestUtils.getPropertyValue(receiver, \"logger\", LogAccessor.class));",
        "line": 398,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "receiveExpungedAndNotExpungedLogFiltered",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(logger.isDebugEnabled()).thenReturn(true);",
        "line": 400,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "receiveExpungedAndNotExpungedLogFiltered",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(logger, times(2)).isDebugEnabled();",
        "line": 410,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "receiveExpungedAndNotExpungedLogFiltered",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(logger).debug(Mockito.startsWith(\"Expunged message discarded\"));",
        "line": 415,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "receiveExpungedAndNotExpungedLogFiltered",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(logger).debug(org.mockito.ArgumentMatchers.contains(\"'msg2' will be discarded by the matching filter\"));",
        "line": 416,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "receiveExpungedAndNotExpungedLogFiltered",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "logger",
    "variableType": "LogAccessor",
    "mockedClass": "LogAccessor",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.integration.mqtt",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-mqtt\\src\\test\\java\\org\\springframework\\integration\\mqtt\\MqttAdapterTests.java",
      "className": "MqttAdapterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "LogAccessor logger = spy(TestUtils.getPropertyValue(adapter, \"logger\", LogAccessor.class));",
        "line": 505,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDifferentQos",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(logger.isWarnEnabled()).willReturn(true);",
        "line": 507,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDifferentQos",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(logger, atLeastOnce()).warn(ArgumentMatchers.<Supplier<? extends CharSequence>>argThat(logMessage -> logMessage.get().equals(\"Granted QOS different to Requested QOS; topics: [baz, fix] \" + \"requested: [1, 1] granted: [2, 0]\")));",
        "line": 509,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDifferentQos",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  }
]
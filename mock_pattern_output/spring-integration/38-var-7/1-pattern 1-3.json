[
  {
    "variableName": "clientManager",
    "variableType": "var",
    "mockedClass": "Mqttv3ClientManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.integration.mqtt",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-mqtt\\src\\test\\java\\org\\springframework\\integration\\mqtt\\MqttAdapterTests.java",
      "className": "MqttAdapterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// given\r\nvar clientManager = mock(Mqttv3ClientManager.class);",
        "line": 201,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientManagerIsNotConnectedAndClosedInHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(clientManager.getConnectionInfo()).thenReturn(new MqttConnectOptions());",
        "line": 202,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientManagerIsNotConnectedAndClosedInHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(clientManager.getClient()).willReturn(client);",
        "line": 204,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientManagerIsNotConnectedAndClosedInHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "subscribeToken",
    "variableType": "var",
    "mockedClass": "MqttToken",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.integration.mqtt",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-mqtt\\src\\test\\java\\org\\springframework\\integration\\mqtt\\MqttAdapterTests.java",
      "className": "MqttAdapterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "var subscribeToken = mock(MqttToken.class);",
        "line": 235,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientManagerIsNotConnectedAndClosedInAdapter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(subscribeToken.getGrantedQos()).willReturn(new int[] { 2 });",
        "line": 236,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientManagerIsNotConnectedAndClosedInAdapter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "clientManager",
    "variableType": "var",
    "mockedClass": "Mqttv3ClientManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.integration.mqtt",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-mqtt\\src\\test\\java\\org\\springframework\\integration\\mqtt\\MqttAdapterTests.java",
      "className": "MqttAdapterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// given\r\nvar clientManager = mock(Mqttv3ClientManager.class);",
        "line": 230,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientManagerIsNotConnectedAndClosedInAdapter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(clientManager.getConnectionInfo()).thenReturn(new MqttConnectOptions());",
        "line": 231,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientManagerIsNotConnectedAndClosedInAdapter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(clientManager.getClient()).willReturn(client);",
        "line": 233,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientManagerIsNotConnectedAndClosedInAdapter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
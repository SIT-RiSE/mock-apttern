[
  {
    "variableName": "transactionSynchronization",
    "variableType": "TransactionSynchronization",
    "mockedClass": "TransactionSynchronization",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.integration.jdbc.lock",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-jdbc\\src\\test\\java\\org\\springframework\\integration\\jdbc\\lock\\DefaultLockRepositoryTests.java",
      "className": "DefaultLockRepositoryTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "TransactionSynchronization transactionSynchronization = spy(TransactionSynchronization.class);",
        "line": 60,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNewTransactionIsStartedWhenTransactionIsAlreadyActive",
          "methodAnnotations": [
            "@Transactional",
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// And was suspended for each invocation of @Transactional methods of DefaultLockRepository,\r\n// that confirms that these methods were called in a separate transaction each.\r\nverify(transactionSynchronization, times(6)).suspend();",
        "line": 74,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNewTransactionIsStartedWhenTransactionIsAlreadyActive",
          "methodAnnotations": [
            "@Transactional",
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  }
]
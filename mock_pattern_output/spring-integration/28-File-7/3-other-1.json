[
  {
    "variableName": "inputDirectoryMock",
    "variableType": "File",
    "mockedClass": "File",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Other Methods\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.integration.file",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-file\\src\\test\\java\\org\\springframework\\integration\\file\\FileReadingMessageSourceTests.java",
      "className": "FileReadingMessageSourceTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private final File inputDirectoryMock = mock();",
        "line": 46,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(inputDirectoryMock.toPath()).thenReturn(Path.of(\"[dir]\"));",
        "line": 55,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "prepResource",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(inputDirectoryMock.listFiles()).thenReturn(new File[] { fileMock });",
        "line": 72,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "straightProcess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(inputDirectoryMock.listFiles()).thenReturn(new File[] { fileMock });",
        "line": 80,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "requeueOnFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(inputDirectoryMock).listFiles();",
        "line": 85,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "requeueOnFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(inputDirectoryMock.listFiles()).thenReturn(new File[] { fileMock, anotherFileMock });",
        "line": 92,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "scanEachPoll",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(inputDirectoryMock, times(3)).listFiles();",
        "line": 97,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "scanEachPoll",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(inputDirectoryMock.listFiles()).thenReturn(new File[] { fileMock });",
        "line": 102,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "noDuplication",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(inputDirectoryMock, times(2)).listFiles();",
        "line": 107,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "noDuplication",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(inputDirectoryMock.listFiles()).thenReturn(new File[] { fileMock });",
        "line": 118,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "lockIsAcquired",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(inputDirectoryMock.listFiles()).thenReturn(new File[] { fileMock });",
        "line": 127,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "lockedFilesAreIgnored",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(inputDirectoryMock.listFiles()).thenReturn(new File[] { file2, file3, file1 });",
        "line": 148,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "orderedReception",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(inputDirectoryMock, times(2)).listFiles();",
        "line": 153,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "orderedReception",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 42
  }
]
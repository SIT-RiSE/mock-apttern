[
  {
    "variableName": "messageMock",
    "variableType": "Message",
    "mockedClass": "Message",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 @Before\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.integration.gateway",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-core\\src\\test\\java\\org\\springframework\\integration\\gateway\\MessagingGatewayTests.java",
      "className": "MessagingGatewayTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@SuppressWarnings(\"rawtypes\")\r\nprivate final Message messageMock = Mockito.mock(Message.class);",
        "line": 66,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(this.messageMock.getHeaders()).thenReturn(new MessageHeaders(Collections.emptyMap()));",
        "line": 81,
        "locate": "@Before",
        "locationContext": {
          "methodName": "initializeSample",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getHeaders()).thenReturn(new MessageHeaders(null));",
        "line": 101,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendMessage_failure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getPayload()).thenReturn(\"test\");",
        "line": 140,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "receiveMessage",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getPayload()).thenReturn(\"test\");",
        "line": 157,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendObjectAndReceiveObject",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getHeaders()).thenReturn(messageHeadersMock);",
        "line": 176,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendMessageAndReceiveObject",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getPayload()).thenReturn(\"foo\");",
        "line": 177,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendMessageAndReceiveObject",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getPayload()).thenReturn(\"foo\");",
        "line": 199,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendObjectAndReceiveMessage",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getHeaders()).thenReturn(messageHeadersMock);",
        "line": 220,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendMessageAndReceiveMessage",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getPayload()).thenReturn(\"foo\");",
        "line": 221,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendMessageAndReceiveMessage",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 12
  },
  {
    "variableName": "messageMock",
    "variableType": "Message",
    "mockedClass": "Message",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 @Before\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.integration.gateway",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-core\\src\\test\\java\\org\\springframework\\integration\\gateway\\MessagingGatewayTests.java",
      "className": "MessagingGatewayTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@SuppressWarnings(\"rawtypes\")\r\nprivate final Message messageMock = Mockito.mock(Message.class);",
        "line": 66,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(this.messageMock.getHeaders()).thenReturn(new MessageHeaders(Collections.emptyMap()));",
        "line": 81,
        "locate": "@Before",
        "locationContext": {
          "methodName": "initializeSample",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getHeaders()).thenReturn(new MessageHeaders(null));",
        "line": 101,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendMessage_failure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getPayload()).thenReturn(\"test\");",
        "line": 140,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "receiveMessage",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getPayload()).thenReturn(\"test\");",
        "line": 157,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendObjectAndReceiveObject",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getHeaders()).thenReturn(messageHeadersMock);",
        "line": 176,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendMessageAndReceiveObject",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getPayload()).thenReturn(\"foo\");",
        "line": 177,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendMessageAndReceiveObject",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getPayload()).thenReturn(\"foo\");",
        "line": 199,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendObjectAndReceiveMessage",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getHeaders()).thenReturn(messageHeadersMock);",
        "line": 220,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendMessageAndReceiveMessage",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getPayload()).thenReturn(\"foo\");",
        "line": 221,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendMessageAndReceiveMessage",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 12
  },
  {
    "variableName": "messageMock",
    "variableType": "Message",
    "mockedClass": "Message",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 @Before\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.integration.gateway",
      "filePath": "C:\\java tool\\Spring\\spring-integration\\spring-integration-core\\src\\test\\java\\org\\springframework\\integration\\gateway\\MessagingGatewayTests.java",
      "className": "MessagingGatewayTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@SuppressWarnings(\"rawtypes\")\r\nprivate final Message messageMock = Mockito.mock(Message.class);",
        "line": 66,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(this.messageMock.getHeaders()).thenReturn(new MessageHeaders(Collections.emptyMap()));",
        "line": 81,
        "locate": "@Before",
        "locationContext": {
          "methodName": "initializeSample",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getHeaders()).thenReturn(new MessageHeaders(null));",
        "line": 101,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendMessage_failure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getPayload()).thenReturn(\"test\");",
        "line": 140,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "receiveMessage",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getPayload()).thenReturn(\"test\");",
        "line": 157,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendObjectAndReceiveObject",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getHeaders()).thenReturn(messageHeadersMock);",
        "line": 176,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendMessageAndReceiveObject",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getPayload()).thenReturn(\"foo\");",
        "line": 177,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendMessageAndReceiveObject",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getPayload()).thenReturn(\"foo\");",
        "line": 199,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendObjectAndReceiveMessage",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getHeaders()).thenReturn(messageHeadersMock);",
        "line": 220,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendMessageAndReceiveMessage",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(messageMock.getPayload()).thenReturn(\"foo\");",
        "line": 221,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "sendMessageAndReceiveMessage",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 12
  }
]
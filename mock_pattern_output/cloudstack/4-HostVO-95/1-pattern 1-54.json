[
  {
    "variableName": "hostVO",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\orchestration\\src\\test\\java\\com\\cloud\\vm\\VirtualMachineManagerImplTest.java",
      "className": "VirtualMachineManagerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO hostVO = Mockito.mock(HostVO.class);",
        "line": 923,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkAndAttemptMigrateVmAcrossClusterNonValid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(hostVO.getClusterId()).thenReturn(destinationClusterId);",
        "line": 924,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkAndAttemptMigrateVmAcrossClusterNonValid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "hostVO",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.vmsnapshot",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\storage\\snapshot\\src\\test\\java\\org\\apache\\cloudstack\\storage\\vmsnapshot\\VMSnapshotStrategyKVMTest.java",
      "className": "VMSnapshotStrategyKVMTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO hostVO = Mockito.mock(HostVO.class);",
        "line": 212,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRevertVMsnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(hostVO.getHypervisorType()).thenReturn(hypervisorType);",
        "line": 214,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRevertVMsnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(hostVO.getHypervisorVersion()).thenReturn(hypervisorVersion);",
        "line": 215,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRevertVMsnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "hostVO",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.vmsnapshot",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\storage\\snapshot\\src\\test\\java\\org\\apache\\cloudstack\\storage\\vmsnapshot\\VMSnapshotStrategyKVMTest.java",
      "className": "VMSnapshotStrategyKVMTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO hostVO = Mockito.mock(HostVO.class);",
        "line": 290,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteVMsnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(hostVO.getHypervisorType()).thenReturn(hypervisorType);",
        "line": 292,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteVMsnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(hostVO.getHypervisorVersion()).thenReturn(hypervisorVersion);",
        "line": 293,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteVMsnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "hostVO",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.vmsnapshot",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\storage\\snapshot\\src\\test\\java\\org\\apache\\cloudstack\\storage\\vmsnapshot\\VMSnapshotStrategyTest.java",
      "className": "VMSnapshotStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO hostVO = Mockito.mock(HostVO.class);",
        "line": 128,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVMSnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(hostVO.getHypervisorType()).thenReturn(hypervisorType);",
        "line": 130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVMSnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(hostVO.getHypervisorVersion()).thenReturn(hypervisorVersion);",
        "line": 131,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVMSnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "hostVO",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.vmsnapshot",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\storage\\snapshot\\src\\test\\java\\org\\apache\\cloudstack\\storage\\vmsnapshot\\VMSnapshotStrategyTest.java",
      "className": "VMSnapshotStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO hostVO = Mockito.mock(HostVO.class);",
        "line": 177,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRevertSnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(hostVO.getHypervisorType()).thenReturn(hypervisorType);",
        "line": 179,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRevertSnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(hostVO.getHypervisorVersion()).thenReturn(hypervisorVersion);",
        "line": 180,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRevertSnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "hostVO",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.vmsnapshot",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\storage\\snapshot\\src\\test\\java\\org\\apache\\cloudstack\\storage\\vmsnapshot\\VMSnapshotStrategyTest.java",
      "className": "VMSnapshotStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO hostVO = Mockito.mock(HostVO.class);",
        "line": 225,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteVMSnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(hostVO.getHypervisorType()).thenReturn(hypervisorType);",
        "line": 227,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteVMSnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(hostVO.getHypervisorVersion()).thenReturn(hypervisorVersion);",
        "line": 228,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteVMSnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "host1",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.implicitplanner",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\deployment-planners\\implicit-dedication\\src\\test\\java\\org\\apache\\cloudstack\\implicitplanner\\ImplicitPlannerTest.java",
      "className": "ImplicitPlannerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// Initialize hosts in clusters\r\nHostVO host1 = mock(HostVO.class);",
        "line": 390,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForImplicitPlannerTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(host1.getId()).thenReturn(5L);",
        "line": 391,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForImplicitPlannerTest",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "host3",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.implicitplanner",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\deployment-planners\\implicit-dedication\\src\\test\\java\\org\\apache\\cloudstack\\implicitplanner\\ImplicitPlannerTest.java",
      "className": "ImplicitPlannerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO host3 = mock(HostVO.class);",
        "line": 394,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForImplicitPlannerTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(host3.getId()).thenReturn(7L);",
        "line": 395,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForImplicitPlannerTest",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "host2",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.implicitplanner",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\deployment-planners\\implicit-dedication\\src\\test\\java\\org\\apache\\cloudstack\\implicitplanner\\ImplicitPlannerTest.java",
      "className": "ImplicitPlannerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO host2 = mock(HostVO.class);",
        "line": 392,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForImplicitPlannerTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(host2.getId()).thenReturn(6L);",
        "line": 393,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForImplicitPlannerTest",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "hostVO",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\vmware\\src\\test\\java\\com\\cloud\\hypervisor\\guru\\VMwareGuruTest.java",
      "className": "VMwareGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO hostVO = Mockito.mock(HostVO.class);",
        "line": 99,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "finalizeMigrateForLocalStorageToHaveTargetHostGuid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(hostVO.getGuid()).thenReturn(\"HostSystem:host-a@x.x.x.x\");",
        "line": 116,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "finalizeMigrateForLocalStorageToHaveTargetHostGuid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "brocadeHost",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\brocade-vcs\\src\\test\\java\\com\\cloud\\network\\guru\\BrocadeVcsGuestNetworkGuruTest.java",
      "className": "BrocadeVcsGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final HostVO brocadeHost = mock(HostVO.class);",
        "line": 247,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplement",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(brocadeHost.getId()).thenReturn(NETWORK_ID);",
        "line": 249,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplement",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "brocadeHost",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\brocade-vcs\\src\\test\\java\\com\\cloud\\network\\guru\\BrocadeVcsGuestNetworkGuruTest.java",
      "className": "BrocadeVcsGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final HostVO brocadeHost = mock(HostVO.class);",
        "line": 307,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementFail",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(brocadeHost.getId()).thenReturn(NETWORK_ID);",
        "line": 309,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementFail",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "brocadeHost",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\brocade-vcs\\src\\test\\java\\com\\cloud\\network\\guru\\BrocadeVcsGuestNetworkGuruTest.java",
      "className": "BrocadeVcsGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final HostVO brocadeHost = mock(HostVO.class);",
        "line": 361,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReserve",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(brocadeHost.getId()).thenReturn(NETWORK_ID);",
        "line": 363,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReserve",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "brocadeHost",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\brocade-vcs\\src\\test\\java\\com\\cloud\\network\\guru\\BrocadeVcsGuestNetworkGuruTest.java",
      "className": "BrocadeVcsGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final HostVO brocadeHost = mock(HostVO.class);",
        "line": 413,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReserveFail",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(brocadeHost.getId()).thenReturn(NETWORK_ID);",
        "line": 415,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReserveFail",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "brocadeHost",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\brocade-vcs\\src\\test\\java\\com\\cloud\\network\\guru\\BrocadeVcsGuestNetworkGuruTest.java",
      "className": "BrocadeVcsGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final HostVO brocadeHost = mock(HostVO.class);",
        "line": 458,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeallocate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(brocadeHost.getId()).thenReturn(NETWORK_ID);",
        "line": 460,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeallocate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "brocadeHost",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\brocade-vcs\\src\\test\\java\\com\\cloud\\network\\guru\\BrocadeVcsGuestNetworkGuruTest.java",
      "className": "BrocadeVcsGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final HostVO brocadeHost = mock(HostVO.class);",
        "line": 494,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeallocateFail",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(brocadeHost.getId()).thenReturn(NETWORK_ID);",
        "line": 496,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeallocateFail",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "brocadeHost",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\brocade-vcs\\src\\test\\java\\com\\cloud\\network\\guru\\BrocadeVcsGuestNetworkGuruTest.java",
      "className": "BrocadeVcsGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final HostVO brocadeHost = mock(HostVO.class);",
        "line": 529,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTrash",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(brocadeHost.getId()).thenReturn(NETWORK_ID);",
        "line": 531,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTrash",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "brocadeHost",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\brocade-vcs\\src\\test\\java\\com\\cloud\\network\\guru\\BrocadeVcsGuestNetworkGuruTest.java",
      "className": "BrocadeVcsGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final HostVO brocadeHost = mock(HostVO.class);",
        "line": 571,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTrashFail",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(brocadeHost.getId()).thenReturn(NETWORK_ID);",
        "line": 573,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTrashFail",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "hostVO",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\cisco-vnmc\\src\\test\\java\\com\\cloud\\network\\element\\CiscoVnmcElementTest.java",
      "className": "CiscoVnmcElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO hostVO = mock(HostVO.class);",
        "line": 200,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(hostVO.getId()).thenReturn(1L);",
        "line": 201,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "hostVO",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\cisco-vnmc\\src\\test\\java\\com\\cloud\\network\\element\\CiscoVnmcElementTest.java",
      "className": "CiscoVnmcElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO hostVO = mock(HostVO.class);",
        "line": 253,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shutdownTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(hostVO.getId()).thenReturn(1L);",
        "line": 254,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shutdownTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "hostVO",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\cisco-vnmc\\src\\test\\java\\com\\cloud\\network\\element\\CiscoVnmcElementTest.java",
      "className": "CiscoVnmcElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO hostVO = mock(HostVO.class);",
        "line": 292,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(hostVO.getId()).thenReturn(1L);",
        "line": 293,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "hostVO",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\cisco-vnmc\\src\\test\\java\\com\\cloud\\network\\element\\CiscoVnmcElementTest.java",
      "className": "CiscoVnmcElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO hostVO = mock(HostVO.class);",
        "line": 337,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyPRulesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(hostVO.getId()).thenReturn(1L);",
        "line": 338,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyPRulesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "hostVO",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\cisco-vnmc\\src\\test\\java\\com\\cloud\\network\\element\\CiscoVnmcElementTest.java",
      "className": "CiscoVnmcElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO hostVO = mock(HostVO.class);",
        "line": 387,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyStaticNatsTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(hostVO.getId()).thenReturn(1L);",
        "line": 388,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyStaticNatsTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "hostVO",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.globo.globodns.cloudstack.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\globodns\\src\\test\\java\\com\\globo\\globodns\\cloudstack\\element\\GloboDnsElementTest.java",
      "className": "GloboDnsElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO hostVO = mock(HostVO.class);",
        "line": 164,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrepareMethodCallGloboDnsToRegisterHostName",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(hostVO.getId()).thenReturn(globoDnsHostId);",
        "line": 165,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrepareMethodCallGloboDnsToRegisterHostName",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "hostVO",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.globo.globodns.cloudstack.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\globodns\\src\\test\\java\\com\\globo\\globodns\\cloudstack\\element\\GloboDnsElementTest.java",
      "className": "GloboDnsElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO hostVO = mock(HostVO.class);",
        "line": 196,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReleaseMethodCallResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(hostVO.getId()).thenReturn(globoDnsHostId);",
        "line": 197,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReleaseMethodCallResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "niciraNvpHost",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\element\\NiciraNvpElementTest.java",
      "className": "NiciraNvpElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO niciraNvpHost = mock(HostVO.class);",
        "line": 170,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementIsolatedNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraNvpHost.getId()).thenReturn(NICIRA_NVP_HOST_ID);",
        "line": 171,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementIsolatedNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "hvo",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\element\\NiciraNvpElementTest.java",
      "className": "NiciraNvpElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final HostVO hvo = mock(HostVO.class);",
        "line": 247,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyIpTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(hvo.getId()).thenReturn(NETWORK_ID);",
        "line": 248,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyIpTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(hvo.getDetail(\"l3gatewayserviceuuid\")).thenReturn(\"abcde\");",
        "line": 249,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyIpTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "niciraNvpHost",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\element\\NiciraNvpElementTest.java",
      "className": "NiciraNvpElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO niciraNvpHost = mock(HostVO.class);",
        "line": 286,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkUuidVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraNvpHost.getId()).thenReturn(NICIRA_NVP_HOST_ID);",
        "line": 287,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkUuidVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "niciraNvpHost",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\element\\NiciraNvpElementTest.java",
      "className": "NiciraNvpElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO niciraNvpHost = mock(HostVO.class);",
        "line": 339,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkNumericalVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraNvpHost.getId()).thenReturn(NICIRA_NVP_HOST_ID);",
        "line": 340,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkNumericalVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraNvpHost.getDetail(\"l2gatewayserviceuuid\")).thenReturn(\"bbbb-bbbb-bbbb\");",
        "line": 365,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkNumericalVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "niciraNvpHost",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\element\\NiciraNvpElementTest.java",
      "className": "NiciraNvpElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO niciraNvpHost = mock(HostVO.class);",
        "line": 391,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkNumericalVlanIdWithoutL2GatewayService",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraNvpHost.getId()).thenReturn(NICIRA_NVP_HOST_ID);",
        "line": 392,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkNumericalVlanIdWithoutL2GatewayService",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraNvpHost.getDetail(\"l2gatewayserviceuuid\")).thenReturn(null);",
        "line": 417,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkNumericalVlanIdWithoutL2GatewayService",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "niciraHost",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\guru\\NiciraNvpGuestNetworkGuruTest.java",
      "className": "NiciraNvpGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final HostVO niciraHost = mock(HostVO.class);",
        "line": 278,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplement",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraHost.getDetail(\"transportzoneuuid\")).thenReturn(\"aaaa\");",
        "line": 280,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplement",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraHost.getDetail(\"transportzoneisotype\")).thenReturn(\"stt\");",
        "line": 281,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplement",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraHost.getId()).thenReturn(NETWORK_ID);",
        "line": 282,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplement",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "niciraHost",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\guru\\NiciraNvpGuestNetworkGuruTest.java",
      "className": "NiciraNvpGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final HostVO niciraHost = mock(HostVO.class);",
        "line": 335,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementWithCidr",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraHost.getDetail(\"transportzoneuuid\")).thenReturn(\"aaaa\");",
        "line": 337,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementWithCidr",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraHost.getDetail(\"transportzoneisotype\")).thenReturn(\"stt\");",
        "line": 338,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementWithCidr",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraHost.getId()).thenReturn(NETWORK_ID);",
        "line": 339,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementWithCidr",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "niciraHost",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\guru\\NiciraNvpGuestNetworkGuruTest.java",
      "className": "NiciraNvpGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final HostVO niciraHost = mock(HostVO.class);",
        "line": 392,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementURIException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraHost.getDetail(\"transportzoneuuid\")).thenReturn(\"aaaa\");",
        "line": 394,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementURIException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraHost.getDetail(\"transportzoneisotype\")).thenReturn(\"stt\");",
        "line": 395,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementURIException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraHost.getId()).thenReturn(NETWORK_ID);",
        "line": 396,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementURIException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "niciraHost",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\guru\\NiciraNvpGuestNetworkGuruTest.java",
      "className": "NiciraNvpGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final HostVO niciraHost = mock(HostVO.class);",
        "line": 450,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testShutdown",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraHost.getDetail(\"transportzoneuuid\")).thenReturn(\"aaaa\");",
        "line": 452,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testShutdown",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraHost.getDetail(\"transportzoneisotype\")).thenReturn(\"stt\");",
        "line": 453,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testShutdown",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraHost.getId()).thenReturn(NETWORK_ID);",
        "line": 454,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testShutdown",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "hostVO",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenElementTest.java",
      "className": "TungstenElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO hostVO = mock(HostVO.class);",
        "line": 878,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "processHostAboutToBeRemovedWithSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(hostVO.getHypervisorType()).thenReturn(Hypervisor.HypervisorType.KVM);",
        "line": 883,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "processHostAboutToBeRemovedWithSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(hostVO.getPublicIpAddress()).thenReturn(\"192.168.100.100\");",
        "line": 885,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "processHostAboutToBeRemovedWithSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "hostVO",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenElementTest.java",
      "className": "TungstenElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO hostVO = mock(HostVO.class);",
        "line": 898,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "processHostAboutToBeRemovedWithoutSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(hostVO.getHypervisorType()).thenReturn(Hypervisor.HypervisorType.KVM);",
        "line": 902,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "processHostAboutToBeRemovedWithoutSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(hostVO.getPublicIpAddress()).thenReturn(\"192.168.100.100\");",
        "line": 904,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "processHostAboutToBeRemovedWithoutSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "host",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.deploy",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\deploy\\DeploymentPlanningManagerImplTest.java",
      "className": "DeploymentPlanningManagerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO host = Mockito.spy(new HostVO(\"host\"));",
        "line": 626,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "passEncRootLastHostSupportingEncryptionTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getStatus()).thenReturn(Status.Up);",
        "line": 631,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "passEncRootLastHostSupportingEncryptionTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "host",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.deploy",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\deploy\\DeploymentPlanningManagerImplTest.java",
      "className": "DeploymentPlanningManagerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO host = Mockito.spy(new HostVO(\"host\"));",
        "line": 656,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "failEncRootLastHostNotSupportingEncryptionTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getStatus()).thenReturn(Status.Up);",
        "line": 661,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "failEncRootLastHostNotSupportingEncryptionTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "host",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.deploy",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\deploy\\DeploymentPlanningManagerImplTest.java",
      "className": "DeploymentPlanningManagerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO host = Mockito.spy(new HostVO(\"host\"));",
        "line": 682,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "passEncRootPlannerHostSupportingEncryptionTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getStatus()).thenReturn(Status.Up);",
        "line": 687,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "passEncRootPlannerHostSupportingEncryptionTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "host",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.deploy",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\deploy\\DeploymentPlanningManagerImplTest.java",
      "className": "DeploymentPlanningManagerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO host = Mockito.spy(new HostVO(\"host\"));",
        "line": 707,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "failEncRootPlannerHostSupportingEncryptionTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getStatus()).thenReturn(Status.Up);",
        "line": 712,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "failEncRootPlannerHostSupportingEncryptionTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "host",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.deploy",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\deploy\\DeploymentPlanningManagerImplTest.java",
      "className": "DeploymentPlanningManagerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO host = Mockito.spy(new HostVO(\"host\"));",
        "line": 733,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "findSuitablePoolsForVolumesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getStatus()).thenReturn(Status.Up);",
        "line": 740,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "findSuitablePoolsForVolumesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "host",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.ha",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\ha\\KVMFencerTest.java",
      "className": "KVMFencerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO host = Mockito.mock(HostVO.class);",
        "line": 71,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithSingleHost",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getClusterId()).thenReturn(1l);",
        "line": 72,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithSingleHost",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getHypervisorType()).thenReturn(HypervisorType.KVM);",
        "line": 73,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithSingleHost",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getDataCenterId()).thenReturn(1l);",
        "line": 74,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithSingleHost",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getPodId()).thenReturn(1l);",
        "line": 75,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithSingleHost",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getStatus()).thenReturn(Status.Up);",
        "line": 76,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithSingleHost",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getId()).thenReturn(1l);",
        "line": 77,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithSingleHost",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "host",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.ha",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\ha\\KVMFencerTest.java",
      "className": "KVMFencerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO host = Mockito.mock(HostVO.class);",
        "line": 86,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithSingleHostDown",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getClusterId()).thenReturn(1l);",
        "line": 87,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithSingleHostDown",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getHypervisorType()).thenReturn(HypervisorType.KVM);",
        "line": 88,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithSingleHostDown",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getDataCenterId()).thenReturn(1l);",
        "line": 89,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithSingleHostDown",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getPodId()).thenReturn(1l);",
        "line": 90,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithSingleHostDown",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getStatus()).thenReturn(Status.Down);",
        "line": 91,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithSingleHostDown",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getId()).thenReturn(1l);",
        "line": 92,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithSingleHostDown",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "secondHost",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.ha",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\ha\\KVMFencerTest.java",
      "className": "KVMFencerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO secondHost = Mockito.mock(HostVO.class);",
        "line": 109,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithHosts",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.lenient().when(secondHost.getClusterId()).thenReturn(1l);",
        "line": 110,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithHosts",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(secondHost.getHypervisorType()).thenReturn(HypervisorType.KVM);",
        "line": 111,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithHosts",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(secondHost.getStatus()).thenReturn(Status.Up);",
        "line": 112,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithHosts",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.lenient().when(secondHost.getDataCenterId()).thenReturn(1l);",
        "line": 113,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithHosts",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.lenient().when(secondHost.getPodId()).thenReturn(1l);",
        "line": 114,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithHosts",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "host",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.ha",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\ha\\KVMFencerTest.java",
      "className": "KVMFencerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO host = Mockito.mock(HostVO.class);",
        "line": 101,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithHosts",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getClusterId()).thenReturn(1l);",
        "line": 102,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithHosts",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getHypervisorType()).thenReturn(HypervisorType.KVM);",
        "line": 103,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithHosts",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getStatus()).thenReturn(Status.Up);",
        "line": 104,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithHosts",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.lenient().when(host.getDataCenterId()).thenReturn(1l);",
        "line": 105,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithHosts",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.lenient().when(host.getPodId()).thenReturn(1l);",
        "line": 106,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithHosts",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getId()).thenReturn(1l);",
        "line": 107,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithHosts",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getId()).thenReturn(2l);",
        "line": 115,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithHosts",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "secondHost",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.ha",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\ha\\KVMFencerTest.java",
      "className": "KVMFencerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO secondHost = Mockito.mock(HostVO.class);",
        "line": 137,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithFailingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.lenient().when(secondHost.getClusterId()).thenReturn(1l);",
        "line": 138,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithFailingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(secondHost.getHypervisorType()).thenReturn(HypervisorType.KVM);",
        "line": 139,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithFailingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(secondHost.getStatus()).thenReturn(Status.Up);",
        "line": 140,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithFailingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.lenient().when(secondHost.getDataCenterId()).thenReturn(1l);",
        "line": 141,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithFailingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.lenient().when(secondHost.getPodId()).thenReturn(1l);",
        "line": 142,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithFailingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "host",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.ha",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\ha\\KVMFencerTest.java",
      "className": "KVMFencerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO host = Mockito.mock(HostVO.class);",
        "line": 129,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithFailingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getClusterId()).thenReturn(1l);",
        "line": 130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithFailingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getHypervisorType()).thenReturn(HypervisorType.KVM);",
        "line": 131,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithFailingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getStatus()).thenReturn(Status.Up);",
        "line": 132,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithFailingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getDataCenterId()).thenReturn(1l);",
        "line": 133,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithFailingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getPodId()).thenReturn(1l);",
        "line": 134,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithFailingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getId()).thenReturn(1l);",
        "line": 135,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithFailingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getId()).thenReturn(2l);",
        "line": 143,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithFailingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "secondHost",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.ha",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\ha\\KVMFencerTest.java",
      "className": "KVMFencerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO secondHost = Mockito.mock(HostVO.class);",
        "line": 164,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithTimeoutingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.lenient().when(secondHost.getClusterId()).thenReturn(1l);",
        "line": 165,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithTimeoutingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(secondHost.getHypervisorType()).thenReturn(HypervisorType.KVM);",
        "line": 166,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithTimeoutingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(secondHost.getStatus()).thenReturn(Status.Up);",
        "line": 167,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithTimeoutingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.lenient().when(secondHost.getDataCenterId()).thenReturn(1l);",
        "line": 168,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithTimeoutingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.lenient().when(secondHost.getPodId()).thenReturn(1l);",
        "line": 169,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithTimeoutingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "host",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.ha",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\ha\\KVMFencerTest.java",
      "className": "KVMFencerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO host = Mockito.mock(HostVO.class);",
        "line": 156,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithTimeoutingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getClusterId()).thenReturn(1l);",
        "line": 157,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithTimeoutingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getHypervisorType()).thenReturn(HypervisorType.KVM);",
        "line": 158,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithTimeoutingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getStatus()).thenReturn(Status.Up);",
        "line": 159,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithTimeoutingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getDataCenterId()).thenReturn(1l);",
        "line": 160,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithTimeoutingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getPodId()).thenReturn(1l);",
        "line": 161,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithTimeoutingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getId()).thenReturn(1l);",
        "line": 162,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithTimeoutingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getId()).thenReturn(2l);",
        "line": 170,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithTimeoutingFence",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "host",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.ha",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\ha\\KVMFencerTest.java",
      "className": "KVMFencerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO host = Mockito.mock(HostVO.class);",
        "line": 183,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithSingleNotKVM",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.lenient().when(host.getClusterId()).thenReturn(1l);",
        "line": 184,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithSingleNotKVM",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getHypervisorType()).thenReturn(HypervisorType.Any);",
        "line": 185,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithSingleNotKVM",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.lenient().when(host.getStatus()).thenReturn(Status.Down);",
        "line": 186,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithSingleNotKVM",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.lenient().when(host.getId()).thenReturn(1l);",
        "line": 187,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithSingleNotKVM",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.lenient().when(host.getDataCenterId()).thenReturn(1l);",
        "line": 188,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithSingleNotKVM",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.lenient().when(host.getPodId()).thenReturn(1l);",
        "line": 189,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithSingleNotKVM",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "host",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.storage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\storage\\VolumeApiServiceImplTest.java",
      "className": "VolumeApiServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO host = Mockito.mock(HostVO.class);",
        "line": 1569,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsSendCommandForVmVolumeAttachDetachVMwareHost",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getHypervisorType()).thenReturn(HypervisorType.VMware);",
        "line": 1570,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsSendCommandForVmVolumeAttachDetachVMwareHost",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "host",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.storage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\storage\\VolumeApiServiceImplTest.java",
      "className": "VolumeApiServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO host = Mockito.mock(HostVO.class);",
        "line": 1576,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsSendCommandForVmVolumeAttachDetachXenserverHostNonMananged",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getHypervisorType()).thenReturn(HypervisorType.XenServer);",
        "line": 1577,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsSendCommandForVmVolumeAttachDetachXenserverHostNonMananged",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "host",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.storage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\storage\\VolumeApiServiceImplTest.java",
      "className": "VolumeApiServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO host = Mockito.mock(HostVO.class);",
        "line": 1583,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsSendCommandForVmVolumeAttachDetachXenserverHostMananged",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getHypervisorType()).thenReturn(HypervisorType.XenServer);",
        "line": 1584,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsSendCommandForVmVolumeAttachDetachXenserverHostMananged",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "host",
    "variableType": "HostVO",
    "mockedClass": "HostVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.storage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\storage\\VolumeApiServiceImplTest.java",
      "className": "VolumeApiServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HostVO host = Mockito.mock(HostVO.class);",
        "line": 1592,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsSendCommandForVmVolumeAttachDetachKVMHost",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(host.getHypervisorType()).thenReturn(HypervisorType.KVM);",
        "line": 1593,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsSendCommandForVmVolumeAttachDetachKVMHost",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
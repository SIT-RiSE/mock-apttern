[
  {
    "variableName": "storagePoolVoMock",
    "variableType": "StoragePoolVO",
    "mockedClass": "StoragePoolVO",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "com.cloud.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\orchestration\\src\\test\\java\\com\\cloud\\vm\\VirtualMachineManagerImplTest.java",
      "className": "VirtualMachineManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate StoragePoolVO storagePoolVoMock;",
        "line": 154,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(storagePoolVoMock).isManaged();",
        "line": 416,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeManagedStorageChecksWhenTargetStoragePoolProvidedTestCurrentStoragePoolNotManaged",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(storagePoolVoMock, Mockito.times(0)).getId();",
        "line": 417,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeManagedStorageChecksWhenTargetStoragePoolProvidedTestCurrentStoragePoolNotManaged",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(storagePoolVoMock).isManaged();",
        "line": 427,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "allowVolumeMigrationsForPowerFlexStorage",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(storagePoolVoMock, Mockito.times(0)).getId();",
        "line": 428,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "allowVolumeMigrationsForPowerFlexStorage",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(storagePoolVoMock.getPoolType()).thenAnswer((Answer<Storage.StoragePoolType>) invocation -> {\r\n    List<Storage.StoragePoolType> filteredValues = values.stream().filter(v -> v != Storage.StoragePoolType.PowerFlex).collect(Collectors.toList());\r\n    int randomIndex = new Random().nextInt(filteredValues.size());\r\n    return filteredValues.get(randomIndex);\r\n});",
        "line": 436,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeManagedStorageChecksWhenTargetStoragePoolProvidedTestCurrentStoragePoolEqualsTargetPool",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(storagePoolVoMock).isManaged();",
        "line": 443,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeManagedStorageChecksWhenTargetStoragePoolProvidedTestCurrentStoragePoolEqualsTargetPool",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(storagePoolVoMock, Mockito.times(2)).getId();",
        "line": 444,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeManagedStorageChecksWhenTargetStoragePoolProvidedTestCurrentStoragePoolEqualsTargetPool",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(storagePoolVoMock.getPoolType()).thenAnswer((Answer<Storage.StoragePoolType>) invocation -> {\r\n    List<Storage.StoragePoolType> filteredValues = values.stream().filter(v -> v != Storage.StoragePoolType.PowerFlex).collect(Collectors.toList());\r\n    int randomIndex = new Random().nextInt(filteredValues.size());\r\n    return filteredValues.get(randomIndex);\r\n});",
        "line": 452,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeManagedStorageChecksWhenTargetStoragePoolProvidedTestCurrentStoragePoolNotEqualsTargetPool",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(storagePoolVoMock).isManaged();",
        "line": 524,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeManagedStorageChecksWhenTargetStoragePoolNotProvidedTestCurrentStoragePoolNotManaged",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(storagePoolVoMock).isManaged();",
        "line": 535,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeManagedStorageChecksWhenTargetStoragePoolNotProvidedTestCurrentStoragePoolManagedIsConnectedToHost",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  }
]
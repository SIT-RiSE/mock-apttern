[
  {
    "variableName": "autoScaleVmGroupVmMapDao",
    "variableType": "AutoScaleVmGroupVmMapDao",
    "mockedClass": "AutoScaleVmGroupVmMapDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.as",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\as\\AutoScaleManagerImplTest.java",
      "className": "AutoScaleManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nAutoScaleVmGroupVmMapDao autoScaleVmGroupVmMapDao;",
        "line": 240,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(autoScaleVmGroupVmMapDao.countByGroup(vmGroupId)).thenReturn(1);",
        "line": 1207,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteAutoScaleVmGroupsByAccount",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(autoScaleVmGroupVmMapDao.listByGroup(vmGroupId)).thenReturn(Arrays.asList(autoScaleVmGroupVmMapVOMock));",
        "line": 1208,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteAutoScaleVmGroupsByAccount",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(autoScaleVmGroupVmMapDao.removeByGroup(vmGroupId)).thenReturn(true);",
        "line": 1215,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteAutoScaleVmGroupsByAccount",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(autoScaleVmGroupVmMapDao.countAvailableVmsByGroup(vmGroupId)).thenReturn(maxMembers - 1);",
        "line": 1514,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDoScaleUp",
          "methodAnnotations": [
            "@Test",
            "@PrepareForTest"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(autoScaleVmGroupVmMapDao.countAvailableVmsByGroup(vmGroupId)).thenReturn(minMembers + 1);",
        "line": 1544,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDoScaleDown",
          "methodAnnotations": [
            "@Test",
            "@PrepareForTest"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(autoScaleVmGroupVmMapDao.listByGroup(vmGroupId)).thenReturn(Arrays.asList(autoScaleVmGroupVmMapVOMock));",
        "line": 1698,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getHostAndVmIdsMap",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(autoScaleVmGroupVmMapDao.countAvailableVmsByGroup(vmGroupId)).thenReturn(minMembers);",
        "line": 1951,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkNetScalerAsGroup",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(autoScaleVmGroupVmMapDao.listByGroup(vmGroupId)).thenReturn(Arrays.asList(autoScaleVmGroupVmMapVOMock));",
        "line": 1955,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkNetScalerAsGroup",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(autoScaleVmGroupVmMapDao.countAvailableVmsByGroup(vmGroupId)).thenReturn(1);",
        "line": 2124,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateCountersMap2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(autoScaleVmGroupVmMapDao.countAvailableVmsByGroup(vmGroupId)).thenReturn(minMembers);",
        "line": 2236,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "monitorVirtualRouterAsGroup",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(autoScaleVmGroupVmMapDao.listByVm(virtualMachineId)).thenReturn(Arrays.asList(autoScaleVmGroupVmMapVOMock));",
        "line": 2488,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfVmActionAllowed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(autoScaleVmGroupVmMapDao.listByVm(virtualMachineId)).thenReturn(Arrays.asList(autoScaleVmGroupVmMapVOMock));",
        "line": 2500,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfVmActionAllowedFail",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
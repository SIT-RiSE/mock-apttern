[
  {
    "variableName": "dataCenterGuestIpv6PrefixDao",
    "variableType": "DataCenterGuestIpv6PrefixDao",
    "mockedClass": "DataCenterGuestIpv6PrefixDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.configuration",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\configuration\\ConfigurationManagerTest.java",
      "className": "ConfigurationManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nDataCenterGuestIpv6PrefixDao dataCenterGuestIpv6PrefixDao;",
        "line": 207,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.listByDataCenterId(Mockito.anyLong())).thenReturn(List.of(prefix));",
        "line": 1119,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConflictingCreateDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.listByDataCenterId(Mockito.anyLong())).thenReturn(new ArrayList<>());",
        "line": 1131,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.persist(Mockito.any(DataCenterGuestIpv6PrefixVO.class))).thenAnswer((Answer<DataCenterGuestIpv6PrefixVO>) invocation -> {\r\n    DataCenterGuestIpv6PrefixVO prefixVO = (DataCenterGuestIpv6PrefixVO) invocation.getArgument(0);\r\n    persistedPrefix.add(prefixVO);\r\n    return prefixVO;\r\n});",
        "line": 1133,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.findById(Mockito.anyLong())).thenReturn(Mockito.mock(DataCenterGuestIpv6PrefixVO.class));",
        "line": 1151,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testListDataCenterGuestIpv6Prefixes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.listByDataCenterId(Mockito.anyLong())).thenReturn(List.of(Mockito.mock(DataCenterGuestIpv6PrefixVO.class), Mockito.mock(DataCenterGuestIpv6PrefixVO.class)));",
        "line": 1152,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testListDataCenterGuestIpv6Prefixes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.listAll()).thenReturn(List.of(Mockito.mock(DataCenterGuestIpv6PrefixVO.class), Mockito.mock(DataCenterGuestIpv6PrefixVO.class), Mockito.mock(DataCenterGuestIpv6PrefixVO.class)));",
        "line": 1154,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testListDataCenterGuestIpv6Prefixes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.findById(Mockito.anyLong())).thenReturn(null);",
        "line": 1176,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvalidDeleteDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.findById(Mockito.anyLong())).thenReturn(prefixVO);",
        "line": 1187,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUsedDeleteDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.findById(Mockito.anyLong())).thenReturn(prefixVO);",
        "line": 1200,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.remove(Mockito.anyLong())).thenAnswer((Answer<Boolean>) invocation -> {\r\n    removedPrefix.add(invocation.getArgument(0));\r\n    return true;\r\n});",
        "line": 1203,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "dataCenterGuestIpv6PrefixDao",
    "variableType": "DataCenterGuestIpv6PrefixDao",
    "mockedClass": "DataCenterGuestIpv6PrefixDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.configuration",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\configuration\\ConfigurationManagerTest.java",
      "className": "ConfigurationManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nDataCenterGuestIpv6PrefixDao dataCenterGuestIpv6PrefixDao;",
        "line": 207,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.listByDataCenterId(Mockito.anyLong())).thenReturn(List.of(prefix));",
        "line": 1119,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConflictingCreateDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.listByDataCenterId(Mockito.anyLong())).thenReturn(new ArrayList<>());",
        "line": 1131,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.persist(Mockito.any(DataCenterGuestIpv6PrefixVO.class))).thenAnswer((Answer<DataCenterGuestIpv6PrefixVO>) invocation -> {\r\n    DataCenterGuestIpv6PrefixVO prefixVO = (DataCenterGuestIpv6PrefixVO) invocation.getArgument(0);\r\n    persistedPrefix.add(prefixVO);\r\n    return prefixVO;\r\n});",
        "line": 1133,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.findById(Mockito.anyLong())).thenReturn(Mockito.mock(DataCenterGuestIpv6PrefixVO.class));",
        "line": 1151,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testListDataCenterGuestIpv6Prefixes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.listByDataCenterId(Mockito.anyLong())).thenReturn(List.of(Mockito.mock(DataCenterGuestIpv6PrefixVO.class), Mockito.mock(DataCenterGuestIpv6PrefixVO.class)));",
        "line": 1152,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testListDataCenterGuestIpv6Prefixes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.listAll()).thenReturn(List.of(Mockito.mock(DataCenterGuestIpv6PrefixVO.class), Mockito.mock(DataCenterGuestIpv6PrefixVO.class), Mockito.mock(DataCenterGuestIpv6PrefixVO.class)));",
        "line": 1154,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testListDataCenterGuestIpv6Prefixes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.findById(Mockito.anyLong())).thenReturn(null);",
        "line": 1176,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvalidDeleteDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.findById(Mockito.anyLong())).thenReturn(prefixVO);",
        "line": 1187,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUsedDeleteDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.findById(Mockito.anyLong())).thenReturn(prefixVO);",
        "line": 1200,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.remove(Mockito.anyLong())).thenAnswer((Answer<Boolean>) invocation -> {\r\n    removedPrefix.add(invocation.getArgument(0));\r\n    return true;\r\n});",
        "line": 1203,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "dataCenterGuestIpv6PrefixDao",
    "variableType": "DataCenterGuestIpv6PrefixDao",
    "mockedClass": "DataCenterGuestIpv6PrefixDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.configuration",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\configuration\\ConfigurationManagerTest.java",
      "className": "ConfigurationManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nDataCenterGuestIpv6PrefixDao dataCenterGuestIpv6PrefixDao;",
        "line": 207,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.listByDataCenterId(Mockito.anyLong())).thenReturn(List.of(prefix));",
        "line": 1119,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConflictingCreateDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.listByDataCenterId(Mockito.anyLong())).thenReturn(new ArrayList<>());",
        "line": 1131,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.persist(Mockito.any(DataCenterGuestIpv6PrefixVO.class))).thenAnswer((Answer<DataCenterGuestIpv6PrefixVO>) invocation -> {\r\n    DataCenterGuestIpv6PrefixVO prefixVO = (DataCenterGuestIpv6PrefixVO) invocation.getArgument(0);\r\n    persistedPrefix.add(prefixVO);\r\n    return prefixVO;\r\n});",
        "line": 1133,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.findById(Mockito.anyLong())).thenReturn(Mockito.mock(DataCenterGuestIpv6PrefixVO.class));",
        "line": 1151,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testListDataCenterGuestIpv6Prefixes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.listByDataCenterId(Mockito.anyLong())).thenReturn(List.of(Mockito.mock(DataCenterGuestIpv6PrefixVO.class), Mockito.mock(DataCenterGuestIpv6PrefixVO.class)));",
        "line": 1152,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testListDataCenterGuestIpv6Prefixes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.listAll()).thenReturn(List.of(Mockito.mock(DataCenterGuestIpv6PrefixVO.class), Mockito.mock(DataCenterGuestIpv6PrefixVO.class), Mockito.mock(DataCenterGuestIpv6PrefixVO.class)));",
        "line": 1154,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testListDataCenterGuestIpv6Prefixes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.findById(Mockito.anyLong())).thenReturn(null);",
        "line": 1176,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvalidDeleteDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.findById(Mockito.anyLong())).thenReturn(prefixVO);",
        "line": 1187,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUsedDeleteDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.findById(Mockito.anyLong())).thenReturn(prefixVO);",
        "line": 1200,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.remove(Mockito.anyLong())).thenAnswer((Answer<Boolean>) invocation -> {\r\n    removedPrefix.add(invocation.getArgument(0));\r\n    return true;\r\n});",
        "line": 1203,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "dataCenterGuestIpv6PrefixDao",
    "variableType": "DataCenterGuestIpv6PrefixDao",
    "mockedClass": "DataCenterGuestIpv6PrefixDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\Ipv6ServiceImplTest.java",
      "className": "Ipv6ServiceImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nDataCenterGuestIpv6PrefixDao dataCenterGuestIpv6PrefixDao;",
        "line": 107,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.listByDataCenterId(zoneId)).thenReturn(prefixes);",
        "line": 198,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNoPrefixesGetUsedTotalIpv6SubnetForZone",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.listByDataCenterId(zoneId)).thenReturn(prefixes);",
        "line": 211,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetUsedTotalIpv6SubnetForZone",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.listByDataCenterId(zoneId)).thenReturn(prefixes);",
        "line": 222,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNoPrefixesPreAllocateIpv6SubnetForNetwork",
          "methodAnnotations": [
            "@Test",
            "@DB"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.listByDataCenterId(zoneId)).thenReturn(prefixes);",
        "line": 239,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExistingPreAllocateIpv6SubnetForNetwork",
          "methodAnnotations": [
            "@Test",
            "@DB"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.listByDataCenterId(zoneId)).thenReturn(prefixes);",
        "line": 270,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNewPreAllocateIpv6SubnetForNetwork",
          "methodAnnotations": [
            "@Test",
            "@DB"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.listByDataCenterId(Mockito.anyLong())).thenReturn(new ArrayList<>());",
        "line": 587,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckNetworkIpv6UpgradeForNoPrefixes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.listByDataCenterId(Mockito.anyLong())).thenReturn(List.of(Mockito.mock(DataCenterGuestIpv6PrefixVO.class)));",
        "line": 597,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckNetworkIpv6UpgradeForNoIpv6Vlan",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dataCenterGuestIpv6PrefixDao.listByDataCenterId(Mockito.anyLong())).thenReturn(List.of(Mockito.mock(DataCenterGuestIpv6PrefixVO.class)));",
        "line": 615,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckNetworkIpv6UpgradeForNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
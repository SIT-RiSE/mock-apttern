[
  {
    "variableName": "_client",
    "variableType": "HttpClient",
    "mockedClass": "HttpClient",
    "isReuseableMock": null,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 @Before\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "com.cloud.network.bigswitch",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\bigswitch\\src\\test\\java\\com\\cloud\\network\\bigswitch\\BigSwitchApiTest.java",
      "className": "BigSwitchApiTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "HttpClient _client = mock(HttpClient.class);",
        "line": 52,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_client.getParams()).thenReturn(hmp);",
        "line": 58,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_client.executeMethod((HttpMethod) any())).thenThrow(new HttpException());",
        "line": 230,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeMethodTestUnauthorized",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(_client, times(1)).executeMethod(_method);",
        "line": 243,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteCreateObjectOK",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_client.executeMethod((HttpMethod) any())).thenThrow(new HttpException());",
        "line": 286,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteCreateObjectException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(_client, times(1)).executeMethod(_method);",
        "line": 308,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteUpdateObjectOK",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_client.executeMethod((HttpMethod) any())).thenThrow(new IOException());",
        "line": 353,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteUpdateObjectException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(_client, times(1)).executeMethod(_method);",
        "line": 367,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteDeleteObject",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_client.executeMethod((HttpMethod) any())).thenThrow(new HttpException());",
        "line": 390,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteDeleteObjectException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(_client, times(1)).executeMethod(_method);",
        "line": 406,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteRetrieveControllerPrimaryStatus",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(_client, times(1)).executeMethod(_method);",
        "line": 418,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteRetrieveControllerPrimaryStatusWithTopoConflict",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(_client, times(1)).executeMethod(_method);",
        "line": 430,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteRetrieveControllerSecondaryStatus",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 21
  }
]
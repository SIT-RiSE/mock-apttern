[
  {
    "variableName": "vm",
    "variableType": "VMInstanceVO",
    "mockedClass": "VMInstanceVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\orchestration\\src\\test\\java\\com\\cloud\\vm\\VirtualMachineManagerImplTest.java",
      "className": "VirtualMachineManagerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "VMInstanceVO vm = Mockito.mock(VMInstanceVO.class);",
        "line": 858,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfTemplateNeededForCreatingVmVolumesExistingRootVolumes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(vm.getId()).thenReturn(vmId);",
        "line": 859,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfTemplateNeededForCreatingVmVolumesExistingRootVolumes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "VMInstanceVO",
    "mockedClass": "VMInstanceVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\orchestration\\src\\test\\java\\com\\cloud\\vm\\VirtualMachineManagerImplTest.java",
      "className": "VirtualMachineManagerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "VMInstanceVO vm = Mockito.mock(VMInstanceVO.class);",
        "line": 868,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfTemplateNeededForCreatingVmVolumesMissingTemplate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(vm.getId()).thenReturn(vmId);",
        "line": 869,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfTemplateNeededForCreatingVmVolumesMissingTemplate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(vm.getTemplateId()).thenReturn(templateId);",
        "line": 870,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfTemplateNeededForCreatingVmVolumesMissingTemplate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "VMInstanceVO",
    "mockedClass": "VMInstanceVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\orchestration\\src\\test\\java\\com\\cloud\\vm\\VirtualMachineManagerImplTest.java",
      "className": "VirtualMachineManagerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "VMInstanceVO vm = Mockito.mock(VMInstanceVO.class);",
        "line": 881,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfTemplateNeededForCreatingVmVolumesMissingZoneTemplate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(vm.getId()).thenReturn(vmId);",
        "line": 882,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfTemplateNeededForCreatingVmVolumesMissingZoneTemplate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(vm.getTemplateId()).thenReturn(templateId);",
        "line": 883,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfTemplateNeededForCreatingVmVolumesMissingZoneTemplate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(vm.getDataCenterId()).thenReturn(dcId);",
        "line": 884,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfTemplateNeededForCreatingVmVolumesMissingZoneTemplate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(vm.getId()).thenReturn(templateId);",
        "line": 887,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfTemplateNeededForCreatingVmVolumesMissingZoneTemplate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "VMInstanceVO",
    "mockedClass": "VMInstanceVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\orchestration\\src\\test\\java\\com\\cloud\\vm\\VirtualMachineManagerImplTest.java",
      "className": "VirtualMachineManagerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "VMInstanceVO vm = Mockito.mock(VMInstanceVO.class);",
        "line": 897,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfTemplateNeededForCreatingVmVolumesTemplateAvailable",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(vm.getId()).thenReturn(vmId);",
        "line": 898,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfTemplateNeededForCreatingVmVolumesTemplateAvailable",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(vm.getTemplateId()).thenReturn(templateId);",
        "line": 899,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfTemplateNeededForCreatingVmVolumesTemplateAvailable",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(vm.getDataCenterId()).thenReturn(dcId);",
        "line": 900,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfTemplateNeededForCreatingVmVolumesTemplateAvailable",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "VMInstanceVO",
    "mockedClass": "VMInstanceVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\orchestration\\src\\test\\java\\com\\cloud\\vm\\VirtualMachineManagerImplTest.java",
      "className": "VirtualMachineManagerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// Below scenarios shouldn't result in VM migration\r\nVMInstanceVO vm = Mockito.mock(VMInstanceVO.class);",
        "line": 913,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkAndAttemptMigrateVmAcrossClusterNonValid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(vm.getHypervisorType()).thenReturn(HypervisorType.KVM);",
        "line": 914,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkAndAttemptMigrateVmAcrossClusterNonValid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(vm.getHypervisorType()).thenReturn(HypervisorType.VMware);",
        "line": 917,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkAndAttemptMigrateVmAcrossClusterNonValid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(vm.getLastHostId()).thenReturn(null);",
        "line": 918,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkAndAttemptMigrateVmAcrossClusterNonValid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(vm.getLastHostId()).thenReturn(1L);",
        "line": 922,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkAndAttemptMigrateVmAcrossClusterNonValid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm2",
    "variableType": "VMInstanceVO",
    "mockedClass": "VMInstanceVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.affinity",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\affinity-group-processors\\non-strict-host-affinity\\src\\test\\java\\org\\apache\\cloudstack\\affinity\\NonStrictHostAffinityProcessorTest.java",
      "className": "NonStrictHostAffinityProcessorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "VMInstanceVO vm2 = Mockito.mock(VMInstanceVO.class);",
        "line": 159,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessWithNotRunningVM",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm2.getHostId()).thenReturn(null);",
        "line": 161,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessWithNotRunningVM",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm2.getLastHostId()).thenReturn(host2Id);",
        "line": 162,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessWithNotRunningVM",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm2.getState()).thenReturn(VirtualMachine.State.Starting);",
        "line": 163,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessWithNotRunningVM",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm2.getUpdateTime()).thenReturn(new Date());",
        "line": 164,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessWithNotRunningVM",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm2",
    "variableType": "VMInstanceVO",
    "mockedClass": "VMInstanceVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.affinity",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\affinity-group-processors\\non-strict-host-anti-affinity\\src\\test\\java\\org\\apache\\cloudstack\\affinity\\NonStrictHostAntiAffinityProcessorTest.java",
      "className": "NonStrictHostAntiAffinityProcessorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "VMInstanceVO vm2 = Mockito.mock(VMInstanceVO.class);",
        "line": 158,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessWithNotRunningVM",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm2.getHostId()).thenReturn(null);",
        "line": 160,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessWithNotRunningVM",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm2.getLastHostId()).thenReturn(host2Id);",
        "line": 161,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessWithNotRunningVM",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm2.getState()).thenReturn(VirtualMachine.State.Starting);",
        "line": 162,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessWithNotRunningVM",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm2.getUpdateTime()).thenReturn(new Date());",
        "line": 163,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessWithNotRunningVM",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "VMInstanceVO",
    "mockedClass": "VMInstanceVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.implicitplanner",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\deployment-planners\\implicit-dedication\\src\\test\\java\\org\\apache\\cloudstack\\implicitplanner\\ImplicitPlannerTest.java",
      "className": "ImplicitPlannerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "VMInstanceVO vm = mock(VMInstanceVO.class);",
        "line": 188,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkWhenDcInAvoidList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getDataCenterId()).thenReturn(1L);",
        "line": 193,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkWhenDcInAvoidList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "VMInstanceVO",
    "mockedClass": "VMInstanceVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.implicitplanner",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\deployment-planners\\implicit-dedication\\src\\test\\java\\org\\apache\\cloudstack\\implicitplanner\\ImplicitPlannerTest.java",
      "className": "ImplicitPlannerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "VMInstanceVO vm = mock(VMInstanceVO.class);",
        "line": 330,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getDataCenterId()).thenReturn(dataCenterId);",
        "line": 343,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForTest",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "VMInstanceVO",
    "mockedClass": "VMInstanceVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.contrail.model",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\juniper-contrail\\src\\test\\java\\org\\apache\\cloudstack\\network\\contrail\\model\\InstanceIpModelTest.java",
      "className": "InstanceIpModelTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// Create Virtual-Machine (VM)\r\nVMInstanceVO vm = mock(VMInstanceVO.class);",
        "line": 84,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateInstanceIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getInstanceName()).thenReturn(\"testVM1\");",
        "line": 85,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateInstanceIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getState()).thenReturn(VirtualMachine.State.Running);",
        "line": 86,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateInstanceIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getDomainId()).thenReturn(10L);",
        "line": 87,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateInstanceIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getAccountId()).thenReturn(42L);",
        "line": 88,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateInstanceIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "VMInstanceVO",
    "mockedClass": "VMInstanceVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.contrail.model",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\juniper-contrail\\src\\test\\java\\org\\apache\\cloudstack\\network\\contrail\\model\\VirtualMachineModelTest.java",
      "className": "VirtualMachineModelTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// Create Virtual-Machine (VM)\r\nVMInstanceVO vm = mock(VMInstanceVO.class);",
        "line": 96,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVirtualMachine",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getInstanceName()).thenReturn(\"testVM1\");",
        "line": 97,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVirtualMachine",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getState()).thenReturn(VirtualMachine.State.Starting);",
        "line": 98,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVirtualMachine",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getDomainId()).thenReturn(10L);",
        "line": 99,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVirtualMachine",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getAccountId()).thenReturn(42L);",
        "line": 100,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVirtualMachine",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "VMInstanceVO",
    "mockedClass": "VMInstanceVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.contrail.model",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\juniper-contrail\\src\\test\\java\\org\\apache\\cloudstack\\network\\contrail\\model\\VMInterfaceModelTest.java",
      "className": "VMInterfaceModelTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// Create Virtual-Machine (VM)\r\nVMInstanceVO vm = mock(VMInstanceVO.class);",
        "line": 86,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVMInterface",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getInstanceName()).thenReturn(\"testVM1\");",
        "line": 87,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVMInterface",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getState()).thenReturn(VirtualMachine.State.Running);",
        "line": 88,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVMInterface",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getDomainId()).thenReturn(10L);",
        "line": 89,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVMInterface",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getAccountId()).thenReturn(42L);",
        "line": 90,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVMInterface",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "VMInstanceVO",
    "mockedClass": "VMInstanceVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.datastore.driver",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\storage\\volume\\storpool\\src\\test\\java\\org\\apache\\cloudstack\\storage\\datastore\\driver\\StorPoolPrimaryDataStoreDriverTest.java",
      "className": "StorPoolPrimaryDataStoreDriverTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "VMInstanceVO vm = mock(VMInstanceVO.class);",
        "line": 120,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMigrateVolumePassed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getState()).thenReturn(State.Running);",
        "line": 122,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMigrateVolumePassed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "VMInstanceVO",
    "mockedClass": "VMInstanceVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.datastore.driver",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\storage\\volume\\storpool\\src\\test\\java\\org\\apache\\cloudstack\\storage\\datastore\\driver\\StorPoolPrimaryDataStoreDriverTest.java",
      "className": "StorPoolPrimaryDataStoreDriverTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "VMInstanceVO vm = mock(VMInstanceVO.class);",
        "line": 136,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMigrateVolumeNotPassed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getState()).thenReturn(State.Running);",
        "line": 139,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMigrateVolumeNotPassed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "VMInstanceVO",
    "mockedClass": "VMInstanceVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.datastore.driver",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\storage\\volume\\storpool\\src\\test\\java\\org\\apache\\cloudstack\\storage\\datastore\\driver\\StorPoolPrimaryDataStoreDriverTest.java",
      "className": "StorPoolPrimaryDataStoreDriverTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "VMInstanceVO vm = mock(VMInstanceVO.class);",
        "line": 152,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCopyVolumeAttachedToVmPassed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getState()).thenReturn(State.Stopped);",
        "line": 155,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCopyVolumeAttachedToVmPassed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getUuid()).thenReturn(vmUuid);",
        "line": 157,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCopyVolumeAttachedToVmPassed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "VMInstanceVO",
    "mockedClass": "VMInstanceVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.datastore.driver",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\storage\\volume\\storpool\\src\\test\\java\\org\\apache\\cloudstack\\storage\\datastore\\driver\\StorPoolPrimaryDataStoreDriverTest.java",
      "className": "StorPoolPrimaryDataStoreDriverTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "VMInstanceVO vm = mock(VMInstanceVO.class);",
        "line": 172,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCopyVolumeAttachedToVmNotPassed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getState()).thenReturn(State.Stopped);",
        "line": 175,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCopyVolumeAttachedToVmNotPassed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getUuid()).thenReturn(vmUuid);",
        "line": 177,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCopyVolumeAttachedToVmNotPassed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm2",
    "variableType": "VMInstanceVO",
    "mockedClass": "VMInstanceVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.ha",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\ha\\HighAvailabilityManagerImplTest.java",
      "className": "HighAvailabilityManagerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "VMInstanceVO vm2 = Mockito.mock(VMInstanceVO.class);",
        "line": 192,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "scheduleRestartForVmsOnHostNonEmptyVMList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(vm2.getHostId()).thenReturn(1l);",
        "line": 193,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "scheduleRestartForVmsOnHostNonEmptyVMList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(vm2.getInstanceName()).thenReturn(\"r-2-VM\");",
        "line": 194,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "scheduleRestartForVmsOnHostNonEmptyVMList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(vm2.getType()).thenReturn(VirtualMachine.Type.DomainRouter);",
        "line": 195,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "scheduleRestartForVmsOnHostNonEmptyVMList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(vm2.isHaEnabled()).thenReturn(true);",
        "line": 196,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "scheduleRestartForVmsOnHostNonEmptyVMList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm1",
    "variableType": "VMInstanceVO",
    "mockedClass": "VMInstanceVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.ha",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\ha\\HighAvailabilityManagerImplTest.java",
      "className": "HighAvailabilityManagerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "VMInstanceVO vm1 = Mockito.mock(VMInstanceVO.class);",
        "line": 186,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "scheduleRestartForVmsOnHostNonEmptyVMList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.lenient().when(vm1.getHostId()).thenReturn(1l);",
        "line": 187,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "scheduleRestartForVmsOnHostNonEmptyVMList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(vm1.getInstanceName()).thenReturn(\"i-2-3-VM\");",
        "line": 188,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "scheduleRestartForVmsOnHostNonEmptyVMList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(vm1.getType()).thenReturn(VirtualMachine.Type.User);",
        "line": 189,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "scheduleRestartForVmsOnHostNonEmptyVMList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(vm1.isHaEnabled()).thenReturn(true);",
        "line": 190,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "scheduleRestartForVmsOnHostNonEmptyVMList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vmInstanceVO",
    "variableType": "VMInstanceVO",
    "mockedClass": "VMInstanceVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.template",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\template\\TemplateManagerImplTest.java",
      "className": "TemplateManagerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "VMInstanceVO vmInstanceVO = mock(VMInstanceVO.class);",
        "line": 278,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testForceDeleteTemplate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vmInstanceVO.getInstanceName()).thenReturn(\"mydDummyVM\");",
        "line": 279,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testForceDeleteTemplate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "VMInstanceVO",
    "mockedClass": "VMInstanceVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\vm\\FirstFitPlannerTest.java",
      "className": "FirstFitPlannerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "VMInstanceVO vm = mock(VMInstanceVO.class);",
        "line": 263,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getDataCenterId()).thenReturn(dataCenterId);",
        "line": 276,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForTest",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vmInstanceVO",
    "variableType": "VMInstanceVO",
    "mockedClass": "VMInstanceVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.router.deployment",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\org\\apache\\cloudstack\\network\\router\\deployment\\RouterDeploymentDefinitionTest.java",
      "className": "RouterDeploymentDefinitionTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// Prepare\r\nfinal VMInstanceVO vmInstanceVO = mock(VMInstanceVO.class);",
        "line": 440,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testListByDataCenterIdVMTypeAndStates",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vmInstanceVO.getType()).thenReturn(VirtualMachine.Type.Instance);",
        "line": 444,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testListByDataCenterIdVMTypeAndStates",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vmInstanceVO.getState()).thenReturn(VirtualMachine.State.Stopped);",
        "line": 445,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testListByDataCenterIdVMTypeAndStates",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vmInstanceVO.getPodIdToDeployIn()).thenReturn(POD_ID1);",
        "line": 446,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testListByDataCenterIdVMTypeAndStates",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
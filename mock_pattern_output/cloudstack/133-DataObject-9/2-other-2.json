[
  {
    "variableName": "dataObjectDestination",
    "variableType": "DataObject",
    "mockedClass": "VolumeObject",
    "isReuseableMock": null,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\u2014 Global Init in @Before\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.motion",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\storage\\datamotion\\src\\test\\java\\org\\apache\\cloudstack\\storage\\motion\\StorageSystemDataMotionStrategyTest.java",
      "className": "StorageSystemDataMotionStrategyTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate DataObject dataObjectDestination;",
        "line": 78,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "dataObjectDestination = mock(VolumeObject.class);",
        "line": 100,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      }
    ],
    "pattern_id": 27
  },
  {
    "variableName": "srcObj",
    "variableType": "DataObject",
    "mockedClass": "VolumeInfo",
    "isReuseableMock": null,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\u2014 Other Methods\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.datastore.driver",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\storage\\volume\\storpool\\src\\test\\java\\org\\apache\\cloudstack\\storage\\datastore\\driver\\StorPoolPrimaryDataStoreDriverTest.java",
      "className": "StorPoolPrimaryDataStoreDriverTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "DataObject srcObj;",
        "line": 82,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "srcObj = mock(VolumeInfo.class);",
        "line": 100,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(srcObj.getUuid()).thenReturn(volumeUuid);",
        "line": 163,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCopyVolumeAttachedToVmPassed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(srcObj.getUuid()).thenReturn(volumeUuid);",
        "line": 183,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCopyVolumeAttachedToVmNotPassed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(srcObj.getUuid()).thenReturn(volumeUuid);",
        "line": 196,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCopyVolumeNotAttachedToVmNotPassed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(srcObj.getUuid()).thenReturn(volumeUuid);",
        "line": 212,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCopyVolumeNotAttachedToVmPassed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(srcObj.getDataStore()).thenReturn(srcStore);",
        "line": 222,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "setReturnsWhenSourceAndDestinationAreVolumes",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(srcObj.getType()).thenReturn(DataObjectType.VOLUME);",
        "line": 224,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "setReturnsWhenSourceAndDestinationAreVolumes",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(srcObj.getTO()).thenReturn(srcTO);",
        "line": 227,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "setReturnsWhenSourceAndDestinationAreVolumes",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(srcObj.getDataStore().getDriver()).thenReturn(storPoolPrimaryDataStoreDriver);",
        "line": 229,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "setReturnsWhenSourceAndDestinationAreVolumes",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 25
  }
]
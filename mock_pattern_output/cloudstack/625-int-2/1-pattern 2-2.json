[
  {
    "variableName": "i",
    "variableType": "int",
    "mockedClass": "int",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.test",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\storage\\integration-test\\src\\test\\java\\org\\apache\\cloudstack\\storage\\test\\SnapshotTestWithFakeData.java",
      "className": "SnapshotTestWithFakeData"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "for (int i = 0; i < 12; i++) {\r\n    final int cnt = i;\r\n    Future<Boolean> task = pool.submit(new Callable<Boolean>() {\r\n\r\n        @Override\r\n        public Boolean call() throws Exception {\r\n            boolean r = true;\r\n            try {\r\n                SnapshotVO snapshotVO = createSnapshotInDb(vol.getId());\r\n                VolumeObject volumeObject = (VolumeObject) vol;\r\n                Account account = mock(Account.class);\r\n                when(account.getId()).thenReturn(1L);\r\n                CreateSnapshotPayload createSnapshotPayload = mock(CreateSnapshotPayload.class);\r\n                when(createSnapshotPayload.getAccount()).thenReturn(account);\r\n                when(createSnapshotPayload.getSnapshotId()).thenReturn(snapshotVO.getId());\r\n                when(createSnapshotPayload.getSnapshotPolicyId()).thenReturn(0L);\r\n                volumeObject.addPayload(createSnapshotPayload);\r\n                if (cnt > 8) {\r\n                    mockStorageMotionStrategy.makeBackupSnapshotSucceed(false);\r\n                }\r\n                SnapshotInfo newSnapshot = volumeService.takeSnapshot(vol);\r\n                if (newSnapshot == null) {\r\n                    r = false;\r\n                }\r\n            } catch (Exception e) {\r\n                r = false;\r\n            }\r\n            return r;\r\n        }\r\n    });\r\n    Assert.assertTrue(task.get());\r\n}",
        "line": 326,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConcurrentSnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 2
  },
  {
    "variableName": "i",
    "variableType": "int",
    "mockedClass": "int",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.snapshot",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\storage\\snapshot\\src\\test\\java\\org\\apache\\cloudstack\\storage\\snapshot\\CephSnapshotStrategyTest.java",
      "className": "CephSnapshotStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "for (int i = 0; i < imageFormatValues.length - 1; i++) {\r\n    Mockito.reset(cephSnapshotStrategy);\r\n    SnapshotInfo snapshotInfo = Mockito.mock(SnapshotInfo.class);\r\n    VolumeInfo volumeInfo = Mockito.mock(VolumeInfo.class);\r\n    Mockito.when(snapshotInfo.getBaseVolume()).thenReturn(volumeInfo);\r\n    Mockito.when(volumeInfo.getFormat()).thenReturn(imageFormatValues[i]);\r\n    Mockito.lenient().doNothing().when(cephSnapshotStrategy).executeRevertSnapshot(Mockito.any(), Mockito.any());\r\n    boolean revertResult = cephSnapshotStrategy.revertSnapshot(snapshotInfo);\r\n    if (imageFormatValues[i] == ImageFormat.RAW) {\r\n        Assert.assertTrue(revertResult);\r\n        Mockito.verify(cephSnapshotStrategy).executeRevertSnapshot(Mockito.any(), Mockito.any());\r\n    } else {\r\n        Assert.assertFalse(revertResult);\r\n        Mockito.verify(cephSnapshotStrategy, Mockito.times(0)).executeRevertSnapshot(Mockito.any(), Mockito.any());\r\n    }\r\n}",
        "line": 100,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "revertSnapshotTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 2
  }
]
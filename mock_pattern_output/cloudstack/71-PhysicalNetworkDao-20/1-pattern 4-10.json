[
  {
    "variableName": "physnetdao",
    "variableType": "PhysicalNetworkDao",
    "mockedClass": "PhysicalNetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\brocade-vcs\\src\\test\\java\\com\\cloud\\network\\guru\\BrocadeVcsGuestNetworkGuruTest.java",
      "className": "BrocadeVcsGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "PhysicalNetworkDao physnetdao = mock(PhysicalNetworkDao.class);",
        "line": 85,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(physnetdao.findById((Long) any())).thenReturn(physnet);",
        "line": 156,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDesign",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(physnetdao.findById((Long) any())).thenReturn(physnet);",
        "line": 181,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDesignNoIsolationMethodVCS",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(physnetdao.findById((Long) any())).thenReturn(physnet);",
        "line": 201,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDesignNoConnectivityInOffering",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(physnetdao.findById((Long) any())).thenReturn(physnet);",
        "line": 223,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplement",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(physnetdao.findById((Long) any())).thenReturn(physnet);",
        "line": 283,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementFail",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "physnetdao",
    "variableType": "PhysicalNetworkDao",
    "mockedClass": "PhysicalNetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\guru\\NiciraNvpGuestNetworkGuruTest.java",
      "className": "NiciraNvpGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "PhysicalNetworkDao physnetdao = mock(PhysicalNetworkDao.class);",
        "line": 77,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(physnetdao.findById((Long) any())).thenReturn(physnet);",
        "line": 150,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDesign",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(physnetdao.findById((Long) any())).thenReturn(physnet);",
        "line": 179,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDesignNoElementOnPhysicalNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(physnetdao.findById((Long) any())).thenReturn(physnet);",
        "line": 202,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDesignNoIsolationMethodSTT",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(physnetdao.findById((Long) any())).thenReturn(physnet);",
        "line": 225,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDesignNoConnectivityInOffering",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(physnetdao.findById((Long) any())).thenReturn(physnet);",
        "line": 251,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplement",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(physnetdao.findById((Long) any())).thenReturn(physnet);",
        "line": 306,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementWithCidr",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(physnetdao.findById((Long) any())).thenReturn(physnet);",
        "line": 365,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementURIException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(physnetdao.findById((Long) any())).thenReturn(physnet);",
        "line": 420,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testShutdown",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "physicalNetworkDao",
    "variableType": "PhysicalNetworkDao",
    "mockedClass": "PhysicalNetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenElementTest.java",
      "className": "TungstenElementTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nPhysicalNetworkDao physicalNetworkDao;",
        "line": 158,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(physicalNetworkDao.findById(anyLong())).thenReturn(physicalNetworkVO);",
        "line": 807,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shutdownProviderInstancesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "physnetdao",
    "variableType": "PhysicalNetworkDao",
    "mockedClass": "PhysicalNetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\vxlan\\src\\test\\java\\com\\cloud\\network\\guru\\VxlanGuestNetworkGuruTest.java",
      "className": "VxlanGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "PhysicalNetworkDao physnetdao = mock(PhysicalNetworkDao.class);",
        "line": 66,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(physnetdao.findById(anyLong())).thenReturn(physnet);",
        "line": 128,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDesign",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(physnetdao.findById(anyLong())).thenReturn(physnet);",
        "line": 149,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplement",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(physnetdao.findById(anyLong())).thenReturn(physnet);",
        "line": 191,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementWithCidr",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(physnetdao.findById(anyLong())).thenReturn(physnet);",
        "line": 238,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testShutdown",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "_physicalNetworkDao",
    "variableType": "PhysicalNetworkDao",
    "mockedClass": "PhysicalNetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.configuration",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\configuration\\ConfigurationManagerTest.java",
      "className": "ConfigurationManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nPhysicalNetworkDao _physicalNetworkDao;",
        "line": 189,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(new ArrayList<PhysicalNetworkVO>());",
        "line": 742,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableSuccessTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(new ArrayList<PhysicalNetworkVO>());",
        "line": 760,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableFailureOnHostTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(new ArrayList<PhysicalNetworkVO>());",
        "line": 778,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableFailureOnPodTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(new ArrayList<PhysicalNetworkVO>());",
        "line": 792,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableFailureOnPrivateIpAddressTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(new ArrayList<PhysicalNetworkVO>());",
        "line": 806,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableFailureOnPublicIpAddressTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(new ArrayList<PhysicalNetworkVO>());",
        "line": 824,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableFailureOnVmInstanceTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(new ArrayList<PhysicalNetworkVO>());",
        "line": 842,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableFailureOnVolumeTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(arrayList);",
        "line": 860,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableFailureOnPhysicalNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "_physicalNetworkDao",
    "variableType": "PhysicalNetworkDao",
    "mockedClass": "PhysicalNetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.configuration",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\configuration\\ConfigurationManagerTest.java",
      "className": "ConfigurationManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nPhysicalNetworkDao _physicalNetworkDao;",
        "line": 189,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(new ArrayList<PhysicalNetworkVO>());",
        "line": 742,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableSuccessTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(new ArrayList<PhysicalNetworkVO>());",
        "line": 760,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableFailureOnHostTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(new ArrayList<PhysicalNetworkVO>());",
        "line": 778,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableFailureOnPodTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(new ArrayList<PhysicalNetworkVO>());",
        "line": 792,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableFailureOnPrivateIpAddressTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(new ArrayList<PhysicalNetworkVO>());",
        "line": 806,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableFailureOnPublicIpAddressTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(new ArrayList<PhysicalNetworkVO>());",
        "line": 824,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableFailureOnVmInstanceTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(new ArrayList<PhysicalNetworkVO>());",
        "line": 842,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableFailureOnVolumeTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(arrayList);",
        "line": 860,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableFailureOnPhysicalNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "_physicalNetworkDao",
    "variableType": "PhysicalNetworkDao",
    "mockedClass": "PhysicalNetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.configuration",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\configuration\\ConfigurationManagerTest.java",
      "className": "ConfigurationManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nPhysicalNetworkDao _physicalNetworkDao;",
        "line": 189,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(new ArrayList<PhysicalNetworkVO>());",
        "line": 742,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableSuccessTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(new ArrayList<PhysicalNetworkVO>());",
        "line": 760,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableFailureOnHostTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(new ArrayList<PhysicalNetworkVO>());",
        "line": 778,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableFailureOnPodTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(new ArrayList<PhysicalNetworkVO>());",
        "line": 792,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableFailureOnPrivateIpAddressTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(new ArrayList<PhysicalNetworkVO>());",
        "line": 806,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableFailureOnPublicIpAddressTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(new ArrayList<PhysicalNetworkVO>());",
        "line": 824,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableFailureOnVmInstanceTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(new ArrayList<PhysicalNetworkVO>());",
        "line": 842,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableFailureOnVolumeTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_physicalNetworkDao.listByZone(anyLong())).thenReturn(arrayList);",
        "line": 860,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkIfZoneIsDeletableFailureOnPhysicalNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "physicalNetworkDao",
    "variableType": "PhysicalNetworkDao",
    "mockedClass": "PhysicalNetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\guru\\DirectNetworkGuruTest.java",
      "className": "DirectNetworkGuruTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nPhysicalNetworkDao physicalNetworkDao;",
        "line": 70,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(physicalNetworkDao.findById(physicalNetwork.getId())).thenReturn(physicalNetwork);",
        "line": 133,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCanDesign",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(physicalNetworkDao.findById(physicalNetwork.getId())).thenReturn(physicalNetwork);",
        "line": 146,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDesignDns",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "physicalNetworkDao",
    "variableType": "PhysicalNetworkDao",
    "mockedClass": "PhysicalNetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\guru\\ExternalGuestNetworkGuruTest.java",
      "className": "ExternalGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nPhysicalNetworkDao physicalNetworkDao;",
        "line": 54,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(physicalNetworkDao.findById(Mockito.anyLong())).thenReturn(physicalNetwork);",
        "line": 75,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDesignDns",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "_physicalNetworkDao",
    "variableType": "PhysicalNetworkDao",
    "mockedClass": "PhysicalNetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\UpdatePhysicalNetworkTest.java",
      "className": "UpdatePhysicalNetworkTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private PhysicalNetworkDao _physicalNetworkDao = mock(PhysicalNetworkDao.class);",
        "line": 40,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_physicalNetworkDao.findById(anyLong())).thenReturn(physicalNetworkVO);",
        "line": 61,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updatePhysicalNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_physicalNetworkDao.update(anyLong(), any(physicalNetworkVO.getClass()))).thenReturn(true);",
        "line": 63,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updatePhysicalNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
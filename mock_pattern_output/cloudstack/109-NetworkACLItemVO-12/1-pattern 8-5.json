[
  {
    "variableName": "aclItem",
    "variableType": "NetworkACLItemVO",
    "mockedClass": "NetworkACLItemVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "com.cloud.network.vpc",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\vpc\\NetworkACLManagerTest.java",
      "className": "NetworkACLManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private NetworkACLItemVO aclItem;",
        "line": 107,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "aclItem = Mockito.mock(NetworkACLItemVO.class);",
        "line": 118,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Override",
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(aclItem.getState()).thenReturn(State.Add);",
        "line": 252,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "deleteNonEmptyACL",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(aclItem.getId()).thenReturn(3l);",
        "line": 253,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "deleteNonEmptyACL",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(aclItem, Mockito.times(4)).getState();",
        "line": 258,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "deleteNonEmptyACL",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "aclItem",
    "variableType": "NetworkACLItemVO",
    "mockedClass": "NetworkACLItemVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "com.cloud.network.vpc",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\vpc\\NetworkACLManagerTest.java",
      "className": "NetworkACLManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private NetworkACLItemVO aclItem;",
        "line": 107,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "aclItem = Mockito.mock(NetworkACLItemVO.class);",
        "line": 118,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Override",
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(aclItem.getState()).thenReturn(State.Add);",
        "line": 252,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "deleteNonEmptyACL",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(aclItem.getId()).thenReturn(3l);",
        "line": 253,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "deleteNonEmptyACL",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(aclItem, Mockito.times(4)).getState();",
        "line": 258,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "deleteNonEmptyACL",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "aclItem",
    "variableType": "NetworkACLItemVO",
    "mockedClass": "NetworkACLItemVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "com.cloud.network.vpc",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\vpc\\NetworkACLManagerTest.java",
      "className": "NetworkACLManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private NetworkACLItemVO aclItem;",
        "line": 107,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "aclItem = Mockito.mock(NetworkACLItemVO.class);",
        "line": 118,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Override",
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(aclItem.getState()).thenReturn(State.Add);",
        "line": 252,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "deleteNonEmptyACL",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(aclItem.getId()).thenReturn(3l);",
        "line": 253,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "deleteNonEmptyACL",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(aclItem, Mockito.times(4)).getState();",
        "line": 258,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "deleteNonEmptyACL",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "aclRuleBeingMovedMock",
    "variableType": "NetworkACLItemVO",
    "mockedClass": "NetworkACLItemVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "com.cloud.network.vpc",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\vpc\\NetworkACLServiceImplTest.java",
      "className": "NetworkACLServiceImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate NetworkACLItemVO aclRuleBeingMovedMock;",
        "line": 112,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(aclRuleBeingMovedMock.getUuid()).thenReturn(uuidAclRuleBeingMoved);",
        "line": 143,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "befoteTest",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(aclRuleBeingMovedMock.getAclId()).thenReturn(networkAclMockId);",
        "line": 144,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "befoteTest",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(aclRuleBeingMovedMock.getId()).thenReturn(99l);",
        "line": 1175,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "moveRuleToTheBottomTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(aclRuleBeingMovedMock).setNumber(101);",
        "line": 1182,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "moveRuleToTheBottomTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(aclRuleBeingMovedMock.getNumber()).thenReturn(50);",
        "line": 1207,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "moveRuleBetweenAclRulesTestThereIsSpaceBetweenPreviousRuleAndNextRuleToAccomodateTheNewRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(aclRuleBeingMovedMock.getId()).thenReturn(1l);",
        "line": 1208,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "moveRuleBetweenAclRulesTestThereIsSpaceBetweenPreviousRuleAndNextRuleToAccomodateTheNewRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(aclRuleBeingMovedMock.getNumber()).thenReturn(50);",
        "line": 1243,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "moveRuleBetweenAclRulesTestThereIsNoSpaceBetweenPreviousRuleAndNextRuleToAccomodateTheNewRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(aclRuleBeingMovedMock.getId()).thenReturn(1l);",
        "line": 1244,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "moveRuleBetweenAclRulesTestThereIsNoSpaceBetweenPreviousRuleAndNextRuleToAccomodateTheNewRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(aclRuleBeingMovedMock.getNumber()).thenReturn(50);",
        "line": 1275,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateAclRuleToNewPositionAndExecuteShiftIfNecessaryTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(aclRuleBeingMovedMock.getId()).thenReturn(1l);",
        "line": 1276,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateAclRuleToNewPositionAndExecuteShiftIfNecessaryTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "networkAclItemVoMock",
    "variableType": "NetworkACLItemVO",
    "mockedClass": "NetworkACLItemVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "com.cloud.network.vpc",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\vpc\\NetworkACLServiceImplTest.java",
      "className": "NetworkACLServiceImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate NetworkACLItemVO networkAclItemVoMock;",
        "line": 98,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getSourcePortStart()).thenReturn(65536);",
        "line": 492,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateSourceStartAndEndPortsTestStartPorInvalid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getSourcePortStart()).thenReturn(65535);",
        "line": 499,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateSourceStartAndEndPortsTestStartPorValidButEndPortInvalid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getSourcePortEnd()).thenReturn(65536);",
        "line": 500,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateSourceStartAndEndPortsTestStartPorValidButEndPortInvalid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getSourcePortStart()).thenReturn(65535);",
        "line": 507,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateSourceStartAndEndPortsTestStartPortBiggerThanEndPort",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getSourcePortEnd()).thenReturn(2);",
        "line": 508,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateSourceStartAndEndPortsTestStartPortBiggerThanEndPort",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getSourcePortStart()).thenReturn(1);",
        "line": 515,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateSourceStartAndEndPortsTestPortsWithAllProtocol",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getSourcePortEnd()).thenReturn(2);",
        "line": 516,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateSourceStartAndEndPortsTestPortsWithAllProtocol",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getProtocol()).thenReturn(\"all\");",
        "line": 517,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateSourceStartAndEndPortsTestPortsWithAllProtocol",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getSourcePortStart()).thenReturn(1);",
        "line": 524,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateSourceStartAndEndPortsTestPortsWithTcpProtocol",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getSourcePortEnd()).thenReturn(2);",
        "line": 525,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateSourceStartAndEndPortsTestPortsWithTcpProtocol",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getProtocol()).thenReturn(\"tcp\");",
        "line": 526,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateSourceStartAndEndPortsTestPortsWithTcpProtocol",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getSourceCidrList()).thenReturn(new ArrayList<>());",
        "line": 533,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateSourceCidrListTestEmptySourceCirdList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getSourceCidrList()).thenReturn(cidrsInvalid);",
        "line": 542,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateSourceCidrListTestInvalidCidrs",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getSourceCidrList()).thenReturn(cidrsInvalid);",
        "line": 551,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateSourceCidrListTestValidCidrs",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getProtocol()).thenReturn(null);",
        "line": 559,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolIsNullOrBlank",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getProtocol()).thenReturn(\"\");",
        "line": 562,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolIsNullOrBlank",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getProtocol()).thenReturn(\"    \");",
        "line": 565,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolIsNullOrBlank",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getProtocol()).thenReturn(\"-1\");",
        "line": 573,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolIsNumericValueLessThanZero",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getProtocol()).thenReturn(\"256\");",
        "line": 579,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolIsNumericValueMoreThan255",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getProtocol()).thenReturn(\"255\");",
        "line": 587,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolIsNumericValidValue",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getIcmpCode()).thenReturn(null);",
        "line": 588,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolIsNumericValidValue",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getIcmpType()).thenReturn(null);",
        "line": 589,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolIsNumericValidValue",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getProtocol()).thenReturn(\"invalid\");",
        "line": 598,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolIsStringInvalid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getIcmpCode()).thenReturn(null);",
        "line": 606,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolIsStringValid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getIcmpType()).thenReturn(null);",
        "line": 607,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolIsStringValid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getProtocol()).thenReturn(\"tcp\");",
        "line": 609,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolIsStringValid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getProtocol()).thenReturn(\"all\");",
        "line": 612,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolIsStringValid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getProtocol()).thenReturn(\"udp\");",
        "line": 615,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolIsStringValid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getIcmpCode()).thenReturn(1);",
        "line": 623,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolNotIcmpWithIcmpConfigurations",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getIcmpType()).thenReturn(1);",
        "line": 624,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolNotIcmpWithIcmpConfigurations",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getProtocol()).thenReturn(\"tcp\");",
        "line": 626,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolNotIcmpWithIcmpConfigurations",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getIcmpCode()).thenReturn(null);",
        "line": 634,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolNotIcmpWithSourcePorts",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getIcmpType()).thenReturn(null);",
        "line": 635,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolNotIcmpWithSourcePorts",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getSourcePortStart()).thenReturn(1);",
        "line": 637,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolNotIcmpWithSourcePorts",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getSourcePortEnd()).thenReturn(1);",
        "line": 638,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolNotIcmpWithSourcePorts",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getProtocol()).thenReturn(\"tcp\");",
        "line": 640,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolNotIcmpWithSourcePorts",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getIcmpCode()).thenReturn(1);",
        "line": 648,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolIcmpWithIcmpConfigurations",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getIcmpType()).thenReturn(1);",
        "line": 649,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolIcmpWithIcmpConfigurations",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getSourcePortStart()).thenReturn(null);",
        "line": 651,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolIcmpWithIcmpConfigurations",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getSourcePortEnd()).thenReturn(null);",
        "line": 652,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolIcmpWithIcmpConfigurations",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getProtocol()).thenReturn(\"icmp\");",
        "line": 656,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateProtocolTestProtocolIcmpWithIcmpConfigurations",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getIcmpType()).thenReturn(null);",
        "line": 664,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateIcmpTypeAndCodeTestIcmpTypeNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getIcmpType()).thenReturn(256);",
        "line": 671,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateIcmpTypeAndCodeTestIcmpTypeInvalid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getIcmpType()).thenReturn(-1);",
        "line": 678,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateIcmpTypeAndCodeTestIcmpTypeNegativeOne",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getIcmpCode()).thenReturn(null);",
        "line": 679,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateIcmpTypeAndCodeTestIcmpTypeNegativeOne",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getIcmpType()).thenReturn(-1);",
        "line": 686,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateIcmpTypeAndCodeTestIcmpTypeNegativeOneAndIcmpCodeNegativeOne",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getIcmpCode()).thenReturn(-1);",
        "line": 687,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateIcmpTypeAndCodeTestIcmpTypeNegativeOneAndIcmpCodeNegativeOne",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getIcmpType()).thenReturn(255);",
        "line": 694,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateIcmpTypeAndCodeTestIcmpTypeValidAndIcmpCodeInvalid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getIcmpCode()).thenReturn(17);",
        "line": 695,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateIcmpTypeAndCodeTestIcmpTypeValidAndIcmpCodeInvalid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getIcmpType()).thenReturn(255);",
        "line": 702,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateIcmpTypeAndCodeTestIcmpTypeValidAndIcmpCodeValid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getIcmpCode()).thenReturn(1);",
        "line": 703,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateIcmpTypeAndCodeTestIcmpTypeValidAndIcmpCodeValid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getAclId()).thenReturn(networkAclMockId);",
        "line": 710,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateNetworkACLItemTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock).clone();",
        "line": 743,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateNetworkAclRuleIdAndRetrieveItTestNetworkAclFound",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.getId()).thenReturn(100L);",
        "line": 751,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestNumberOfAcltoBeUpdatedAlreadyInUse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.isDisplay()).thenReturn(false);",
        "line": 775,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(0)).setNumber(Mockito.anyInt());",
        "line": 779,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(0)).setSourcePortStart(Mockito.anyInt());",
        "line": 780,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(0)).setSourcePortEnd(Mockito.anyInt());",
        "line": 781,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(0)).setSourceCidrList(Mockito.anyListOf(String.class));",
        "line": 782,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(0)).setProtocol(Mockito.anyString());",
        "line": 783,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(0)).setIcmpCode(Mockito.anyInt());",
        "line": 784,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(0)).setIcmpType(Mockito.anyInt());",
        "line": 785,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(0)).setAction(Mockito.any(Action.class));",
        "line": 786,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(0)).setTrafficType(Mockito.any(TrafficType.class));",
        "line": 787,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(0)).setUuid(Mockito.anyString());",
        "line": 788,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(0)).setReason(Mockito.anyString());",
        "line": 789,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(0)).setDisplay(Mockito.anyBoolean());",
        "line": 790,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.isDisplay()).thenReturn(false);",
        "line": 811,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestNotPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(0)).setNumber(nullable(Integer.class));",
        "line": 815,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestNotPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(1)).setSourcePortStart(nullable(Integer.class));",
        "line": 816,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestNotPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(1)).setSourcePortEnd(nullable(Integer.class));",
        "line": 817,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestNotPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(1)).setSourceCidrList(nullable(List.class));",
        "line": 818,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestNotPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(1)).setProtocol(nullable(String.class));",
        "line": 819,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestNotPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(1)).setIcmpCode(nullable(Integer.class));",
        "line": 820,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestNotPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(1)).setIcmpType(nullable(Integer.class));",
        "line": 821,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestNotPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(1)).setAction(nullable(Action.class));",
        "line": 822,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestNotPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(1)).setTrafficType(nullable(TrafficType.class));",
        "line": 823,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestNotPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(0)).setUuid(nullable(String.class));",
        "line": 824,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestNotPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(1)).setReason(nullable(String.class));",
        "line": 825,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestNotPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock, Mockito.times(1)).setDisplay(nullable(Boolean.class));",
        "line": 826,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestNotPartialUpgradeAllValuesNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkAclItemVoMock.isDisplay()).thenReturn(false);",
        "line": 849,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestAllValuesWithUpdateData",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock).setNumber(1);",
        "line": 853,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestAllValuesWithUpdateData",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock).setSourcePortStart(23);",
        "line": 854,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestAllValuesWithUpdateData",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock).setSourcePortEnd(24);",
        "line": 855,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestAllValuesWithUpdateData",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock).setSourceCidrList(cidrsList);",
        "line": 856,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestAllValuesWithUpdateData",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock).setProtocol(\"all\");",
        "line": 857,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestAllValuesWithUpdateData",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock).setIcmpCode(5);",
        "line": 858,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestAllValuesWithUpdateData",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock).setIcmpType(6);",
        "line": 859,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestAllValuesWithUpdateData",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock).setAction(Action.Deny);",
        "line": 860,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestAllValuesWithUpdateData",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock).setTrafficType(TrafficType.Egress);",
        "line": 861,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestAllValuesWithUpdateData",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock).setUuid(\"customUuid\");",
        "line": 862,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestAllValuesWithUpdateData",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock).setReason(\"reason\");",
        "line": 863,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestAllValuesWithUpdateData",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(networkAclItemVoMock).setDisplay(true);",
        "line": 864,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "transferDataToNetworkAclRulePojoTestAllValuesWithUpdateData",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  }
]
[
  {
    "variableName": "nic",
    "variableType": "NicVO",
    "mockedClass": "NicVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.contrail.model",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\juniper-contrail\\src\\test\\java\\org\\apache\\cloudstack\\network\\contrail\\model\\InstanceIpModelTest.java",
      "className": "InstanceIpModelTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// Create Virtual=Machine-Interface (VMInterface)\r\nNicVO nic = mock(NicVO.class);",
        "line": 102,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateInstanceIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nic.getIPv4Address()).thenReturn(\"10.1.1.2\");",
        "line": 103,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateInstanceIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nic.getMacAddress()).thenReturn(\"00:01:02:03:04:05\");",
        "line": 104,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateInstanceIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nic.getDeviceId()).thenReturn(100);",
        "line": 105,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateInstanceIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nic.getState()).thenReturn(NicVO.State.Allocated);",
        "line": 106,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateInstanceIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nic.getNetworkId()).thenReturn(10L);",
        "line": 107,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateInstanceIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "nic",
    "variableType": "NicVO",
    "mockedClass": "NicVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.contrail.model",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\juniper-contrail\\src\\test\\java\\org\\apache\\cloudstack\\network\\contrail\\model\\VMInterfaceModelTest.java",
      "className": "VMInterfaceModelTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// Create Virtual=Machine-Interface (VMInterface)\r\nNicVO nic = mock(NicVO.class);",
        "line": 104,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVMInterface",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nic.getIPv4Address()).thenReturn(\"10.1.1.2\");",
        "line": 105,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVMInterface",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nic.getMacAddress()).thenReturn(\"00:01:02:03:04:05\");",
        "line": 106,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVMInterface",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nic.getDeviceId()).thenReturn(100);",
        "line": 107,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVMInterface",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nic.getState()).thenReturn(NicVO.State.Allocated);",
        "line": 108,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVMInterface",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nic.getNetworkId()).thenReturn(10L);",
        "line": 109,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVMInterface",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "nicVO",
    "variableType": "NicVO",
    "mockedClass": "NicVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenServiceImplTest.java",
      "className": "TungstenServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NicVO nicVO = mock(NicVO.class);",
        "line": 770,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addTungstenSecurityGroupEgressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nicVO.getIPv4Address()).thenReturn(\"192.168.100.100\");",
        "line": 787,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addTungstenSecurityGroupEgressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nicVO.getIPv6Address()).thenReturn(\"fd00::1\");",
        "line": 788,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addTungstenSecurityGroupEgressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nicVO.getSecondaryIp()).thenReturn(true);",
        "line": 789,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addTungstenSecurityGroupEgressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "nicVO",
    "variableType": "NicVO",
    "mockedClass": "NicVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenServiceImplTest.java",
      "className": "TungstenServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NicVO nicVO = mock(NicVO.class);",
        "line": 829,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeTungstenSecurityGroupEgressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nicVO.getIPv4Address()).thenReturn(\"192.168.100.100\");",
        "line": 844,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeTungstenSecurityGroupEgressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nicVO.getIPv6Address()).thenReturn(\"fd00::1\");",
        "line": 845,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeTungstenSecurityGroupEgressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nicVO.getSecondaryIp()).thenReturn(true);",
        "line": 846,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeTungstenSecurityGroupEgressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "nicVO",
    "variableType": "NicVO",
    "mockedClass": "NicVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenServiceImplTest.java",
      "className": "TungstenServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NicVO nicVO = mock(NicVO.class);",
        "line": 1639,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addTungstenVmSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nicVO.getBroadcastUri()).thenReturn(Networks.BroadcastDomainType.TUNGSTEN.toUri(\"tf\"));",
        "line": 1656,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addTungstenVmSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nicVO.getIPv4Address()).thenReturn(\"192.168.100.100\");",
        "line": 1658,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addTungstenVmSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nicVO.getIPv6Address()).thenReturn(\"fd00::1\");",
        "line": 1659,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addTungstenVmSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nicVO.getSecondaryIp()).thenReturn(true);",
        "line": 1660,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addTungstenVmSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "nicVO",
    "variableType": "NicVO",
    "mockedClass": "NicVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenServiceImplTest.java",
      "className": "TungstenServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NicVO nicVO = mock(NicVO.class);",
        "line": 1674,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeTungstenVmSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nicVO.getBroadcastUri()).thenReturn(Networks.BroadcastDomainType.TUNGSTEN.toUri(\"tf\"));",
        "line": 1687,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeTungstenVmSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nicVO.getIPv4Address()).thenReturn(\"192.168.100.100\");",
        "line": 1689,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeTungstenVmSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nicVO.getIPv6Address()).thenReturn(\"fd00::1\");",
        "line": 1690,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeTungstenVmSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nicVO.getSecondaryIp()).thenReturn(true);",
        "line": 1691,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeTungstenVmSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "nic",
    "variableType": "NicVO",
    "mockedClass": "NicVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\Ipv6ServiceImplTest.java",
      "className": "Ipv6ServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NicVO nic = Mockito.mock(NicVO.class);",
        "line": 438,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNewAssignPublicIpv6ToNetwork",
          "methodAnnotations": [
            "@Test",
            "@DB"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(nic.getIPv6Address()).thenReturn(null);",
        "line": 439,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNewAssignPublicIpv6ToNetwork",
          "methodAnnotations": [
            "@Test",
            "@DB"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(nic.getBroadcastUri()).thenReturn(URI.create(vlan));",
        "line": 440,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNewAssignPublicIpv6ToNetwork",
          "methodAnnotations": [
            "@Test",
            "@DB"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(nic.getMacAddress()).thenReturn(macAddress);",
        "line": 441,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNewAssignPublicIpv6ToNetwork",
          "methodAnnotations": [
            "@Test",
            "@DB"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(nic.getId()).thenReturn(nicId);",
        "line": 442,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNewAssignPublicIpv6ToNetwork",
          "methodAnnotations": [
            "@Test",
            "@DB"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "nic",
    "variableType": "NicVO",
    "mockedClass": "NicVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\Ipv6ServiceImplTest.java",
      "className": "Ipv6ServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NicVO nic = Mockito.mock(NicVO.class);",
        "line": 457,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFromPlaceholderAssignPublicIpv6ToNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(nic.getIPv6Address()).thenReturn(null);",
        "line": 458,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFromPlaceholderAssignPublicIpv6ToNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(nic.getBroadcastUri()).thenReturn(URI.create(vlan));",
        "line": 459,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFromPlaceholderAssignPublicIpv6ToNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(nic.getId()).thenReturn(nicId);",
        "line": 460,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFromPlaceholderAssignPublicIpv6ToNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "nic",
    "variableType": "NicVO",
    "mockedClass": "NicVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\Ipv6ServiceImplTest.java",
      "className": "Ipv6ServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NicVO nic = Mockito.mock(NicVO.class);",
        "line": 530,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testEmptyGetPublicIpv6AddressesForNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(nic.getIPv6Address()).thenReturn(null);",
        "line": 531,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testEmptyGetPublicIpv6AddressesForNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "nic",
    "variableType": "NicVO",
    "mockedClass": "NicVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\Ipv6ServiceImplTest.java",
      "className": "Ipv6ServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NicVO nic = Mockito.mock(NicVO.class);",
        "line": 542,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetPublicIpv6AddressesForNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(nic.getIPv6Address()).thenReturn(ipv6Address);",
        "line": 543,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetPublicIpv6AddressesForNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(nic.getReserver()).thenReturn(publicReserver);",
        "line": 544,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetPublicIpv6AddressesForNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "nic",
    "variableType": "NicVO",
    "mockedClass": "NicVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\Ipv6ServiceImplTest.java",
      "className": "Ipv6ServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NicVO nic = Mockito.mock(NicVO.class);",
        "line": 572,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateIpv6RoutesForVpcResponse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(nic.getIPv6Address()).thenReturn(ipv6Address);",
        "line": 573,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateIpv6RoutesForVpcResponse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(nic.getReserver()).thenReturn(publicReserver);",
        "line": 574,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateIpv6RoutesForVpcResponse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "nic",
    "variableType": "NicVO",
    "mockedClass": "NicVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\Ipv6ServiceImplTest.java",
      "className": "Ipv6ServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NicVO nic = Mockito.mock(NicVO.class);",
        "line": 756,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemovePublicIpv6PlaceholderNics",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(nic.getId()).thenReturn(nicId);",
        "line": 757,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemovePublicIpv6PlaceholderNics",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(nic.getIPv6Address()).thenReturn(ipv6Address);",
        "line": 758,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemovePublicIpv6PlaceholderNics",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(nic.getIPv6Cidr()).thenReturn(cidr);",
        "line": 759,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemovePublicIpv6PlaceholderNics",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(nic.getIPv6Gateway()).thenReturn(gateway);",
        "line": 760,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemovePublicIpv6PlaceholderNics",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(nic.getReserver()).thenReturn(publicReserver);",
        "line": 761,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemovePublicIpv6PlaceholderNics",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "nic1",
    "variableType": "NicVO",
    "mockedClass": "NicVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\Ipv6ServiceImplTest.java",
      "className": "Ipv6ServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NicVO nic1 = Mockito.mock(NicVO.class);",
        "line": 775,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemovePublicIpv6PlaceholderNics",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(nic1.getId()).thenReturn(nicId);",
        "line": 776,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemovePublicIpv6PlaceholderNics",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(nic1.getIPv6Address()).thenReturn(null);",
        "line": 777,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemovePublicIpv6PlaceholderNics",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "nic3",
    "variableType": "NicVO",
    "mockedClass": "NicVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.router",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\router\\RouterControlHelperTest.java",
      "className": "RouterControlHelperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// Actually the third one will never be used, but we must assert that is not\r\nNicVO nic3 = mock(NicVO.class);",
        "line": 69,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetRouterControlIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "lenient().when(nic3.getNetworkId()).thenReturn(NW_ID_3);",
        "line": 73,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetRouterControlIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "lenient().when(nic3.getIPv4Address()).thenReturn(IP4_ADDRES2);",
        "line": 74,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetRouterControlIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "nic2",
    "variableType": "NicVO",
    "mockedClass": "NicVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.router",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\router\\RouterControlHelperTest.java",
      "className": "RouterControlHelperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NicVO nic2 = mock(NicVO.class);",
        "line": 67,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetRouterControlIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nic2.getNetworkId()).thenReturn(NW_ID_2);",
        "line": 71,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetRouterControlIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "lenient().when(nic2.getIPv4Address()).thenReturn(IP4_ADDRES1);",
        "line": 72,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetRouterControlIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "nic1",
    "variableType": "NicVO",
    "mockedClass": "NicVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.router",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\router\\RouterControlHelperTest.java",
      "className": "RouterControlHelperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NicVO nic1 = mock(NicVO.class);",
        "line": 66,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetRouterControlIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nic1.getNetworkId()).thenReturn(NW_ID_1);",
        "line": 70,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetRouterControlIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "nic1",
    "variableType": "NicVO",
    "mockedClass": "NicVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.router",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\router\\RouterControlHelperTest.java",
      "className": "RouterControlHelperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NicVO nic1 = mock(NicVO.class);",
        "line": 101,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetRouterControlIpWithRouterIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nic1.getNetworkId()).thenReturn(NW_ID_1);",
        "line": 102,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetRouterControlIpWithRouterIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "lenient().when(nic1.getIPv4Address()).thenReturn(null);",
        "line": 103,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetRouterControlIpWithRouterIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
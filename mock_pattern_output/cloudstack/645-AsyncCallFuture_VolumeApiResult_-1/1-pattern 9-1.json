[
  {
    "variableName": "asyncCallFutureVolumeapiResultMock",
    "variableType": "AsyncCallFuture<VolumeApiResult>",
    "mockedClass": "AsyncCallFuture<VolumeApiResult>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "com.cloud.storage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\storage\\VolumeApiServiceImplTest.java",
      "className": "VolumeApiServiceImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate AsyncCallFuture<VolumeApiResult> asyncCallFutureVolumeapiResultMock;",
        "line": 218,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(asyncCallFutureVolumeapiResultMock, Mockito.times(0)).get();",
        "line": 909,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "expungeVolumesInPrimaryStorageIfNeededTestVolumeNotInPrimaryDataStore",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(asyncCallFutureVolumeapiResultMock, Mockito.times(1)).get();",
        "line": 920,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "expungeVolumesInPrimaryStorageIfNeededTestVolumeInPrimaryDataStore",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(asyncCallFutureVolumeapiResultMock, Mockito.times(0)).get();",
        "line": 952,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "expungeVolumesInSecondaryStorageIfNeededTestVolumeNotFoundInSecondaryStorage",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(asyncCallFutureVolumeapiResultMock, Mockito.times(1)).get();",
        "line": 968,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "expungeVolumesInSecondaryStorageIfNeededTestVolumeFoundInSecondaryStorage",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 9
  }
]
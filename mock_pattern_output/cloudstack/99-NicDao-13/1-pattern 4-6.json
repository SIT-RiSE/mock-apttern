[
  {
    "variableName": "nicDao",
    "variableType": "NicDao",
    "mockedClass": "NicDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenGuestNetworkGuruTest.java",
      "className": "TungstenGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nNicDao nicDao;",
        "line": 151,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nicDao.listByVmId(anyLong())).thenReturn(List.of(nicVO));",
        "line": 249,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeallocate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nicDao.listByVmId(anyLong())).thenReturn(List.of(nicVO));",
        "line": 265,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeallocateWithException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "nicDao",
    "variableType": "NicDao",
    "mockedClass": "NicDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenServiceImplTest.java",
      "className": "TungstenServiceImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nNicDao nicDao;",
        "line": 260,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nicDao.findDefaultNicForVM(anyLong())).thenReturn(nicVO);",
        "line": 786,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addTungstenSecurityGroupEgressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nicDao.findDefaultNicForVM(anyLong())).thenReturn(nicVO);",
        "line": 842,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeTungstenSecurityGroupEgressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nicDao.findDefaultNicForVM(anyLong())).thenReturn(nicVO);",
        "line": 1655,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addTungstenVmSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(nicDao.findDefaultNicForVM(anyLong())).thenReturn(nicVO);",
        "line": 1686,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeTungstenVmSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "nicDao",
    "variableType": "NicDao",
    "mockedClass": "NicDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\NetworkServiceImplTest.java",
      "className": "NetworkServiceImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nNicDao nicDao;",
        "line": 142,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(nicDao.listByNetworkIdAndType(anyLong(), any(VirtualMachine.Type.class))).thenReturn(List.of(Mockito.mock(NicVO.class)));",
        "line": 456,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateSharedNetworkMtus",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "nicDao",
    "variableType": "NicDao",
    "mockedClass": "NicDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.router",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\router\\RouterControlHelperTest.java",
      "className": "RouterControlHelperTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprotected NicDao nicDao;",
        "line": 52,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(this.nicDao.listByVmId(ROUTER_ID)).thenReturn(nics);",
        "line": 78,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetRouterControlIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(this.nicDao.listByVmId(ROUTER_ID)).thenReturn(nics);",
        "line": 105,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetRouterControlIpWithRouterIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "nicDao",
    "variableType": "NicDao",
    "mockedClass": "NicDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.vpc",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\vpc\\VpcManagerImplTest.java",
      "className": "VpcManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nNicDao nicDao;",
        "line": 146,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(nicDao.findByIpAddressAndVmType(anyString(), any())).thenReturn(Mockito.mock(NicVO.class));",
        "line": 395,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVpcNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(nicDao.update(anyLong(), any())).thenReturn(true);",
        "line": 396,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVpcNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "_nicDao",
    "variableType": "NicDao",
    "mockedClass": "NicDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\vm\\UserVmManagerTest.java",
      "className": "UserVmManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate NicDao _nicDao;",
        "line": 195,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_nicDao.findById(anyLong())).thenReturn(nic);",
        "line": 554,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVmNicIpSuccess1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_nicDao.persist(any(NicVO.class))).thenReturn(nic);",
        "line": 575,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVmNicIpSuccess1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_nicDao.findById(anyLong())).thenReturn(nic);",
        "line": 601,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVmNicIpSuccess2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_nicDao.persist(any(NicVO.class))).thenReturn(nic);",
        "line": 631,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVmNicIpSuccess2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_nicDao.findById(anyLong())).thenReturn(nic);",
        "line": 659,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVmNicIpFailure1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_nicDao.findById(anyLong())).thenReturn(nic);",
        "line": 697,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVmNicIpFailure2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_nicDao.findById(anyLong())).thenReturn(nic);",
        "line": 744,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVmNicIpFailure3",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
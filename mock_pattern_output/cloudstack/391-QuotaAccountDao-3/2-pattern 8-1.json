[
  {
    "variableName": "quotaAcc",
    "variableType": "QuotaAccountDao",
    "mockedClass": "QuotaAccountDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.apache.cloudstack.quota",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\database\\quota\\src\\test\\java\\org\\apache\\cloudstack\\quota\\QuotaServiceImplTest.java",
      "className": "QuotaServiceImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nQuotaAccountDao quotaAcc;",
        "line": 53,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(quotaAcc.findByIdQuotaAccount(Mockito.anyLong())).thenReturn(quotaAccountVO);",
        "line": 155,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetLockAccount",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(quotaAcc, Mockito.times(0)).persistQuotaAccount(Mockito.any(QuotaAccountVO.class));",
        "line": 157,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetLockAccount",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(quotaAcc, Mockito.times(1)).updateQuotaAccount(Mockito.anyLong(), Mockito.any(QuotaAccountVO.class));",
        "line": 158,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetLockAccount",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// new account\r\nMockito.when(quotaAcc.findByIdQuotaAccount(Mockito.anyLong())).thenReturn(null);",
        "line": 161,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetLockAccount",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(quotaAcc, Mockito.times(1)).persistQuotaAccount(Mockito.any(QuotaAccountVO.class));",
        "line": 163,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetLockAccount",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(quotaAcc.findByIdQuotaAccount(Mockito.anyLong())).thenReturn(quotaAccountVO);",
        "line": 173,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetMinBalance",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(quotaAcc, Mockito.times(0)).persistQuotaAccount(Mockito.any(QuotaAccountVO.class));",
        "line": 175,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetMinBalance",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(quotaAcc, Mockito.times(1)).updateQuotaAccount(Mockito.anyLong(), Mockito.any(QuotaAccountVO.class));",
        "line": 176,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetMinBalance",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// no account with limit set\r\nMockito.when(quotaAcc.findByIdQuotaAccount(Mockito.anyLong())).thenReturn(null);",
        "line": 179,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetMinBalance",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(quotaAcc, Mockito.times(1)).persistQuotaAccount(Mockito.any(QuotaAccountVO.class));",
        "line": 181,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetMinBalance",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  }
]
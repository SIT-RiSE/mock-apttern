[
  {
    "variableName": "niciraNvpResource",
    "variableType": "NiciraNvpResource",
    "mockedClass": "NiciraNvpResource",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.resource",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\resource\\NiciraNvpRequestWrapperTest.java",
      "className": "NiciraNvpRequestWrapperTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate final NiciraNvpResource niciraNvpResource = Mockito.mock(NiciraNvpResource.class);",
        "line": 52,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraNvpResource.getNiciraNvpUtilities()).thenReturn(niciraNvpUtilities);",
        "line": 94,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateLogicalSwitchCommandWrapper",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraNvpResource.truncate(\"lswitch-\" + command.getName(), NiciraNvpResource.NAME_MAX_LEN)).thenReturn(truncated);",
        "line": 96,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateLogicalSwitchCommandWrapper",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraNvpResource.getNiciraNvpApi()).thenReturn(niciraNvpApi);",
        "line": 97,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateLogicalSwitchCommandWrapper",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraNvpResource.getNiciraNvpApi()).thenReturn(niciraNvpApi);",
        "line": 122,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteLogicalSwitchCommandWrapper",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraNvpResource.getNiciraNvpApi()).thenReturn(niciraNvpApi);",
        "line": 153,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConfigurePublicIpsOnLogicalRouterCommand",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraNvpResource.getNiciraNvpApi()).thenReturn(niciraNvpApi);",
        "line": 179,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteLogicalSwitchPortCommand",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraNvpResource.getNiciraNvpApi()).thenReturn(niciraNvpApi);",
        "line": 203,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteLogicalRouterCommand",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraNvpResource.getNiciraNvpUtilities()).thenReturn(niciraNvpUtilities);",
        "line": 233,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateLogicalSwitchPortCommand",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(niciraNvpResource.getNiciraNvpApi()).thenReturn(niciraNvpApi);",
        "line": 234,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateLogicalSwitchPortCommand",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
[
  {
    "variableName": "entityMgr",
    "variableType": "EntityManager",
    "mockedClass": "EntityManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.api.command.test",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\api\\src\\test\\java\\org\\apache\\cloudstack\\api\\command\\test\\CreateAutoScaleVmProfileCmdTest.java",
      "className": "CreateAutoScaleVmProfileCmdTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private EntityManager entityMgr;",
        "line": 46,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "entityMgr = Mockito.spy(EntityManager.class);",
        "line": 79,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityMgr.findById(AutoScaleVmProfile.class, 1L)).thenReturn(autoScaleVmProfile);",
        "line": 155,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateAutoScaleVmProfileSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "entityMgr",
    "variableType": "EntityManager",
    "mockedClass": "EntityManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.api.command.test",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\api\\src\\test\\java\\org\\apache\\cloudstack\\api\\command\\test\\UpdateAutoScaleVmProfileCmdTest.java",
      "className": "UpdateAutoScaleVmProfileCmdTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private EntityManager entityMgr;",
        "line": 44,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "entityMgr = Mockito.spy(EntityManager.class);",
        "line": 64,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityMgr.findById(AutoScaleVmProfile.class, 1L)).thenReturn(autoScaleVmProfile);",
        "line": 112,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateAutoScaleVmProfileSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "entityMgr",
    "variableType": "EntityManager",
    "mockedClass": "EntityManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.api.command.test",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\api\\src\\test\\java\\org\\apache\\cloudstack\\api\\command\\test\\UpdateConditionCmdTest.java",
      "className": "UpdateConditionCmdTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private EntityManager entityMgr;",
        "line": 48,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "entityMgr = Mockito.spy(EntityManager.class);",
        "line": 61,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityMgr.findById(Condition.class, conditionId)).thenReturn(condition);",
        "line": 88,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "verifyUpdateConditionCmd",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityMgr.findById(Condition.class, conditionId)).thenReturn(null);",
        "line": 92,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "verifyUpdateConditionCmd",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "_entityMgr",
    "variableType": "EntityManager",
    "mockedClass": "EntityManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.api.command.user.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\api\\src\\test\\java\\org\\apache\\cloudstack\\api\\command\\user\\network\\CreateNetworkCmdTest.java",
      "className": "CreateNetworkCmdTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\npublic EntityManager _entityMgr;",
        "line": 42,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_entityMgr.findById(NetworkOffering.class, networkOfferingId)).thenReturn(networkOffering);",
        "line": 213,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetPhysicalNetworkIdForInvalidAssociatedNetId",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_entityMgr.findById(Network.class, associatedNetworkId)).thenReturn(null);",
        "line": 214,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetPhysicalNetworkIdForInvalidAssociatedNetId",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_entityMgr.findById(NetworkOffering.class, networkOfferingId)).thenReturn(networkOffering);",
        "line": 232,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetPhysicalNetworkIdForAssociatedNetIdForNonSharedNet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_entityMgr.findById(Network.class, associatedNetworkId)).thenReturn(network);",
        "line": 233,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetPhysicalNetworkIdForAssociatedNetIdForNonSharedNet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_entityMgr.findById(NetworkOffering.class, networkOfferingId)).thenReturn(networkOffering);",
        "line": 249,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetPhysicalNetworkIdForNonSharedNet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_entityMgr.findById(NetworkOffering.class, networkOfferingId)).thenReturn(networkOffering);",
        "line": 265,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetPhysicalNetworkIdForL2Net",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_entityMgr.findById(NetworkOffering.class, networkOfferingId)).thenReturn(networkOffering);",
        "line": 281,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetPhysicalNetworkIdForSharedNet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_entityMgr.findById(NetworkOffering.class, networkOfferingId)).thenReturn(networkOffering);",
        "line": 297,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetZoneId",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "_entityMgr",
    "variableType": "EntityManager",
    "mockedClass": "EntityManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.api.command.user.vpc",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\api\\src\\test\\java\\org\\apache\\cloudstack\\api\\command\\user\\vpc\\CreateVPCCmdTest.java",
      "className": "CreateVPCCmdTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\npublic EntityManager _entityMgr;",
        "line": 45,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_entityMgr.findById(Mockito.eq(Vpc.class), Mockito.any(Long.class))).thenReturn(vpc);",
        "line": 159,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecute",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "_entityMgr",
    "variableType": "EntityManager",
    "mockedClass": "EntityManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\orchestration\\src\\test\\java\\com\\cloud\\vm\\VirtualMachineManagerImplTest.java",
      "className": "VirtualMachineManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate EntityManager _entityMgr;",
        "line": 184,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_entityMgr.findByIdIncludingRemoved(VirtualMachineTemplate.class, vmInstance.getTemplateId())).thenReturn(template);",
        "line": 985,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testOrchestrateStartNonNullPodId",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_entityMgr.findByIdIncludingRemoved(VirtualMachineTemplate.class, vmInstance.getTemplateId())).thenReturn(template);",
        "line": 1077,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testOrchestrateStartNullPodId",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "_entityMgr",
    "variableType": "EntityManager",
    "mockedClass": "EntityManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\cisco-vnmc\\src\\test\\java\\com\\cloud\\network\\element\\CiscoVnmcElementTest.java",
      "className": "CiscoVnmcElementTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "EntityManager _entityMgr = mock(EntityManager.class);",
        "line": 107,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_entityMgr.findById(DataCenter.class, network.getDataCenterId())).thenReturn(dc);",
        "line": 171,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "entityManager",
    "variableType": "EntityManager",
    "mockedClass": "EntityManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.api.command",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\api\\command\\ConfigTungstenFabricServiceCmdTest.java",
      "className": "ConfigTungstenFabricServiceCmdTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nEntityManager entityManager;",
        "line": 53,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityManager.findById(ArgumentMatchers.any(), ArgumentMatchers.anyLong())).thenReturn(dataCenter);",
        "line": 90,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "entityManager",
    "variableType": "EntityManager",
    "mockedClass": "EntityManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.api.command",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\api\\command\\UpdateTungstenFabricLBHealthMonitorCmdTest.java",
      "className": "UpdateTungstenFabricLBHealthMonitorCmdTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nEntityManager entityManager;",
        "line": 45,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityManager.findById(ArgumentMatchers.eq(TungstenFabricLBHealthMonitorVO.class), ArgumentMatchers.anyLong())).thenReturn(tungstenFabricLBHealthMonitorVO);",
        "line": 103,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityManager.findById(ArgumentMatchers.eq(LoadBalancer.class), ArgumentMatchers.anyLong())).thenReturn(loadBalancer);",
        "line": 105,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityManager.findById(ArgumentMatchers.eq(Network.class), ArgumentMatchers.anyLong())).thenReturn(network);",
        "line": 106,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityManager.findById(ArgumentMatchers.eq(DataCenter.class), ArgumentMatchers.anyLong())).thenReturn(dataCenter);",
        "line": 107,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "entityMgr",
    "variableType": "EntityManager",
    "mockedClass": "EntityManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenServiceImplTest.java",
      "className": "TungstenServiceImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nEntityManager entityMgr;",
        "line": 236,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityMgr.findById(eq(SslCertVO.class), anyLong())).thenReturn(sslCertVO);",
        "line": 711,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateLoadBalancerTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityMgr.findById(eq(NicSecondaryIp.class), anyLong())).thenReturn(nicSecondaryIp);",
        "line": 884,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addTungstenNicSecondaryIpAddressTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityMgr.findById(eq(Network.class), anyLong())).thenReturn(network);",
        "line": 885,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addTungstenNicSecondaryIpAddressTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityMgr.findById(eq(DataCenter.class), anyLong())).thenReturn(dataCenter);",
        "line": 886,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addTungstenNicSecondaryIpAddressTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityMgr.findById(eq(Nic.class), anyLong())).thenReturn(nic);",
        "line": 887,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addTungstenNicSecondaryIpAddressTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityMgr.findById(eq(Network.class), anyLong())).thenReturn(network);",
        "line": 914,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeTungstenNicSecondaryIpAddressTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityMgr.findById(eq(DataCenter.class), anyLong())).thenReturn(dataCenter);",
        "line": 915,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeTungstenNicSecondaryIpAddressTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "entityManager",
    "variableType": "EntityManager",
    "mockedClass": "EntityManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.api.query",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\api\\query\\QueryManagerImplTest.java",
      "className": "QueryManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nEntityManager entityManager;",
        "line": 69,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityManager.findByUuidIncludingRemoved(Network.class, uuid)).thenReturn(network);",
        "line": 130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "searchForEventsSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityManager.findByUuidIncludingRemoved(VirtualMachine.class, uuid)).thenReturn(null);",
        "line": 173,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "searchForEventsFailResourceNotFound",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityManager.findByUuidIncludingRemoved(Network.class, uuid)).thenReturn(network);",
        "line": 186,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "searchForEventsFailPermissionDenied",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "entityMgr",
    "variableType": "EntityManager",
    "mockedClass": "EntityManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.event",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\event\\ActionEventUtilsTest.java",
      "className": "ActionEventUtilsTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprotected EntityManager entityMgr;",
        "line": 96,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityMgr.validEntityType(VirtualMachine.class)).thenReturn(true);",
        "line": 265,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPublishedEventResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityMgr.findByIdIncludingRemoved(VirtualMachine.class, resourceId)).thenReturn(vm);",
        "line": 266,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPublishedEventResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityMgr.validEntityType(VirtualMachine.class)).thenReturn(true);",
        "line": 281,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPublishedEventResourceWithCallContext",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityMgr.findByUuidIncludingRemoved(VirtualMachine.class, resourceUuid)).thenReturn(vm);",
        "line": 282,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPublishedEventResourceWithCallContext",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityMgr.findByUuidIncludingRemoved(VirtualMachine.class, resourceUuid)).thenReturn(vm);",
        "line": 298,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testScheduledEvent",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityMgr.findByUuidIncludingRemoved(VirtualMachine.class, resourceUuid)).thenReturn(vm);",
        "line": 324,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreatedEvent",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityMgr.findByUuidIncludingRemoved(VirtualMachine.class, resourceUuid)).thenReturn(vm);",
        "line": 350,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNestedEvent",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityMgr.validEntityType(Snapshot.class)).thenReturn(true);",
        "line": 376,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSnapshotEventResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityMgr.validEntityType(Volume.class)).thenReturn(true);",
        "line": 377,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSnapshotEventResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityMgr.findByIdIncludingRemoved(Snapshot.class, snapshotResourceId)).thenReturn(snapshot);",
        "line": 378,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSnapshotEventResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityMgr.findByIdIncludingRemoved(Volume.class, resourceId)).thenReturn(volume);",
        "line": 379,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSnapshotEventResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityMgr.validEntityType(VMSnapshot.class)).thenReturn(true);",
        "line": 400,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testVmSnapshotEventResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityMgr.validEntityType(VirtualMachine.class)).thenReturn(true);",
        "line": 401,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testVmSnapshotEventResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityMgr.findByIdIncludingRemoved(VMSnapshot.class, vmSnapshotResourceId)).thenReturn(vmSnapshot);",
        "line": 402,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testVmSnapshotEventResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityMgr.findByIdIncludingRemoved(VirtualMachine.class, resourceId)).thenReturn(vm);",
        "line": 403,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testVmSnapshotEventResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "entityManager",
    "variableType": "EntityManager",
    "mockedClass": "EntityManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.event.dao",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\event\\dao\\EventJoinDaoImplTest.java",
      "className": "EventJoinDaoImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprotected EntityManager entityManager;",
        "line": 42,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityManager.validEntityType(VirtualMachine.class)).thenReturn(true);",
        "line": 62,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNewEventViewResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityManager.findByIdIncludingRemoved(VirtualMachine.class, resourceId)).thenReturn(vm);",
        "line": 63,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNewEventViewResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "entityManager",
    "variableType": "EntityManager",
    "mockedClass": "EntityManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.as",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\as\\AutoScaleManagerImplTest.java",
      "className": "AutoScaleManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nEntityManager entityManager;",
        "line": 198,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(Condition.class, conditionId)).thenReturn(conditionMock);",
        "line": 656,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateAutoScalePolicyCmd",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(DataCenter.class, zoneId)).thenReturn(zoneMock);",
        "line": 738,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateAutoScaleVmProfile",
          "methodAnnotations": [
            "@Test",
            "@PrepareForTest"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(ServiceOffering.class, serviceOfferingId)).thenReturn(serviceOfferingMock);",
        "line": 739,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateAutoScaleVmProfile",
          "methodAnnotations": [
            "@Test",
            "@PrepareForTest"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findByIdIncludingRemoved(ServiceOffering.class, serviceOfferingId)).thenReturn(serviceOfferingMock);",
        "line": 740,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateAutoScaleVmProfile",
          "methodAnnotations": [
            "@Test",
            "@PrepareForTest"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(VirtualMachineTemplate.class, templateId)).thenReturn(templateMock);",
        "line": 741,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateAutoScaleVmProfile",
          "methodAnnotations": [
            "@Test",
            "@PrepareForTest"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(DataCenter.class, zoneId)).thenReturn(zoneMock);",
        "line": 776,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateAutoScaleVmProfileFail",
          "methodAnnotations": [
            "@Test",
            "@PrepareForTest"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(ServiceOffering.class, serviceOfferingId)).thenReturn(serviceOfferingMock);",
        "line": 777,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateAutoScaleVmProfileFail",
          "methodAnnotations": [
            "@Test",
            "@PrepareForTest"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findByIdIncludingRemoved(ServiceOffering.class, serviceOfferingId)).thenReturn(serviceOfferingMock);",
        "line": 778,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateAutoScaleVmProfileFail",
          "methodAnnotations": [
            "@Test",
            "@PrepareForTest"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(VirtualMachineTemplate.class, templateId)).thenReturn(templateMock);",
        "line": 779,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateAutoScaleVmProfileFail",
          "methodAnnotations": [
            "@Test",
            "@PrepareForTest"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(ServiceOffering.class, serviceOfferingId)).thenReturn(serviceOfferingMock);",
        "line": 813,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateAutoScaleVmProfile",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findByIdIncludingRemoved(ServiceOffering.class, serviceOfferingId)).thenReturn(serviceOfferingMock);",
        "line": 814,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateAutoScaleVmProfile",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(VirtualMachineTemplate.class, templateId)).thenReturn(templateMock);",
        "line": 815,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateAutoScaleVmProfile",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(LoadBalancer.class, loadBalancerId)).thenReturn(loadBalancerMock);",
        "line": 942,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateAutoScaleVmGroup",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(DataCenter.class, zoneId)).thenReturn(zoneMock);",
        "line": 1270,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateNewVM1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(ServiceOffering.class, serviceOfferingId)).thenReturn(serviceOfferingMock);",
        "line": 1271,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateNewVM1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(DiskOffering.class, diskOfferingId)).thenReturn(diskOfferingMock);",
        "line": 1273,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateNewVM1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(VirtualMachineTemplate.class, templateId)).thenReturn(templateMock);",
        "line": 1274,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateNewVM1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(DataCenter.class, zoneId)).thenReturn(zoneMock);",
        "line": 1318,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateNewVM2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(ServiceOffering.class, serviceOfferingId)).thenReturn(serviceOfferingMock);",
        "line": 1319,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateNewVM2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(DiskOffering.class, diskOfferingId)).thenReturn(diskOfferingMock);",
        "line": 1321,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateNewVM2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(VirtualMachineTemplate.class, templateId)).thenReturn(templateMock);",
        "line": 1322,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateNewVM2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(DataCenter.class, zoneId)).thenReturn(zoneMock);",
        "line": 1367,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateNewVM3",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(ServiceOffering.class, serviceOfferingId)).thenReturn(serviceOfferingMock);",
        "line": 1368,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateNewVM3",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(DiskOffering.class, diskOfferingId)).thenReturn(diskOfferingMock);",
        "line": 1370,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateNewVM3",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(VirtualMachineTemplate.class, templateId)).thenReturn(templateMock);",
        "line": 1371,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateNewVM3",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "_entityMgr",
    "variableType": "EntityManager",
    "mockedClass": "EntityManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\element\\VpcVirtualRouterElementTest.java",
      "className": "VpcVirtualRouterElementTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nEntityManager _entityMgr;",
        "line": 57,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_entityMgr.findById(Vpc.class, vpcId)).thenReturn(vpc);",
        "line": 102,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testApplyVpnUsers",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "entityMgr",
    "variableType": "EntityManager",
    "mockedClass": "EntityManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.vpc",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\vpc\\VpcManagerImplTest.java",
      "className": "VpcManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nEntityManager entityMgr;",
        "line": 126,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityMgr.findById(NetworkOffering.class, 1L)).thenReturn(offering);",
        "line": 331,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVpcNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "entityMgr",
    "variableType": "EntityManager",
    "mockedClass": "EntityManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.resourceicon",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\resourceicon\\ResourceIconManagerImplTest.java",
      "className": "ResourceIconManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nEntityManager entityMgr;",
        "line": 66,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityMgr.findById(NetworkVO.class, RESOURCE_ID)).thenReturn(network);",
        "line": 95,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUploadIconActionEventResourceDetailsUpdate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityMgr.findById(VMTemplateVO.class, RESOURCE_ID)).thenReturn(template);",
        "line": 126,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteIconActionEventResourceDetailsUpdate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "entityManager",
    "variableType": "EntityManager",
    "mockedClass": "EntityManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\vm\\UserVmManagerImplTest.java",
      "className": "UserVmManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate EntityManager entityManager;",
        "line": 148,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(DataCenter.class, zoneId)).thenReturn(_dcMock);",
        "line": 924,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "createVirtualMachineWithInactiveServiceOffering",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(entityManager.findById(ServiceOffering.class, serviceOfferingId)).thenReturn(serviceOffering);",
        "line": 925,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "createVirtualMachineWithInactiveServiceOffering",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "_entityMgr",
    "variableType": "EntityManager",
    "mockedClass": "EntityManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\vm\\UserVmManagerTest.java",
      "className": "UserVmManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate EntityManager _entityMgr;",
        "line": 183,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_entityMgr.findById(eq(ServiceOffering.class), anyLong())).thenReturn(so2);",
        "line": 374,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testScaleVMF3",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_entityMgr.findById(ServiceOffering.class, 1L)).thenReturn(so1);",
        "line": 375,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testScaleVMF3",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_entityMgr.findById(eq(ServiceOffering.class), anyLong())).thenReturn(so2);",
        "line": 420,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testScaleVMF4",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_entityMgr.findById(ServiceOffering.class, 1L)).thenReturn(so1);",
        "line": 421,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testScaleVMF4",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "entityManager",
    "variableType": "EntityManager",
    "mockedClass": "EntityManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.annotation",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\org\\apache\\cloudstack\\annotation\\AnnotationManagerImplTest.java",
      "className": "AnnotationManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nEntityManager entityManager;",
        "line": 128,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityManager.findByUuid(Volume.class, uuid)).thenReturn(volume);",
        "line": 163,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddAnnotationResourceDetailsUpdate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(entityManager.findByUuid(VirtualMachine.class, uuid)).thenReturn(vm);",
        "line": 186,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemoveAnnotationResourceDetailsUpdate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
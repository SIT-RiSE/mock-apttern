[
  {
    "variableName": "mock",
    "variableType": "EntityManager",
    "mockedClass": "EntityManager",
    "isReuseableMock": null,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Other Methods\n\nStubbing:\n\u2014 Other Methods\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.contrail.management",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\juniper-contrail\\src\\test\\java\\org\\apache\\cloudstack\\network\\contrail\\management\\IntegrationTestConfiguration.java",
      "className": "IntegrationTestConfiguration"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "EntityManager mock = Mockito.mock(EntityManager.class);",
        "line": 499,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "entityManager",
          "methodAnnotations": [
            "@Bean"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mock.findById(Matchers.same(Account.class), Matchers.anyLong())).thenReturn(_accountDao.findById(Account.ACCOUNT_ID_SYSTEM));",
        "line": 501,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "entityManager",
          "methodAnnotations": [
            "@Bean"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mock.findById(Matchers.same(User.class), Matchers.anyLong())).thenReturn(_userDao.findById(User.UID_SYSTEM));",
        "line": 502,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "entityManager",
          "methodAnnotations": [
            "@Bean"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mock.findById(Matchers.same(NetworkOffering.class), Matchers.any(Long.class))).thenAnswer(new Answer<NetworkOffering>() {\r\n\r\n    @Override\r\n    public NetworkOffering answer(final InvocationOnMock invocation) throws Throwable {\r\n        Long id = (Long) invocation.getArguments()[1];\r\n        return _networkOfferingDao.findById(id);\r\n    }\r\n});",
        "line": 503,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "entityManager",
          "methodAnnotations": [
            "@Bean"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mock.findById(Matchers.same(IpAddress.class), Matchers.any(Long.class))).thenAnswer(new Answer<IpAddress>() {\r\n\r\n    @Override\r\n    public IpAddress answer(final InvocationOnMock invocation) throws Throwable {\r\n        Long id = (Long) invocation.getArguments()[1];\r\n        return _ipAddressDao.findById(id);\r\n    }\r\n});",
        "line": 510,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "entityManager",
          "methodAnnotations": [
            "@Bean"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(mock.findById(Matchers.same(DataCenter.class), Matchers.any(Long.class))).thenAnswer(new Answer<DataCenter>() {\r\n\r\n    @Override\r\n    public DataCenter answer(final InvocationOnMock invocation) throws Throwable {\r\n        Long id = (Long) invocation.getArguments()[1];\r\n        return _zoneDao.findById(id);\r\n    }\r\n});",
        "line": 517,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "entityManager",
          "methodAnnotations": [
            "@Bean"
          ]
        }
      }
    ],
    "pattern_id": 20
  }
]
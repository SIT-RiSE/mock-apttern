[
  {
    "variableName": "virtualMachineMock",
    "variableType": "VirtualMachine",
    "mockedClass": "VirtualMachine",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.api.command.admin.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\api\\src\\test\\java\\org\\apache\\cloudstack\\api\\command\\admin\\vm\\MigrateVirtualMachineWithVolumeCmdTest.java",
      "className": "MigrateVirtualMachineWithVolumeCmdTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nVirtualMachine virtualMachineMock;",
        "line": 63,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(virtualMachineMock.getState()).thenReturn(VirtualMachine.State.Stopped);",
        "line": 107,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeTestVMIsStoppedAndHostIdIsNotNullThrowsInvalidParameterValueException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(virtualMachineMock.toString()).thenReturn(String.format(\"VM [uuid: %s, name: %s]\", virtualMachineUuid, virtualMachineName));",
        "line": 108,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeTestVMIsStoppedAndHostIdIsNotNullThrowsInvalidParameterValueException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(virtualMachineMock.getState()).thenReturn(VirtualMachine.State.Running);",
        "line": 125,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeTestVMIsRunningAndHostIdIsNullThrowsInvalidParameterValueException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(virtualMachineMock.toString()).thenReturn(String.format(\"VM [uuid: %s, name: %s]\", virtualMachineUuid, virtualMachineName));",
        "line": 126,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeTestVMIsRunningAndHostIdIsNullThrowsInvalidParameterValueException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(virtualMachineMock.getState()).thenReturn(VirtualMachine.State.Running);",
        "line": 144,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeTestHostIdIsNullThrowsInvalidParameterValueException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(virtualMachineMock.getState()).thenReturn(VirtualMachine.State.Running);",
        "line": 163,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeTestHostIsNotNullMigratedVMIsNullThrowsServerApiException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(virtualMachineMock.getState()).thenReturn(VirtualMachine.State.Stopped);",
        "line": 182,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeTestHostIsNullMigratedVMIsNullThrowsServerApiException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(virtualMachineMock.getState()).thenReturn(VirtualMachine.State.Stopped);",
        "line": 200,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeTestSystemVMMigratedWithSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(virtualMachineMock.getType()).thenReturn(VirtualMachine.Type.ConsoleProxy);",
        "line": 202,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "executeTestSystemVMMigratedWithSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "vm",
    "variableType": "VirtualMachine",
    "mockedClass": "VirtualMachine",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.capacity",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\capacity\\CapacityManagerTest.java",
      "className": "CapacityManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private VirtualMachine vm = mock(VirtualMachine.class);",
        "line": 44,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getHostId()).thenReturn(1l);",
        "line": 59,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "allocateCapacityTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getServiceOfferingId()).thenReturn(2l);",
        "line": 60,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "allocateCapacityTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "virtualMachineMock",
    "variableType": "VirtualMachine",
    "mockedClass": "VirtualMachine",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\hypervisor\\KVMGuruTest.java",
      "className": "KVMGuruTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nVirtualMachine virtualMachineMock;",
        "line": 86,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(virtualMachineMock.getLastHostId()).thenReturn(1l);",
        "line": 279,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateGetHostMaxMemoryAndCpuCoresHostNullAndLastHostIdNotNullAndLastHostNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(virtualMachineMock.getLastHostId()).thenReturn(1l);",
        "line": 293,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateGetHostMaxMemoryAndCpuCoresHostNullAndLastHostIdNotNullAndLastHostNotNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "virtualMachine",
    "variableType": "VirtualMachine",
    "mockedClass": "VirtualMachine",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.consoleproxy",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\org\\apache\\cloudstack\\consoleproxy\\ConsoleAccessManagerImplTest.java",
      "className": "ConsoleAccessManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nVirtualMachine virtualMachine;",
        "line": 64,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(virtualMachine.getType()).thenReturn(VirtualMachine.Type.User);",
        "line": 80,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckSessionPermissionUserOwnedVm",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(virtualMachine.getType()).thenReturn(VirtualMachine.Type.User);",
        "line": 91,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckSessionPermissionDifferentUserOwnedVm",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(virtualMachine.getType()).thenReturn(type);",
        "line": 105,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckSessionPermissionForUsersOnSystemVms",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
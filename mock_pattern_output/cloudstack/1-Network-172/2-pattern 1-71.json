[
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.api.command.user.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\api\\src\\test\\java\\org\\apache\\cloudstack\\api\\command\\user\\network\\UpdateNetworkCmdTest.java",
      "className": "UpdateNetworkCmdTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = Mockito.mock(Network.class);",
        "line": 163,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testEventDescription",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getNetworkOfferingId()).thenReturn(networkOfferingId);",
        "line": 167,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testEventDescription",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.xenserver.resource.wrapper.xenbase",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\xenserver\\src\\test\\java\\com\\cloud\\hypervisor\\xenserver\\resource\\wrapper\\xenbase\\CitrixRequestWrapperTest.java",
      "className": "CitrixRequestWrapperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network = Mockito.mock(Network.class);",
        "line": 698,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testOvsSetTagAndFlowCommand",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBridge(conn)).thenReturn(\"br0\");",
        "line": 709,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testOvsSetTagAndFlowCommand",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.xenserver.resource.wrapper.xenbase",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\xenserver\\src\\test\\java\\com\\cloud\\hypervisor\\xenserver\\resource\\wrapper\\xenbase\\CitrixRequestWrapperTest.java",
      "className": "CitrixRequestWrapperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network = Mockito.mock(Network.class);",
        "line": 819,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testOvsCreateGreTunnelCommand",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBridge(conn)).thenReturn(bridge);",
        "line": 831,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testOvsCreateGreTunnelCommand",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.xenserver.resource.wrapper.xenbase",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\xenserver\\src\\test\\java\\com\\cloud\\hypervisor\\xenserver\\resource\\wrapper\\xenbase\\CitrixRequestWrapperTest.java",
      "className": "CitrixRequestWrapperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network = Mockito.mock(Network.class);",
        "line": 857,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testOvsDeleteFlowCommandSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBridge(conn)).thenReturn(bridge);",
        "line": 867,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testOvsDeleteFlowCommandSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.xenserver.resource.wrapper.xenbase",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\xenserver\\src\\test\\java\\com\\cloud\\hypervisor\\xenserver\\resource\\wrapper\\xenbase\\CitrixRequestWrapperTest.java",
      "className": "CitrixRequestWrapperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network = Mockito.mock(Network.class);",
        "line": 890,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testOvsDeleteFlowCommandFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBridge(conn)).thenReturn(bridge);",
        "line": 900,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testOvsDeleteFlowCommandFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.xenserver.resource.wrapper.xenbase",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\xenserver\\src\\test\\java\\com\\cloud\\hypervisor\\xenserver\\resource\\wrapper\\xenbase\\CitrixRequestWrapperTest.java",
      "className": "CitrixRequestWrapperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network = Mockito.mock(Network.class);",
        "line": 923,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testOvsVpcPhysicalTopologyConfigCommand",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBridge(conn)).thenReturn(bridge);",
        "line": 937,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testOvsVpcPhysicalTopologyConfigCommand",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.xenserver.resource.wrapper.xenbase",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\xenserver\\src\\test\\java\\com\\cloud\\hypervisor\\xenserver\\resource\\wrapper\\xenbase\\CitrixRequestWrapperTest.java",
      "className": "CitrixRequestWrapperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network = Mockito.mock(Network.class);",
        "line": 963,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testOvsVpcRoutingPolicyConfigCommand",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBridge(conn)).thenReturn(bridge);",
        "line": 976,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testOvsVpcRoutingPolicyConfigCommand",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.xenserver.resource.wrapper.xenbase",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\xenserver\\src\\test\\java\\com\\cloud\\hypervisor\\xenserver\\resource\\wrapper\\xenbase\\CitrixRequestWrapperTest.java",
      "className": "CitrixRequestWrapperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network = Mockito.mock(Network.class);",
        "line": 1120,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testOvsCreateTunnelCommandSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBridge(conn)).thenReturn(bridge);",
        "line": 1130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testOvsCreateTunnelCommandSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.xenserver.resource.wrapper.xenbase",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\xenserver\\src\\test\\java\\com\\cloud\\hypervisor\\xenserver\\resource\\wrapper\\xenbase\\CitrixRequestWrapperTest.java",
      "className": "CitrixRequestWrapperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network = Mockito.mock(Network.class);",
        "line": 1157,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testOvsCreateTunnelCommandFail",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBridge(conn)).thenReturn(bridge);",
        "line": 1167,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testOvsCreateTunnelCommandFail",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.xenserver.resource.wrapper.xenbase",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\xenserver\\src\\test\\java\\com\\cloud\\hypervisor\\xenserver\\resource\\wrapper\\xenbase\\CitrixRequestWrapperTest.java",
      "className": "CitrixRequestWrapperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network = Mockito.mock(Network.class);",
        "line": 1261,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testOvsDestroyTunnelCommandSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBridge(conn)).thenReturn(bridge);",
        "line": 1271,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testOvsDestroyTunnelCommandSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.xenserver.resource.wrapper.xenbase",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\xenserver\\src\\test\\java\\com\\cloud\\hypervisor\\xenserver\\resource\\wrapper\\xenbase\\CitrixRequestWrapperTest.java",
      "className": "CitrixRequestWrapperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network = Mockito.mock(Network.class);",
        "line": 1294,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testOvsDestroyTunnelCommandFailed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBridge(conn)).thenReturn(bridge);",
        "line": 1304,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testOvsDestroyTunnelCommandFailed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network2",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.xenserver.resource.wrapper.xenbase",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\xenserver\\src\\test\\java\\com\\cloud\\hypervisor\\xenserver\\resource\\wrapper\\xenbase\\CitrixRequestWrapperTest.java",
      "className": "CitrixRequestWrapperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network2 = Mockito.mock(Network.class);",
        "line": 1719,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPvlanSetupCommandDhcpSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network2.getNameLabel(conn)).thenReturn(label);",
        "line": 1737,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPvlanSetupCommandDhcpSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network2",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.xenserver.resource.wrapper.xenbase",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\xenserver\\src\\test\\java\\com\\cloud\\hypervisor\\xenserver\\resource\\wrapper\\xenbase\\CitrixRequestWrapperTest.java",
      "className": "CitrixRequestWrapperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network2 = Mockito.mock(Network.class);",
        "line": 1760,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPvlanSetupCommandDhcpFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network2.getNameLabel(conn)).thenReturn(label);",
        "line": 1778,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPvlanSetupCommandDhcpFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network2",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.xenserver.resource.wrapper.xenbase",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\xenserver\\src\\test\\java\\com\\cloud\\hypervisor\\xenserver\\resource\\wrapper\\xenbase\\CitrixRequestWrapperTest.java",
      "className": "CitrixRequestWrapperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network2 = Mockito.mock(Network.class);",
        "line": 1801,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPvlanSetupCommandVmSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network2.getNameLabel(conn)).thenReturn(label);",
        "line": 1817,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPvlanSetupCommandVmSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network2",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.xenserver.resource.wrapper.xenbase",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\xenserver\\src\\test\\java\\com\\cloud\\hypervisor\\xenserver\\resource\\wrapper\\xenbase\\CitrixRequestWrapperTest.java",
      "className": "CitrixRequestWrapperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network2 = Mockito.mock(Network.class);",
        "line": 1840,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPvlanSetupCommandVmFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network2.getNameLabel(conn)).thenReturn(label);",
        "line": 1856,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPvlanSetupCommandVmFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.kubernetes.cluster.actionworkers",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\integrations\\kubernetes-service\\src\\test\\java\\com\\cloud\\kubernetes\\cluster\\actionworkers\\KubernetesClusterActionWorkerTest.java",
      "className": "KubernetesClusterActionWorkerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = Mockito.mock(Network.class);",
        "line": 100,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "mockNetworkForGetVpcTierKubernetesPublicIpTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getVpcId()).thenReturn(DEFAULT_ID);",
        "line": 101,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "mockNetworkForGetVpcTierKubernetesPublicIpTest",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.kubernetes.cluster",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\integrations\\kubernetes-service\\src\\test\\java\\com\\cloud\\kubernetes\\cluster\\KubernetesClusterManagerImplTest.java",
      "className": "KubernetesClusterManagerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = Mockito.mock(Network.class);",
        "line": 63,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testValidateVpcTierAllocated",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getState()).thenReturn(Network.State.Allocated);",
        "line": 64,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testValidateVpcTierAllocated",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.kubernetes.cluster",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\integrations\\kubernetes-service\\src\\test\\java\\com\\cloud\\kubernetes\\cluster\\KubernetesClusterManagerImplTest.java",
      "className": "KubernetesClusterManagerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = Mockito.mock(Network.class);",
        "line": 70,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testValidateVpcTierDefaultDenyRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getState()).thenReturn(Network.State.Implemented);",
        "line": 71,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testValidateVpcTierDefaultDenyRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getNetworkACLId()).thenReturn(NetworkACL.DEFAULT_DENY);",
        "line": 72,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testValidateVpcTierDefaultDenyRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.kubernetes.cluster",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\integrations\\kubernetes-service\\src\\test\\java\\com\\cloud\\kubernetes\\cluster\\KubernetesClusterManagerImplTest.java",
      "className": "KubernetesClusterManagerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = Mockito.mock(Network.class);",
        "line": 78,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testValidateVpcTierValid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getState()).thenReturn(Network.State.Implemented);",
        "line": 79,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testValidateVpcTierValid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getNetworkACLId()).thenReturn(NetworkACL.DEFAULT_ALLOW);",
        "line": 80,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testValidateVpcTierValid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\cisco-vnmc\\src\\test\\java\\com\\cloud\\network\\element\\CiscoVnmcElementTest.java",
      "className": "CiscoVnmcElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = mock(Network.class);",
        "line": 133,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "canHandleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getId()).thenReturn(1L);",
        "line": 134,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "canHandleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Vlan);",
        "line": 135,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "canHandleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastDomainType()).thenReturn(BroadcastDomainType.UnDecided);",
        "line": 138,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "canHandleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\cisco-vnmc\\src\\test\\java\\com\\cloud\\network\\element\\CiscoVnmcElementTest.java",
      "className": "CiscoVnmcElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = mock(Network.class);",
        "line": 146,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getId()).thenReturn(1L);",
        "line": 147,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Vlan);",
        "line": 148,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getDataCenterId()).thenReturn(1L);",
        "line": 149,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getGateway()).thenReturn(\"1.1.1.1\");",
        "line": 150,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastUri()).thenReturn(uri);",
        "line": 151,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getCidr()).thenReturn(\"1.1.1.0/24\");",
        "line": 152,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\cisco-vnmc\\src\\test\\java\\com\\cloud\\network\\element\\CiscoVnmcElementTest.java",
      "className": "CiscoVnmcElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = mock(Network.class);",
        "line": 239,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shutdownTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getId()).thenReturn(1L);",
        "line": 240,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shutdownTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Vlan);",
        "line": 241,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shutdownTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getDataCenterId()).thenReturn(1L);",
        "line": 242,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shutdownTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastUri()).thenReturn(uri);",
        "line": 243,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shutdownTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\cisco-vnmc\\src\\test\\java\\com\\cloud\\network\\element\\CiscoVnmcElementTest.java",
      "className": "CiscoVnmcElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = mock(Network.class);",
        "line": 269,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getId()).thenReturn(1L);",
        "line": 270,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Vlan);",
        "line": 271,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getDataCenterId()).thenReturn(1L);",
        "line": 272,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastUri()).thenReturn(uri);",
        "line": 273,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getCidr()).thenReturn(\"1.1.1.0/24\");",
        "line": 274,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getState()).thenReturn(Network.State.Implemented);",
        "line": 275,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\cisco-vnmc\\src\\test\\java\\com\\cloud\\network\\element\\CiscoVnmcElementTest.java",
      "className": "CiscoVnmcElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = mock(Network.class);",
        "line": 313,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyPRulesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getId()).thenReturn(1L);",
        "line": 314,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyPRulesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Vlan);",
        "line": 315,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyPRulesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getDataCenterId()).thenReturn(1L);",
        "line": 316,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyPRulesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastUri()).thenReturn(uri);",
        "line": 317,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyPRulesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getCidr()).thenReturn(\"1.1.1.0/24\");",
        "line": 318,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyPRulesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getState()).thenReturn(Network.State.Implemented);",
        "line": 319,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyPRulesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\cisco-vnmc\\src\\test\\java\\com\\cloud\\network\\element\\CiscoVnmcElementTest.java",
      "className": "CiscoVnmcElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = mock(Network.class);",
        "line": 363,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyStaticNatsTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getId()).thenReturn(1L);",
        "line": 364,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyStaticNatsTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Vlan);",
        "line": 365,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyStaticNatsTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getDataCenterId()).thenReturn(1L);",
        "line": 366,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyStaticNatsTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastUri()).thenReturn(uri);",
        "line": 367,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyStaticNatsTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getCidr()).thenReturn(\"1.1.1.0/24\");",
        "line": 368,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyStaticNatsTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getState()).thenReturn(Network.State.Implemented);",
        "line": 369,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyStaticNatsTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.globo.globodns.cloudstack.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\globodns\\src\\test\\java\\com\\globo\\globodns\\cloudstack\\element\\GloboDnsElementTest.java",
      "className": "GloboDnsElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = mock(Network.class);",
        "line": 135,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpperCaseCharactersAreNotAllowed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getDataCenterId()).thenReturn(zoneId);",
        "line": 136,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpperCaseCharactersAreNotAllowed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getId()).thenReturn(1l);",
        "line": 137,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpperCaseCharactersAreNotAllowed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.globo.globodns.cloudstack.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\globodns\\src\\test\\java\\com\\globo\\globodns\\cloudstack\\element\\GloboDnsElementTest.java",
      "className": "GloboDnsElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = mock(Network.class);",
        "line": 150,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrepareMethodCallGloboDnsToRegisterHostName",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getDataCenterId()).thenReturn(zoneId);",
        "line": 151,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrepareMethodCallGloboDnsToRegisterHostName",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getId()).thenReturn(1l);",
        "line": 152,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrepareMethodCallGloboDnsToRegisterHostName",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.globo.globodns.cloudstack.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\globodns\\src\\test\\java\\com\\globo\\globodns\\cloudstack\\element\\GloboDnsElementTest.java",
      "className": "GloboDnsElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = mock(Network.class);",
        "line": 183,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReleaseMethodCallResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getDataCenterId()).thenReturn(zoneId);",
        "line": 184,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReleaseMethodCallResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getId()).thenReturn(1l);",
        "line": 185,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReleaseMethodCallResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "net",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\element\\NiciraNvpElementTest.java",
      "className": "NiciraNvpElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network net = mock(Network.class);",
        "line": 125,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "canHandleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(net.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Lswitch);",
        "line": 126,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "canHandleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(net.getId()).thenReturn(NETWORK_ID);",
        "line": 127,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "canHandleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(net.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Vlan);",
        "line": 133,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "canHandleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(net.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Lswitch);",
        "line": 137,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "canHandleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\element\\NiciraNvpElementTest.java",
      "className": "NiciraNvpElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network = mock(Network.class);",
        "line": 155,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementIsolatedNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Lswitch);",
        "line": 156,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementIsolatedNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastUri()).thenReturn(new URI(\"lswitch:aaaaa\"));",
        "line": 157,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementIsolatedNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getId()).thenReturn(NETWORK_ID);",
        "line": 158,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementIsolatedNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getPhysicalNetworkId()).thenReturn(NETWORK_ID);",
        "line": 159,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementIsolatedNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getGuestType()).thenReturn(GuestType.Isolated);",
        "line": 160,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementIsolatedNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getGateway()).thenReturn(NETWORK_GATEWAY);",
        "line": 200,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementIsolatedNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getCidr()).thenReturn(NETWORK_CIDR);",
        "line": 201,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementIsolatedNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\element\\NiciraNvpElementTest.java",
      "className": "NiciraNvpElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network = mock(Network.class);",
        "line": 212,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyIpTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Lswitch);",
        "line": 213,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyIpTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getId()).thenReturn(NETWORK_ID);",
        "line": 214,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyIpTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getPhysicalNetworkId()).thenReturn(NETWORK_ID);",
        "line": 215,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyIpTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\element\\NiciraNvpElementTest.java",
      "className": "NiciraNvpElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// SHARED NETWORKS CASE 1: LOGICAL ROUTER'S UUID AS VLAN ID\r\nfinal Network network = mock(Network.class);",
        "line": 271,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkUuidVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Lswitch);",
        "line": 272,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkUuidVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastUri()).thenReturn(new URI(\"lswitch:aaaaa\"));",
        "line": 273,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkUuidVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getId()).thenReturn(NETWORK_ID);",
        "line": 274,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkUuidVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getPhysicalNetworkId()).thenReturn(NETWORK_ID);",
        "line": 275,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkUuidVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getGuestType()).thenReturn(GuestType.Shared);",
        "line": 276,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkUuidVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getCidr()).thenReturn(NETWORK_CIDR);",
        "line": 307,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkUuidVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getGateway()).thenReturn(NETWORK_GATEWAY);",
        "line": 308,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkUuidVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\element\\NiciraNvpElementTest.java",
      "className": "NiciraNvpElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// SHARED NETWORKS CASE 2: NUMERICAL VLAN ID\r\nfinal Network network = mock(Network.class);",
        "line": 324,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkNumericalVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Lswitch);",
        "line": 325,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkNumericalVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastUri()).thenReturn(new URI(\"lswitch:aaaaa\"));",
        "line": 326,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkNumericalVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getId()).thenReturn(NETWORK_ID);",
        "line": 327,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkNumericalVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getPhysicalNetworkId()).thenReturn(NETWORK_ID);",
        "line": 328,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkNumericalVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getGuestType()).thenReturn(GuestType.Shared);",
        "line": 329,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkNumericalVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\element\\NiciraNvpElementTest.java",
      "className": "NiciraNvpElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network = mock(Network.class);",
        "line": 376,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkNumericalVlanIdWithoutL2GatewayService",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Lswitch);",
        "line": 377,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkNumericalVlanIdWithoutL2GatewayService",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastUri()).thenReturn(new URI(\"lswitch:aaaaa\"));",
        "line": 378,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkNumericalVlanIdWithoutL2GatewayService",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getId()).thenReturn(NETWORK_ID);",
        "line": 379,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkNumericalVlanIdWithoutL2GatewayService",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getPhysicalNetworkId()).thenReturn(NETWORK_ID);",
        "line": 380,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkNumericalVlanIdWithoutL2GatewayService",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getGuestType()).thenReturn(GuestType.Shared);",
        "line": 381,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkNumericalVlanIdWithoutL2GatewayService",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenElementTest.java",
      "className": "TungstenElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = mock(Network.class);",
        "line": 603,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "preparePublicNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getTrafficType()).thenReturn(Networks.TrafficType.Public);",
        "line": 615,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "preparePublicNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenElementTest.java",
      "className": "TungstenElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = mock(Network.class);",
        "line": 634,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "prepareManagementNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getTrafficType()).thenReturn(Networks.TrafficType.Management);",
        "line": 644,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "prepareManagementNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenElementTest.java",
      "className": "TungstenElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = mock(Network.class);",
        "line": 660,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "prepareWithExceptionTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getTrafficType()).thenReturn(Networks.TrafficType.Management);",
        "line": 670,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "prepareWithExceptionTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenElementTest.java",
      "className": "TungstenElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = mock(Network.class);",
        "line": 681,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "releasePublicNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getTrafficType()).thenReturn(Networks.TrafficType.Public);",
        "line": 694,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "releasePublicNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenElementTest.java",
      "className": "TungstenElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = mock(Network.class);",
        "line": 713,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "releaseManagementNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getTrafficType()).thenReturn(Networks.TrafficType.Management);",
        "line": 724,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "releaseManagementNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenElementTest.java",
      "className": "TungstenElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = mock(Network.class);",
        "line": 740,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "releaseWithExceptionTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getTrafficType()).thenReturn(Networks.TrafficType.Management);",
        "line": 750,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "releaseWithExceptionTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenElementTest.java",
      "className": "TungstenElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = mock(Network.class);",
        "line": 1008,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "prepareMigrationTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getTrafficType()).thenReturn(Networks.TrafficType.Public);",
        "line": 1017,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "prepareMigrationTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenGuestNetworkGuruTest.java",
      "className": "TungstenGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network = mock(Network.class);",
        "line": 241,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeallocate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getDataCenterId()).thenReturn(1L);",
        "line": 246,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeallocate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getTrafficType()).thenReturn(Networks.TrafficType.Guest);",
        "line": 247,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeallocate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenGuestNetworkGuruTest.java",
      "className": "TungstenGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network = mock(Network.class);",
        "line": 258,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeallocateWithException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getTrafficType()).thenReturn(Networks.TrafficType.Guest);",
        "line": 266,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeallocateWithException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenGuestNetworkGuruTest.java",
      "className": "TungstenGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network = mock(Network.class);",
        "line": 274,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementGuestNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getTrafficType()).thenReturn(Networks.TrafficType.Guest);",
        "line": 279,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementGuestNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getMode()).thenReturn(Networks.Mode.Dhcp);",
        "line": 280,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementGuestNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getGateway()).thenReturn(\"192.168.1.1\");",
        "line": 281,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementGuestNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getCidr()).thenReturn(\"192.168.1.0/24\");",
        "line": 282,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementGuestNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastDomainType()).thenReturn(Networks.BroadcastDomainType.TUNGSTEN);",
        "line": 283,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementGuestNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getNetworkOfferingId()).thenReturn(1L);",
        "line": 284,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementGuestNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getState()).thenReturn(Network.State.Implementing);",
        "line": 285,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementGuestNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getDataCenterId()).thenReturn(2L);",
        "line": 286,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementGuestNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getPhysicalNetworkId()).thenReturn(3L);",
        "line": 287,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementGuestNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenGuestNetworkGuruTest.java",
      "className": "TungstenGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network = mock(Network.class);",
        "line": 322,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementSharedNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getTrafficType()).thenReturn(Networks.TrafficType.Guest);",
        "line": 326,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementSharedNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getMode()).thenReturn(Networks.Mode.Dhcp);",
        "line": 327,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementSharedNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getGateway()).thenReturn(\"192.168.1.1\");",
        "line": 328,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementSharedNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getCidr()).thenReturn(\"192.168.1.0/24\");",
        "line": 329,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementSharedNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastDomainType()).thenReturn(Networks.BroadcastDomainType.TUNGSTEN);",
        "line": 330,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementSharedNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getNetworkOfferingId()).thenReturn(1L);",
        "line": 331,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementSharedNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getState()).thenReturn(Network.State.Implementing);",
        "line": 332,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementSharedNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getDataCenterId()).thenReturn(2L);",
        "line": 333,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementSharedNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getPhysicalNetworkId()).thenReturn(3L);",
        "line": 334,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementSharedNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenGuestNetworkGuruTest.java",
      "className": "TungstenGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network = mock(Network.class);",
        "line": 355,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementWithException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getTrafficType()).thenReturn(Networks.TrafficType.Guest);",
        "line": 359,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementWithException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getMode()).thenReturn(Networks.Mode.Dhcp);",
        "line": 360,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementWithException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getGateway()).thenReturn(\"192.168.1.1\");",
        "line": 361,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementWithException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getCidr()).thenReturn(\"192.168.1.0/24\");",
        "line": 362,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementWithException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getBroadcastDomainType()).thenReturn(Networks.BroadcastDomainType.TUNGSTEN);",
        "line": 363,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementWithException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getState()).thenReturn(Network.State.Implementing);",
        "line": 364,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementWithException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenGuestNetworkGuruTest.java",
      "className": "TungstenGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network = mock(Network.class);",
        "line": 378,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReserve",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getTrafficType()).thenReturn(Networks.TrafficType.Guest);",
        "line": 387,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReserve",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenGuestNetworkGuruTest.java",
      "className": "TungstenGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network = mock(Network.class);",
        "line": 454,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTrashSharedNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getGuestType()).thenReturn(Network.GuestType.Shared);",
        "line": 459,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTrashSharedNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenGuestNetworkGuruTest.java",
      "className": "TungstenGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Network network = mock(Network.class);",
        "line": 478,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrepareMigration",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getTrafficType()).thenReturn(Networks.TrafficType.Guest);",
        "line": 486,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrepareMigration",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "managementNetwork",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenServiceImplTest.java",
      "className": "TungstenServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network managementNetwork = mock(Network.class);",
        "line": 422,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addManagementNetworkSubnetTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(managementNetwork.getCidr()).thenReturn(\"192.168.100.0/24\");",
        "line": 435,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addManagementNetworkSubnetTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(managementNetwork.getTrafficType()).thenReturn(Networks.TrafficType.Management);",
        "line": 436,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addManagementNetworkSubnetTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "managementNetwork",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenServiceImplTest.java",
      "className": "TungstenServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network managementNetwork = mock(Network.class);",
        "line": 470,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeManagementNetworkSubnetTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(managementNetwork.getTrafficType()).thenReturn(Networks.TrafficType.Management);",
        "line": 483,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeManagementNetworkSubnetTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "publicNetwork",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenServiceImplTest.java",
      "className": "TungstenServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network publicNetwork = mock(Network.class);",
        "line": 521,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addPublicNetworkSubnetTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(publicNetwork.getCidr()).thenReturn(\"192.168.100.0/24\");",
        "line": 538,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addPublicNetworkSubnetTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(publicNetwork.getTrafficType()).thenReturn(Networks.TrafficType.Public);",
        "line": 544,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addPublicNetworkSubnetTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "publicNetwork",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenServiceImplTest.java",
      "className": "TungstenServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network publicNetwork = mock(Network.class);",
        "line": 573,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removePublicNetworkSubnetTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(publicNetwork.getTrafficType()).thenReturn(Networks.TrafficType.Public);",
        "line": 587,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removePublicNetworkSubnetTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenServiceImplTest.java",
      "className": "TungstenServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = mock(Network.class);",
        "line": 874,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addTungstenNicSecondaryIpAddressTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getGuestType()).thenReturn(Network.GuestType.Shared);",
        "line": 894,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addTungstenNicSecondaryIpAddressTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenServiceImplTest.java",
      "className": "TungstenServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = mock(Network.class);",
        "line": 907,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeTungstenNicSecondaryIpAddressTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getGuestType()).thenReturn(Network.GuestType.Shared);",
        "line": 921,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeTungstenNicSecondaryIpAddressTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenServiceImplTest.java",
      "className": "TungstenServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = mock(Network.class);",
        "line": 1586,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "createSharedNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getMode()).thenReturn(Networks.Mode.Dhcp);",
        "line": 1606,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "createSharedNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getCidr()).thenReturn(\"192.168.100.0/24\");",
        "line": 1607,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "createSharedNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getTrafficType()).thenReturn(Networks.TrafficType.Guest);",
        "line": 1619,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "createSharedNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getGuestType()).thenReturn(Network.GuestType.Shared);",
        "line": 1620,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "createSharedNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "ipV6Network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.configuration",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\configuration\\ConfigurationManagerTest.java",
      "className": "ConfigurationManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "//Ipv6 Test\r\nNetwork ipV6Network = mock(Network.class);",
        "line": 894,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "hasSameSubnetTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(ipV6Network.getIp6Gateway()).thenReturn(\"2001:db8:0:f101::1\");",
        "line": 895,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "hasSameSubnetTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(ipV6Network.getIp6Cidr()).thenReturn(\"2001:db8:0:f101::0/64\");",
        "line": 896,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "hasSameSubnetTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\element\\VirtualRouterElementTest.java",
      "className": "VirtualRouterElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = Mockito.mock(Network.class);",
        "line": 454,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCanHandle",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getId()).thenReturn(networkId);",
        "line": 461,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCanHandle",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "lenient().when(network.getPhysicalNetworkId()).thenReturn(physicalNetworkId);",
        "line": 462,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCanHandle",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "lenient().when(network.getTrafficType()).thenReturn(TrafficType.Guest);",
        "line": 463,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCanHandle",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "lenient().when(network.getNetworkOfferingId()).thenReturn(networkOfferingId);",
        "line": 464,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCanHandle",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "lenient().when(network.getDataCenterId()).thenReturn(dataCenterId);",
        "line": 465,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCanHandle",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getVpcId()).thenReturn(null);",
        "line": 466,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCanHandle",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\element\\VirtualRouterElementTest.java",
      "className": "VirtualRouterElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = Mockito.mock(Network.class);",
        "line": 477,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddPasswordAndUserdata",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getId()).thenReturn(networkId);",
        "line": 489,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddPasswordAndUserdata",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "lenient().when(network.getPhysicalNetworkId()).thenReturn(physicalNetworkId);",
        "line": 490,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddPasswordAndUserdata",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "lenient().when(network.getTrafficType()).thenReturn(TrafficType.Guest);",
        "line": 491,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddPasswordAndUserdata",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "lenient().when(network.getNetworkOfferingId()).thenReturn(networkOfferingId);",
        "line": 492,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddPasswordAndUserdata",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "lenient().when(network.getDataCenterId()).thenReturn(dataCenterId);",
        "line": 493,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddPasswordAndUserdata",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(network.getVpcId()).thenReturn(null);",
        "line": 494,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddPasswordAndUserdata",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\guru\\ExternalGuestNetworkGuruTest.java",
      "className": "ExternalGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = Mockito.mock(Network.class);",
        "line": 77,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDesignDns",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getDns1()).thenReturn(ip4Dns[0]);",
        "line": 78,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDesignDns",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getDns2()).thenReturn(ip4Dns[1]);",
        "line": 79,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDesignDns",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getIp6Dns1()).thenReturn(ip6Dns[0]);",
        "line": 80,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDesignDns",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getIp6Dns2()).thenReturn(ip6Dns[1]);",
        "line": 81,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDesignDns",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\IpAddressManagerTest.java",
      "className": "IpAddressManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = mock(Network.class);",
        "line": 227,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setTestIsIpEqualsGatewayOrNetworkOfferingsEmpty",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getNetworkOfferingId()).thenReturn(networkOfferingId);",
        "line": 228,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setTestIsIpEqualsGatewayOrNetworkOfferingsEmpty",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getGateway()).thenReturn(gateway);",
        "line": 229,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setTestIsIpEqualsGatewayOrNetworkOfferingsEmpty",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getIp6Gateway()).thenReturn(ip6Gateway);",
        "line": 230,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setTestIsIpEqualsGatewayOrNetworkOfferingsEmpty",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getCidr()).thenReturn(cidr);",
        "line": 231,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setTestIsIpEqualsGatewayOrNetworkOfferingsEmpty",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\Ipv6AddressManagerTest.java",
      "className": "Ipv6AddressManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = mock(Network.class);",
        "line": 235,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setNICIPv6AddressTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getIp6Cidr()).thenReturn(\"2001:db8:100::/64\");",
        "line": 240,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setNICIPv6AddressTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getIp6Gateway()).thenReturn(\"2001:db8:100::1\");",
        "line": 241,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setNICIPv6AddressTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\Ipv6ServiceImplTest.java",
      "className": "Ipv6ServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = Mockito.mock(Network.class);",
        "line": 443,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNewAssignPublicIpv6ToNetwork",
          "methodAnnotations": [
            "@Test",
            "@DB"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getId()).thenReturn(networkId);",
        "line": 444,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNewAssignPublicIpv6ToNetwork",
          "methodAnnotations": [
            "@Test",
            "@DB"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\Ipv6ServiceImplTest.java",
      "className": "Ipv6ServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = Mockito.mock(Network.class);",
        "line": 461,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFromPlaceholderAssignPublicIpv6ToNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getId()).thenReturn(networkId);",
        "line": 462,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFromPlaceholderAssignPublicIpv6ToNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\Ipv6ServiceImplTest.java",
      "className": "Ipv6ServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = Mockito.mock(Network.class);",
        "line": 598,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckNetworkIpv6UpgradeForNoIpv6Vlan",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getDataCenterId()).thenReturn(zoneId);",
        "line": 599,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckNetworkIpv6UpgradeForNoIpv6Vlan",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getVpcId()).thenReturn(null);",
        "line": 600,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckNetworkIpv6UpgradeForNoIpv6Vlan",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\Ipv6ServiceImplTest.java",
      "className": "Ipv6ServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = Mockito.mock(Network.class);",
        "line": 616,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckNetworkIpv6UpgradeForNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getDataCenterId()).thenReturn(zoneId);",
        "line": 617,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckNetworkIpv6UpgradeForNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getVpcId()).thenReturn(null);",
        "line": 618,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckNetworkIpv6UpgradeForNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "network",
    "variableType": "Network",
    "mockedClass": "NetworkVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\Ipv6ServiceImplTest.java",
      "className": "Ipv6ServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network network = Mockito.mock(NetworkVO.class);",
        "line": 754,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemovePublicIpv6PlaceholderNics",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(network.getId()).thenReturn(networkId);",
        "line": 755,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemovePublicIpv6PlaceholderNics",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "fakeNetwork",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\NetworkModelTest.java",
      "className": "NetworkModelTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network fakeNetwork = mock(Network.class);",
        "line": 173,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetSourceNatIpAddressForGuestNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(fakeNetwork.getId()).thenReturn(1L);",
        "line": 174,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetSourceNatIpAddressForGuestNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "networkMock",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.vpc",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\vpc\\NetworkACLServiceImplTest.java",
      "className": "NetworkACLServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network networkMock = Mockito.mock(Network.class);",
        "line": 214,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "createAclListIfNeededTestAclRuleListIdNullAndNetworkDoesNotHaveVpc",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkMock.getVpcId()).thenReturn(null);",
        "line": 215,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "createAclListIfNeededTestAclRuleListIdNullAndNetworkDoesNotHaveVpc",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "networkMock",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.vpc",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\vpc\\NetworkACLServiceImplTest.java",
      "className": "NetworkACLServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network networkMock = Mockito.mock(Network.class);",
        "line": 229,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "createAclListIfNeededTestAclRuleListIdNullAndNetworkWithVpcAndNotAclListYet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkMock.getVpcId()).thenReturn(12L);",
        "line": 230,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "createAclListIfNeededTestAclRuleListIdNullAndNetworkWithVpcAndNotAclListYet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkMock.getNetworkACLId()).thenReturn(null);",
        "line": 231,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "createAclListIfNeededTestAclRuleListIdNullAndNetworkWithVpcAndNotAclListYet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "networkMock",
    "variableType": "Network",
    "mockedClass": "Network",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.vpc",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\vpc\\NetworkACLServiceImplTest.java",
      "className": "NetworkACLServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Network networkMock = Mockito.mock(Network.class);",
        "line": 250,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "createAclListIfNeededTestAclRuleListIdNullAndNetworkWithVpcAndAclListAlreadyCreated",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkMock.getVpcId()).thenReturn(12L);",
        "line": 252,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "createAclListIfNeededTestAclRuleListIdNullAndNetworkWithVpcAndAclListAlreadyCreated",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkMock.getNetworkACLId()).thenReturn(expectedAclListId);",
        "line": 254,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "createAclListIfNeededTestAclRuleListIdNullAndNetworkWithVpcAndAclListAlreadyCreated",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
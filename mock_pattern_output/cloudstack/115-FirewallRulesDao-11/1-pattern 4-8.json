[
  {
    "variableName": "firewallRulesDao",
    "variableType": "FirewallRulesDao",
    "mockedClass": "FirewallRulesDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.kubernetes.cluster",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\integrations\\kubernetes-service\\src\\test\\java\\com\\cloud\\kubernetes\\cluster\\KubernetesClusterManagerImplTest.java",
      "className": "KubernetesClusterManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nFirewallRulesDao firewallRulesDao;",
        "line": 48,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(firewallRulesDao.listByIpAndPurposeAndNotRevoked(ipId, purpose)).thenReturn(new ArrayList<>());",
        "line": 89,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateIsolatedNetworkIpRulesNoRules",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(firewallRulesDao.listByIpAndPurposeAndNotRevoked(ipId, purpose)).thenReturn(List.of(createRule(80, 80), createRule(443, 443)));",
        "line": 103,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateIsolatedNetworkIpRulesNoConflictingRules",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(firewallRulesDao.listByIpAndPurposeAndNotRevoked(ipId, purpose)).thenReturn(List.of(createRule(6440, 6445), createRule(443, 443)));",
        "line": 112,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateIsolatedNetworkIpRulesApiConflictingRules",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(firewallRulesDao.listByIpAndPurposeAndNotRevoked(ipId, purpose)).thenReturn(List.of(createRule(2200, KubernetesClusterActionWorker.CLUSTER_NODES_DEFAULT_START_SSH_PORT), createRule(443, 443)));",
        "line": 121,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateIsolatedNetworkIpRulesSshConflictingRules",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(firewallRulesDao.listByIpAndPurposeAndNotRevoked(ipId, purpose)).thenReturn(List.of(createRule(2220, 2221), createRule(2225, 2227), createRule(6440, 6442), createRule(6444, 6446)));",
        "line": 130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateIsolatedNetworkIpRulesNearConflictingRules",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "firewallRulesDao",
    "variableType": "FirewallRulesDao",
    "mockedClass": "FirewallRulesDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenGuestNetworkGuruTest.java",
      "className": "TungstenGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nFirewallRulesDao firewallRulesDao;",
        "line": 145,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(firewallRulesDao.listByNetworkAndPurpose(anyLong(), any())).thenReturn(List.of(firewallRuleVO));",
        "line": 430,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testShutdown",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "fwRulesDao",
    "variableType": "FirewallRulesDao",
    "mockedClass": "FirewallRulesDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenServiceImplTest.java",
      "className": "TungstenServiceImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nFirewallRulesDao fwRulesDao;",
        "line": 244,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(fwRulesDao.listByIpAndPurposeAndNotRevoked(anyLong(), eq(FirewallRule.Purpose.LoadBalancing))).thenReturn(List.of(firewallRuleVO));",
        "line": 709,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateLoadBalancerTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "_firewallDao",
    "variableType": "FirewallRulesDao",
    "mockedClass": "FirewallRulesDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.configuration",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\configuration\\ConfigurationManagerTest.java",
      "className": "ConfigurationManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nFirewallRulesDao _firewallDao;",
        "line": 171,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(configurationMgr._firewallDao.countRulesByIpId(anyLong())).thenReturn(0L);",
        "line": 486,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "runReleasePublicIpRangePostiveTest2",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "_firewallDao",
    "variableType": "FirewallRulesDao",
    "mockedClass": "FirewallRulesDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.configuration",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\configuration\\ConfigurationManagerTest.java",
      "className": "ConfigurationManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nFirewallRulesDao _firewallDao;",
        "line": 171,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(configurationMgr._firewallDao.countRulesByIpId(anyLong())).thenReturn(0L);",
        "line": 486,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "runReleasePublicIpRangePostiveTest2",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "_firewallDao",
    "variableType": "FirewallRulesDao",
    "mockedClass": "FirewallRulesDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.configuration",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\configuration\\ConfigurationManagerTest.java",
      "className": "ConfigurationManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nFirewallRulesDao _firewallDao;",
        "line": 171,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(configurationMgr._firewallDao.countRulesByIpId(anyLong())).thenReturn(0L);",
        "line": 486,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "runReleasePublicIpRangePostiveTest2",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "_firewallDao",
    "variableType": "FirewallRulesDao",
    "mockedClass": "FirewallRulesDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.firewall",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\firewall\\FirewallManagerTest.java",
      "className": "FirewallManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nFirewallRulesDao _firewallDao;",
        "line": 111,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(firewallMgr._firewallDao.listByIpAndPurposeAndNotRevoked(3, null)).thenReturn(ruleList);",
        "line": 193,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDetectRulesConflict",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "firewallDao",
    "variableType": "FirewallRulesDao",
    "mockedClass": "FirewallRulesDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\Ipv6ServiceImplTest.java",
      "className": "Ipv6ServiceImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nFirewallRulesDao firewallDao;",
        "line": 111,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(firewallDao.findById(firewallRuleId)).thenReturn(null);",
        "line": 636,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateIpv6FirewallRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(firewallDao.findById(firewallRuleId)).thenReturn(ingressFirewallRule);",
        "line": 643,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateIpv6FirewallRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(firewallDao.findById(firewallRuleId)).thenReturn(null);",
        "line": 654,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteIpv6FirewallRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(firewallDao.findById(firewallRuleId)).thenReturn(ingressFirewallRule);",
        "line": 661,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteIpv6FirewallRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(firewallDao.findById(firewallRuleId)).thenReturn(null);",
        "line": 673,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetIpv6FirewallRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(firewallDao.findById(firewallRuleId)).thenReturn(ingressFirewallRule);",
        "line": 678,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetIpv6FirewallRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
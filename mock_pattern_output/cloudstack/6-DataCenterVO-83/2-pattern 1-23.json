[
  {
    "variableName": "dataCenterVO",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.globo.globodns.cloudstack.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\globodns\\src\\test\\java\\com\\globo\\globodns\\cloudstack\\element\\GloboDnsElementTest.java",
      "className": "GloboDnsElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO dataCenterVO = mock(DataCenterVO.class);",
        "line": 158,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrepareMethodCallGloboDnsToRegisterHostName",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dataCenterVO.getId()).thenReturn(zoneId);",
        "line": 159,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrepareMethodCallGloboDnsToRegisterHostName",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dataCenterVO",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.globo.globodns.cloudstack.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\globodns\\src\\test\\java\\com\\globo\\globodns\\cloudstack\\element\\GloboDnsElementTest.java",
      "className": "GloboDnsElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO dataCenterVO = mock(DataCenterVO.class);",
        "line": 191,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReleaseMethodCallResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dataCenterVO.getId()).thenReturn(zoneId);",
        "line": 192,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReleaseMethodCallResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dataCenterVO",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenElementTest.java",
      "className": "TungstenElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO dataCenterVO = mock(DataCenterVO.class);",
        "line": 880,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "processHostAboutToBeRemovedWithSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dataCenterVO.isSecurityGroupEnabled()).thenReturn(true);",
        "line": 889,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "processHostAboutToBeRemovedWithSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dataCenterVO",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenElementTest.java",
      "className": "TungstenElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO dataCenterVO = mock(DataCenterVO.class);",
        "line": 900,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "processHostAboutToBeRemovedWithoutSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dataCenterVO.isSecurityGroupEnabled()).thenReturn(false);",
        "line": 908,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "processHostAboutToBeRemovedWithoutSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dataCenterVO",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenServiceImplTest.java",
      "className": "TungstenServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO dataCenterVO = mock(DataCenterVO.class);",
        "line": 1633,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addTungstenVmSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dataCenterVO.isSecurityGroupEnabled()).thenReturn(true);",
        "line": 1645,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addTungstenVmSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dataCenterVO",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenServiceImplTest.java",
      "className": "TungstenServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO dataCenterVO = mock(DataCenterVO.class);",
        "line": 1671,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeTungstenVmSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dataCenterVO.isSecurityGroupEnabled()).thenReturn(true);",
        "line": 1680,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeTungstenVmSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "zone",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.configuration",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\configuration\\ConfigurationManagerTest.java",
      "className": "ConfigurationManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO zone = Mockito.mock(DataCenterVO.class);",
        "line": 1304,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testEditEdgeZone",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(zone.getNetworkType()).thenReturn(NetworkType.Advanced);",
        "line": 1305,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testEditEdgeZone",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(zone.getType()).thenReturn(DataCenter.Type.Edge);",
        "line": 1306,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testEditEdgeZone",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(zone.getId()).thenReturn(zoneId);",
        "line": 1307,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testEditEdgeZone",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "zone",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.configuration",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\configuration\\ConfigurationManagerTest.java",
      "className": "ConfigurationManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO zone = Mockito.mock(DataCenterVO.class);",
        "line": 1317,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testEdgeZoneCreatePod",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(zone.getNetworkType()).thenReturn(NetworkType.Advanced);",
        "line": 1318,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testEdgeZoneCreatePod",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(zone.getType()).thenReturn(DataCenter.Type.Edge);",
        "line": 1319,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testEdgeZoneCreatePod",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(zone.getId()).thenReturn(1L);",
        "line": 1320,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testEdgeZoneCreatePod",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dc",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.consoleproxy",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\consoleproxy\\ConsoleProxyManagerTest.java",
      "className": "ConsoleProxyManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO dc = mock(DataCenterVO.class);",
        "line": 127,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedNonSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.getNetworkType()).thenReturn(NetworkType.Advanced);",
        "line": 128,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedNonSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.isSecurityGroupEnabled()).thenReturn(false);",
        "line": 129,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedNonSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dc",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.consoleproxy",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\consoleproxy\\ConsoleProxyManagerTest.java",
      "className": "ConsoleProxyManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO dc = Mockito.mock(DataCenterVO.class);",
        "line": 153,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.getNetworkType()).thenReturn(NetworkType.Advanced);",
        "line": 154,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.isSecurityGroupEnabled()).thenReturn(true);",
        "line": 155,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dc",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.consoleproxy",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\consoleproxy\\ConsoleProxyManagerTest.java",
      "className": "ConsoleProxyManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO dc = Mockito.mock(DataCenterVO.class);",
        "line": 175,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicNonSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.getNetworkType()).thenReturn(NetworkType.Basic);",
        "line": 176,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicNonSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.isSecurityGroupEnabled()).thenReturn(false);",
        "line": 177,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicNonSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dc",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.consoleproxy",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\consoleproxy\\ConsoleProxyManagerTest.java",
      "className": "ConsoleProxyManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO dc = Mockito.mock(DataCenterVO.class);",
        "line": 197,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.getNetworkType()).thenReturn(NetworkType.Basic);",
        "line": 198,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.isSecurityGroupEnabled()).thenReturn(true);",
        "line": 199,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dc",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.consoleproxy",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\consoleproxy\\ConsoleProxyManagerTest.java",
      "className": "ConsoleProxyManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO dc = Mockito.mock(DataCenterVO.class);",
        "line": 221,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicSGWrongZoneType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.getNetworkType()).thenReturn(NetworkType.Advanced);",
        "line": 222,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicSGWrongZoneType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.isSecurityGroupEnabled()).thenReturn(true);",
        "line": 223,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicSGWrongZoneType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dc",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.consoleproxy",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\consoleproxy\\ConsoleProxyManagerTest.java",
      "className": "ConsoleProxyManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO dc = Mockito.mock(DataCenterVO.class);",
        "line": 240,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedWrongZoneType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.getNetworkType()).thenReturn(NetworkType.Basic);",
        "line": 241,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedWrongZoneType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.isSecurityGroupEnabled()).thenReturn(true);",
        "line": 242,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedWrongZoneType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "zone",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\guru\\ExternalGuestNetworkGuruTest.java",
      "className": "ExternalGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO zone = Mockito.mock(DataCenterVO.class);",
        "line": 70,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDesignDns",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(zone.getNetworkType()).thenReturn(DataCenter.NetworkType.Advanced);",
        "line": 71,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDesignDns",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dc",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.storage.snapshot",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\storage\\snapshot\\SnapshotManagerTest.java",
      "className": "SnapshotManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO dc = Mockito.mock(DataCenterVO.class);",
        "line": 553,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "mockForBackupSnapshotToSecondaryZoneTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(dc.getType()).thenReturn(dcType);",
        "line": 554,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "mockForBackupSnapshotToSecondaryZoneTest",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "zoneWithDisabledLocalStorage",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.storage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\storage\\VolumeApiServiceImplTest.java",
      "className": "VolumeApiServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO zoneWithDisabledLocalStorage = Mockito.mock(DataCenterVO.class);",
        "line": 635,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testResourceLimitCheckForUploadedVolume",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(zoneWithDisabledLocalStorage.isLocalStorageEnabled()).thenReturn(true);",
        "line": 637,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testResourceLimitCheckForUploadedVolume",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dc",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.secondarystorage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\services\\secondary-storage\\controller\\src\\test\\java\\org\\apache\\cloudstack\\secondarystorage\\SecondaryStorageManagerTest.java",
      "className": "SecondaryStorageManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO dc = mock(DataCenterVO.class);",
        "line": 68,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedNonSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.getNetworkType()).thenReturn(NetworkType.Advanced);",
        "line": 69,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedNonSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.isSecurityGroupEnabled()).thenReturn(false);",
        "line": 70,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedNonSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dc",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.secondarystorage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\services\\secondary-storage\\controller\\src\\test\\java\\org\\apache\\cloudstack\\secondarystorage\\SecondaryStorageManagerTest.java",
      "className": "SecondaryStorageManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO dc = Mockito.mock(DataCenterVO.class);",
        "line": 94,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.getNetworkType()).thenReturn(NetworkType.Advanced);",
        "line": 95,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.isSecurityGroupEnabled()).thenReturn(true);",
        "line": 96,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dc",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.secondarystorage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\services\\secondary-storage\\controller\\src\\test\\java\\org\\apache\\cloudstack\\secondarystorage\\SecondaryStorageManagerTest.java",
      "className": "SecondaryStorageManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO dc = Mockito.mock(DataCenterVO.class);",
        "line": 116,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicNonSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.getNetworkType()).thenReturn(NetworkType.Basic);",
        "line": 117,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicNonSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.isSecurityGroupEnabled()).thenReturn(false);",
        "line": 118,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicNonSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dc",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.secondarystorage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\services\\secondary-storage\\controller\\src\\test\\java\\org\\apache\\cloudstack\\secondarystorage\\SecondaryStorageManagerTest.java",
      "className": "SecondaryStorageManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO dc = Mockito.mock(DataCenterVO.class);",
        "line": 139,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.getNetworkType()).thenReturn(NetworkType.Basic);",
        "line": 140,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.isSecurityGroupEnabled()).thenReturn(true);",
        "line": 141,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dc",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.secondarystorage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\services\\secondary-storage\\controller\\src\\test\\java\\org\\apache\\cloudstack\\secondarystorage\\SecondaryStorageManagerTest.java",
      "className": "SecondaryStorageManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO dc = Mockito.mock(DataCenterVO.class);",
        "line": 163,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicSGWrongZoneType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.getNetworkType()).thenReturn(NetworkType.Advanced);",
        "line": 164,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicSGWrongZoneType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.isSecurityGroupEnabled()).thenReturn(true);",
        "line": 165,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicSGWrongZoneType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dc",
    "variableType": "DataCenterVO",
    "mockedClass": "DataCenterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.secondarystorage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\services\\secondary-storage\\controller\\src\\test\\java\\org\\apache\\cloudstack\\secondarystorage\\SecondaryStorageManagerTest.java",
      "className": "SecondaryStorageManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DataCenterVO dc = Mockito.mock(DataCenterVO.class);",
        "line": 182,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedWrongZoneType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.getNetworkType()).thenReturn(NetworkType.Basic);",
        "line": 183,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedWrongZoneType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dc.isSecurityGroupEnabled()).thenReturn(true);",
        "line": 184,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedWrongZoneType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
[
  {
    "variableName": "storagePoolTagsDao",
    "variableType": "StoragePoolTagsDao",
    "mockedClass": "StoragePoolTagsDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.configuration",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\configuration\\ConfigurationManagerTest.java",
      "className": "ConfigurationManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nStoragePoolTagsDao storagePoolTagsDao;",
        "line": 199,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(storagePoolTagsDao.getStoragePoolTags(anyLong())).thenReturn(storageTagsNull);",
        "line": 1055,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateDiskOfferingTagsWithPrimaryStorageTagsEqualNullTestThrowException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(storagePoolTagsDao.getStoragePoolTags(anyLong())).thenReturn(storageTagsWithMissingTag);",
        "line": 1070,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateDiskOfferingTagsWithPrimaryStorageMissingTagsTestThrowException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(storagePoolTagsDao.getStoragePoolTags(anyLong())).thenReturn(storageTagsWithCorrectTags);",
        "line": 1085,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateDiskOfferingTagsWithPrimaryStorageWithCorrectTagsTestSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "storagePoolTagsDao",
    "variableType": "StoragePoolTagsDao",
    "mockedClass": "StoragePoolTagsDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.configuration",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\configuration\\ConfigurationManagerTest.java",
      "className": "ConfigurationManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nStoragePoolTagsDao storagePoolTagsDao;",
        "line": 199,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(storagePoolTagsDao.getStoragePoolTags(anyLong())).thenReturn(storageTagsNull);",
        "line": 1055,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateDiskOfferingTagsWithPrimaryStorageTagsEqualNullTestThrowException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(storagePoolTagsDao.getStoragePoolTags(anyLong())).thenReturn(storageTagsWithMissingTag);",
        "line": 1070,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateDiskOfferingTagsWithPrimaryStorageMissingTagsTestThrowException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(storagePoolTagsDao.getStoragePoolTags(anyLong())).thenReturn(storageTagsWithCorrectTags);",
        "line": 1085,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateDiskOfferingTagsWithPrimaryStorageWithCorrectTagsTestSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "storagePoolTagsDao",
    "variableType": "StoragePoolTagsDao",
    "mockedClass": "StoragePoolTagsDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.configuration",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\configuration\\ConfigurationManagerTest.java",
      "className": "ConfigurationManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nStoragePoolTagsDao storagePoolTagsDao;",
        "line": 199,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(storagePoolTagsDao.getStoragePoolTags(anyLong())).thenReturn(storageTagsNull);",
        "line": 1055,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateDiskOfferingTagsWithPrimaryStorageTagsEqualNullTestThrowException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(storagePoolTagsDao.getStoragePoolTags(anyLong())).thenReturn(storageTagsWithMissingTag);",
        "line": 1070,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateDiskOfferingTagsWithPrimaryStorageMissingTagsTestThrowException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(storagePoolTagsDao.getStoragePoolTags(anyLong())).thenReturn(storageTagsWithCorrectTags);",
        "line": 1085,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateDiskOfferingTagsWithPrimaryStorageWithCorrectTagsTestSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "storagePoolTagsDao",
    "variableType": "StoragePoolTagsDao",
    "mockedClass": "StoragePoolTagsDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.storage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\storage\\VolumeApiServiceImplTest.java",
      "className": "VolumeApiServiceImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate StoragePoolTagsDao storagePoolTagsDao;",
        "line": 188,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(storagePoolTagsDao.getStoragePoolTags(storagePoolMockId)).thenReturn(new ArrayList<>());",
        "line": 652,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getStoragePoolTagsTestStorageWithoutTags",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(storagePoolTagsDao.getStoragePoolTags(storagePoolMockId)).thenReturn(tags);",
        "line": 670,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getStoragePoolTagsTestStorageWithTags",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
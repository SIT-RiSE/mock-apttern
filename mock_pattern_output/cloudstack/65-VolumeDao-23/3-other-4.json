[
  {
    "variableName": "volumeDao",
    "variableType": "VolumeDao",
    "mockedClass": "VolumeDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Helper Method\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.vmsnapshot",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\storage\\snapshot\\src\\test\\java\\org\\apache\\cloudstack\\storage\\vmsnapshot\\DefaultVMSnapshotStrategyTest.java",
      "className": "DefaultVMSnapshotStrategyTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nVolumeDao volumeDao;",
        "line": 45,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(volumeDao.persist(Mockito.any())).thenAnswer((Answer<VolumeVO>) invocation -> {\r\n    VolumeVO volume = (VolumeVO) invocation.getArguments()[0];\r\n    persistedVolumes.add(volume);\r\n    return volume;\r\n});",
        "line": 59,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "setupVolumeDaoPersistMock",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(volumeDao.findById(volumeId)).thenReturn(volumeVO);",
        "line": 92,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVolumePath",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(volumeDao.findById(volumeId)).thenReturn(volumeVO);",
        "line": 96,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVolumePath",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 26
  },
  {
    "variableName": "volumeDao",
    "variableType": "VolumeDao",
    "mockedClass": "VolumeDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Other Methods\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.datastore.driver",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\storage\\volume\\scaleio\\src\\test\\java\\org\\apache\\cloudstack\\storage\\datastore\\driver\\ScaleIOPrimaryDataStoreDriverTest.java",
      "className": "ScaleIOPrimaryDataStoreDriverTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nVolumeDao volumeDao;",
        "line": 83,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDao.findById(1L)).thenReturn(volumeVO);",
        "line": 260,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "fillSrcVolumeDetails",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDao.findById(2L)).thenReturn(volumeVO);",
        "line": 279,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "fillDestVolumeDetails",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDao.findById(1L)).thenReturn(volume);",
        "line": 311,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateVolumeAfterCopyVolumeLiveMigrate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDao.update(1L, volume)).thenReturn(true);",
        "line": 312,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateVolumeAfterCopyVolumeLiveMigrate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDao.findById(1L)).thenReturn(volume);",
        "line": 328,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateVolumeAfterCopyVolumeOffline",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDao.update(1L, volume)).thenReturn(true);",
        "line": 329,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateVolumeAfterCopyVolumeOffline",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDao.findById(1L)).thenReturn(volume);",
        "line": 365,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "revertBlockCopyVolumeOperationsOnDeleteSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDao.update(1L, volume)).thenReturn(true);",
        "line": 366,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "revertBlockCopyVolumeOperationsOnDeleteSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDao.findById(1L)).thenReturn(volume);",
        "line": 402,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "revertBlockCopyVolumeOperationsOnDeleteFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDao.update(1L, volume)).thenReturn(true);",
        "line": 403,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "revertBlockCopyVolumeOperationsOnDeleteFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 63
  },
  {
    "variableName": "volumeDao",
    "variableType": "VolumeDao",
    "mockedClass": "VolumeDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 @Before\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "com.cloud.resource",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\resource\\ResourceManagerImplTest.java",
      "className": "ResourceManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VolumeDao volumeDao;",
        "line": 105,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDao.findByPoolId(poolId)).thenReturn(rootDisks);",
        "line": 202,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDao.findByPoolId(poolId, Volume.Type.DATADISK)).thenReturn(dataDisks);",
        "line": 203,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(volumeDao, times(rootDisks.size() + dataDisks.size())).updateAndRemoveVolume(any(VolumeVO.class));",
        "line": 556,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDestroyLocalStoragePoolVolumesBothRootDisksAndDataDisks",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDao.findByPoolId(poolId, Volume.Type.DATADISK)).thenReturn(null);",
        "line": 562,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDestroyLocalStoragePoolVolumesOnlyRootDisks",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(volumeDao, times(rootDisks.size())).updateAndRemoveVolume(any(VolumeVO.class));",
        "line": 564,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDestroyLocalStoragePoolVolumesOnlyRootDisks",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDao.findByPoolId(poolId)).thenReturn(null);",
        "line": 569,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDestroyLocalStoragePoolVolumesOnlyDataDisks",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(volumeDao, times(dataDisks.size())).updateAndRemoveVolume(any(VolumeVO.class));",
        "line": 571,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDestroyLocalStoragePoolVolumesOnlyDataDisks",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDao.findByPoolId(poolId)).thenReturn(null);",
        "line": 576,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDestroyLocalStoragePoolVolumesNoDisks",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDao.findByPoolId(poolId, Volume.Type.DATADISK)).thenReturn(null);",
        "line": 577,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDestroyLocalStoragePoolVolumesNoDisks",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(volumeDao, never()).updateAndRemoveVolume(any(VolumeVO.class));",
        "line": 579,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDestroyLocalStoragePoolVolumesNoDisks",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 21
  },
  {
    "variableName": "volumeDaoMock",
    "variableType": "VolumeDao",
    "mockedClass": "VolumeDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 @Before\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "com.cloud.storage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\storage\\VolumeApiServiceImplTest.java",
      "className": "VolumeApiServiceImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate VolumeDao volumeDaoMock;",
        "line": 144,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDaoMock.findById(1L)).thenReturn(volumeOfRunningVm);",
        "line": 286,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDaoMock.findById(2L)).thenReturn(volumeOfStoppedVm);",
        "line": 296,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDaoMock.findById(3L)).thenReturn(volumeOfStoppeHyperVVm);",
        "line": 311,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDaoMock.findById(4L)).thenReturn(managedPoolVolume);",
        "line": 323,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDaoMock.findById(6L)).thenReturn(correctRootVolumeVO);",
        "line": 343,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDaoMock.getHypervisorType(6L)).thenReturn(HypervisorType.XenServer);",
        "line": 344,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "lenient().when(volumeDaoMock.findByInstanceAndDeviceId(4L, 0L)).thenReturn(vols);",
        "line": 364,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDaoMock.findById(8L)).thenReturn(upVolume);",
        "line": 380,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "lenient().when(volumeDaoMock.findById(9L)).thenReturn(volumeOfKvmVm);",
        "line": 389,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "lenient().when(volumeDaoMock.getHypervisorType(9L)).thenReturn(HypervisorType.KVM);",
        "line": 390,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "lenient().when(volumeDaoMock.findById(10L)).thenReturn(dataVolumeVO);",
        "line": 393,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(volumeDaoMock.findByInstanceAndType(anyLong(), any(Volume.Type.class))).thenReturn(new ArrayList<>(10));",
        "line": 632,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testResourceLimitCheckForUploadedVolume",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(volumeDaoMock).remove(volumeMockId);",
        "line": 1045,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "deleteVolumeTestVolumeStateAllocated",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(volumeDaoMock, Mockito.times(0)).remove(volumeMockId);",
        "line": 1071,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "deleteVolumeTestVolumeStateReady",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(volumeDaoMock, Mockito.times(0)).remove(volumeMockId);",
        "line": 1095,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "deleteVolumeTestVolumeStateReadyThrowingInterruptedException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(volumeDaoMock, Mockito.times(0)).remove(volumeMockId);",
        "line": 1115,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "deleteVolumeTestVolumeStateReadyThrowingExecutionException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(volumeDaoMock).persist(volumeVoMock);",
        "line": 1421,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateVolumeAccountTest",
          "methodAnnotations": [
            "@Test",
            "@PrepareForTest"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(volumeDaoMock.findById(1L)).thenReturn(vol);",
        "line": 1604,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStoragePoolCompatibilityAndAllowEncryptedVolumeMigrationForPowerFlexStorage",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(volumeDaoMock.getHypervisorType(1L)).thenReturn(HypervisorType.KVM);",
        "line": 1605,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStoragePoolCompatibilityAndAllowEncryptedVolumeMigrationForPowerFlexStorage",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 21
  }
]
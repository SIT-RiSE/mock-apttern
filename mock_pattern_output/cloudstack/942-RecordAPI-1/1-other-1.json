[
  {
    "variableName": "_recordApi",
    "variableType": "RecordAPI",
    "mockedClass": "RecordAPI",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Other Methods\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "com.globo.globodns.cloudstack.resource",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\globodns\\src\\test\\java\\com\\globo\\globodns\\cloudstack\\resource\\GloboDnsResourceTest.java",
      "className": "GloboDnsResourceTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private RecordAPI _recordApi;",
        "line": 63,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "_recordApi = mock(RecordAPI.class);",
        "line": 91,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_recordApi.listByQuery(eq(domain.getId()), eq(recordName))).thenReturn(recordList);",
        "line": 135,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "generateFakeRecord",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_recordApi.createRecord(eq(domain.getId()), eq(recordName), eq(recordIp), eq(\"A\"))).thenReturn(record);",
        "line": 190,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateRecordAndReverseWithSuccessWhenDomainExistsAndRecordDoesntExistAndOverrideIsTrue",
          "methodAnnotations": [
            "@Test",
            "@SuppressWarnings"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_recordApi.createRecord(eq(reverseDomain.getId()), eq(reverseRecordName), eq(reverseRecordContent), eq(\"PTR\"))).thenReturn(record);",
        "line": 191,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateRecordAndReverseWithSuccessWhenDomainExistsAndRecordDoesntExistAndOverrideIsTrue",
          "methodAnnotations": [
            "@Test",
            "@SuppressWarnings"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_recordApi.createRecord(eq(domain.getId()), eq(recordName), eq(recordIp), eq(\"A\"))).thenReturn(record);",
        "line": 252,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateRecordAndReverseWhenDomainDoesNotExist",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_recordApi.createRecord(eq(reverseDomain.getId()), eq(reverseRecordName), eq(reverseRecordContent), eq(\"PTR\"))).thenReturn(record);",
        "line": 254,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateRecordAndReverseWhenDomainDoesNotExist",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_recordApi.createRecord(eq(domain.getId()), eq(recordName), eq(recordIp), eq(\"A\"))).thenReturn(record);",
        "line": 280,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateRecordAndReverseWhenDomainDoesNotExistAndOverrideIsFalse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_recordApi.createRecord(eq(reverseDomain.getId()), eq(reverseRecordName), eq(reverseRecordContent), eq(\"PTR\"))).thenReturn(record);",
        "line": 282,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateRecordAndReverseWhenDomainDoesNotExistAndOverrideIsFalse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "inOrder.verify(_recordApi, times(1)).updateRecord(eq(record.getId()), eq(domain.getId()), eq(recordName), eq(newRecordIp));",
        "line": 313,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateRecordAndReverseWhenDomainExistsAndOverrideIsTrue",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "inOrder.verify(_recordApi, times(1)).updateRecord(eq(reverseRecord.getId()), eq(reverseDomain.getId()), eq(reverseRecordName), eq(reverseRecordContent));",
        "line": 314,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateRecordAndReverseWhenDomainExistsAndOverrideIsTrue",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(_recordApi, times(1)).removeRecord(eq(record.getId()));",
        "line": 343,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemoveRecordWhenRecordExists",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(_recordApi, times(1)).removeRecord(eq(reverseRecord.getId()));",
        "line": 344,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemoveRecordWhenRecordExists",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(_recordApi, times(1)).removeRecord(eq(record.getId()));",
        "line": 364,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemoveRecordWithSuccessAndReverseRecordNotRemovedWhenReverseRecordExistsWithDifferentValueAndOverrideIsFalse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(_recordApi, never()).removeRecord(eq(reverseRecord.getId()));",
        "line": 365,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemoveRecordWithSuccessAndReverseRecordNotRemovedWhenReverseRecordExistsWithDifferentValueAndOverrideIsFalse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(_recordApi, never()).removeRecord(eq(record.getId()));",
        "line": 386,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemoveReverseRecordButNotRemoveRecordWhenRecordExistsWithDifferentValueAndOverrideIsFalse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(_recordApi, times(1)).removeRecord(eq(reverseRecord.getId()));",
        "line": 387,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemoveReverseRecordButNotRemoveRecordWhenRecordExistsWithDifferentValueAndOverrideIsFalse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_recordApi.listAll(domain.getId())).thenReturn(Arrays.asList(record));",
        "line": 403,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemoveDomainWithSuccessButDomainKeptWhenDomainExistsAndThereAreRecordsAndOverrideIsFalse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_recordApi.listAll(domain.getId())).thenReturn(recordList);",
        "line": 425,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemoveDomainWithSuccessWhenDomainExistsAndThereAreOnlyNSRecordsAndOverrideIsFalse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_recordApi.listAll(domain.getId())).thenReturn(recordList);",
        "line": 447,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemoveDomainWithSuccessWhenDomainExistsAndThereAreRecordsAndOverrideIsTrue",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 42
  }
]
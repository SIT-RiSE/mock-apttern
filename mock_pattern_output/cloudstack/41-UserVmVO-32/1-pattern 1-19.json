[
  {
    "variableName": "userVmVO",
    "variableType": "UserVmVO",
    "mockedClass": "UserVmVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.vmsnapshot",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\storage\\snapshot\\src\\test\\java\\org\\apache\\cloudstack\\storage\\vmsnapshot\\VMSnapshotStrategyKVMTest.java",
      "className": "VMSnapshotStrategyKVMTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "UserVmVO userVmVO = Mockito.mock(UserVmVO.class);",
        "line": 195,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRevertVMsnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(userVmVO.getGuestOSId()).thenReturn(guestOsId);",
        "line": 196,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRevertVMsnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "userVmVO",
    "variableType": "UserVmVO",
    "mockedClass": "UserVmVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.vmsnapshot",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\storage\\snapshot\\src\\test\\java\\org\\apache\\cloudstack\\storage\\vmsnapshot\\VMSnapshotStrategyKVMTest.java",
      "className": "VMSnapshotStrategyKVMTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "UserVmVO userVmVO = Mockito.mock(UserVmVO.class);",
        "line": 273,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteVMsnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(userVmVO.getGuestOSId()).thenReturn(guestOsId);",
        "line": 274,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteVMsnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "userVmVO",
    "variableType": "UserVmVO",
    "mockedClass": "UserVmVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.vmsnapshot",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\storage\\snapshot\\src\\test\\java\\org\\apache\\cloudstack\\storage\\vmsnapshot\\VMSnapshotStrategyTest.java",
      "className": "VMSnapshotStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "UserVmVO userVmVO = Mockito.mock(UserVmVO.class);",
        "line": 115,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVMSnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(userVmVO.getGuestOSId()).thenReturn(guestOsId);",
        "line": 116,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVMSnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "userVmVO",
    "variableType": "UserVmVO",
    "mockedClass": "UserVmVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.vmsnapshot",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\storage\\snapshot\\src\\test\\java\\org\\apache\\cloudstack\\storage\\vmsnapshot\\VMSnapshotStrategyTest.java",
      "className": "VMSnapshotStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "UserVmVO userVmVO = Mockito.mock(UserVmVO.class);",
        "line": 159,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRevertSnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(userVmVO.getGuestOSId()).thenReturn(guestOsId);",
        "line": 160,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRevertSnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "userVmVO",
    "variableType": "UserVmVO",
    "mockedClass": "UserVmVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.vmsnapshot",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\storage\\snapshot\\src\\test\\java\\org\\apache\\cloudstack\\storage\\vmsnapshot\\VMSnapshotStrategyTest.java",
      "className": "VMSnapshotStrategyTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "UserVmVO userVmVO = Mockito.mock(UserVmVO.class);",
        "line": 207,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteVMSnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(userVmVO.getGuestOSId()).thenReturn(guestOsId);",
        "line": 208,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteVMSnapshot",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "userVm",
    "variableType": "UserVmVO",
    "mockedClass": "UserVmVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.implicitplanner",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\deployment-planners\\implicit-dedication\\src\\test\\java\\org\\apache\\cloudstack\\implicitplanner\\ImplicitPlannerTest.java",
      "className": "ImplicitPlannerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "UserVmVO userVm = mock(UserVmVO.class);",
        "line": 331,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(userVm.getAccountId()).thenReturn(accountId);",
        "line": 341,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForTest",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm2",
    "variableType": "UserVmVO",
    "mockedClass": "UserVmVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.implicitplanner",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\deployment-planners\\implicit-dedication\\src\\test\\java\\org\\apache\\cloudstack\\implicitplanner\\ImplicitPlannerTest.java",
      "className": "ImplicitPlannerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "UserVmVO vm2 = mock(UserVmVO.class);",
        "line": 412,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForImplicitPlannerTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm2.getAccountId()).thenReturn(accountId);",
        "line": 413,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForImplicitPlannerTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm2.getServiceOfferingId()).thenReturn(offeringIdForVmsOfThisAccount);",
        "line": 414,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForImplicitPlannerTest",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm1",
    "variableType": "UserVmVO",
    "mockedClass": "UserVmVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.implicitplanner",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\deployment-planners\\implicit-dedication\\src\\test\\java\\org\\apache\\cloudstack\\implicitplanner\\ImplicitPlannerTest.java",
      "className": "ImplicitPlannerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "UserVmVO vm1 = mock(UserVmVO.class);",
        "line": 409,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForImplicitPlannerTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm1.getAccountId()).thenReturn(accountId);",
        "line": 410,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForImplicitPlannerTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm1.getServiceOfferingId()).thenReturn(offeringIdForVmsOfThisAccount);",
        "line": 411,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForImplicitPlannerTest",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm3",
    "variableType": "UserVmVO",
    "mockedClass": "UserVmVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.implicitplanner",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\deployment-planners\\implicit-dedication\\src\\test\\java\\org\\apache\\cloudstack\\implicitplanner\\ImplicitPlannerTest.java",
      "className": "ImplicitPlannerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// Vm from different account\r\nUserVmVO vm3 = mock(UserVmVO.class);",
        "line": 416,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForImplicitPlannerTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm3.getAccountId()).thenReturn(201L);",
        "line": 417,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForImplicitPlannerTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm3.getServiceOfferingId()).thenReturn(offeringIdForVmsOfOtherAccount);",
        "line": 418,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForImplicitPlannerTest",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "UserVmVO",
    "mockedClass": "UserVmVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.server",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\server\\ManagementServerImplTest.java",
      "className": "ManagementServerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "UserVmVO vm = Mockito.mock(UserVmVO.class);",
        "line": 557,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "mockFilterUefiHostsTestVm",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(vm.getId()).thenReturn(1L);",
        "line": 558,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "mockFilterUefiHostsTestVm",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "UserVmVO",
    "mockedClass": "UserVmVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.storage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\storage\\VolumeApiServiceImplTest.java",
      "className": "VolumeApiServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "UserVmVO vm = Mockito.mock(UserVmVO.class);",
        "line": 617,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testResourceLimitCheckForUploadedVolume",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getType()).thenReturn(VirtualMachine.Type.User);",
        "line": 627,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testResourceLimitCheckForUploadedVolume",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getState()).thenReturn(State.Running);",
        "line": 628,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testResourceLimitCheckForUploadedVolume",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getDataCenterId()).thenReturn(34L);",
        "line": 629,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testResourceLimitCheckForUploadedVolume",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getBackupOfferingId()).thenReturn(null);",
        "line": 630,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testResourceLimitCheckForUploadedVolume",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getBackupVolumeList()).thenReturn(Collections.emptyList());",
        "line": 631,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testResourceLimitCheckForUploadedVolume",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "UserVmVO",
    "mockedClass": "UserVmVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.storage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\storage\\VolumeApiServiceImplTest.java",
      "className": "VolumeApiServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "UserVmVO vm = Mockito.mock(UserVmVO.class);",
        "line": 688,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateConditionsToReplaceDiskOfferingOfVolumeTestRootVolume",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getServiceOfferingId()).thenReturn(1L);",
        "line": 690,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateConditionsToReplaceDiskOfferingOfVolumeTestRootVolume",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "UserVmVO",
    "mockedClass": "UserVmVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.storage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\storage\\VolumeApiServiceImplTest.java",
      "className": "VolumeApiServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "UserVmVO vm = Mockito.mock(UserVmVO.class);",
        "line": 702,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateConditionsToReplaceDiskOfferingOfVolumeTestRootVolumeWithDiskOfferingStrictnessTrue",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getServiceOfferingId()).thenReturn(1L);",
        "line": 704,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateConditionsToReplaceDiskOfferingOfVolumeTestRootVolumeWithDiskOfferingStrictnessTrue",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "UserVmVO",
    "mockedClass": "UserVmVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.storage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\storage\\VolumeApiServiceImplTest.java",
      "className": "VolumeApiServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "UserVmVO vm = Mockito.mock(UserVmVO.class);",
        "line": 1228,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateIfVmHaveBackupsTestExceptionWhenTryToDetachVolumeFromVMWhichBackupOffering",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getBackupOfferingId()).thenReturn(1l);",
        "line": 1229,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateIfVmHaveBackupsTestExceptionWhenTryToDetachVolumeFromVMWhichBackupOffering",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "UserVmVO",
    "mockedClass": "UserVmVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.storage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\storage\\VolumeApiServiceImplTest.java",
      "className": "VolumeApiServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "UserVmVO vm = Mockito.mock(UserVmVO.class);",
        "line": 1239,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateIfVmHaveBackupsTestExceptionWhenTryToAttachVolumeFromVMWhichBackupOffering",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getBackupOfferingId()).thenReturn(1l);",
        "line": 1240,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateIfVmHaveBackupsTestExceptionWhenTryToAttachVolumeFromVMWhichBackupOffering",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "UserVmVO",
    "mockedClass": "UserVmVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.storage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\storage\\VolumeApiServiceImplTest.java",
      "className": "VolumeApiServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "UserVmVO vm = Mockito.mock(UserVmVO.class);",
        "line": 1249,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateIfVmHaveBackupsTestSuccessWhenVMDontHaveBackupOffering",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getBackupOfferingId()).thenReturn(null);",
        "line": 1250,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateIfVmHaveBackupsTestSuccessWhenVMDontHaveBackupOffering",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "userVm",
    "variableType": "UserVmVO",
    "mockedClass": "UserVmVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\vm\\FirstFitPlannerTest.java",
      "className": "FirstFitPlannerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "UserVmVO userVm = mock(UserVmVO.class);",
        "line": 264,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(userVm.getAccountId()).thenReturn(accountId);",
        "line": 274,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForTest",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "UserVmVO",
    "mockedClass": "UserVmVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\vm\\UserVmManagerTest.java",
      "className": "UserVmManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "UserVmVO vm = Mockito.mock(UserVmVO.class);",
        "line": 239,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testValidateRootDiskResize",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getDetails()).thenReturn(vmDetals);",
        "line": 245,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testValidateRootDiskResize",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "userVmVO",
    "variableType": "UserVmVO",
    "mockedClass": "UserVmVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\org\\apache\\cloudstack\\vm\\UnmanagedVMsManagerImplTest.java",
      "className": "UnmanagedVMsManagerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "UserVmVO userVmVO = mock(UserVmVO.class);",
        "line": 430,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "unmanageVMInstanceExistingISOAttachedTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(userVmVO.getIsoId()).thenReturn(3L);",
        "line": 432,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "unmanageVMInstanceExistingISOAttachedTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
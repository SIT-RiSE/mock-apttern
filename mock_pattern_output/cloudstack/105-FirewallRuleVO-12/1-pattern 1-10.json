[
  {
    "variableName": "firewallRuleVO",
    "variableType": "FirewallRuleVO",
    "mockedClass": "FirewallRuleVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenElementTest.java",
      "className": "TungstenElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "FirewallRuleVO firewallRuleVO = mock(FirewallRuleVO.class);",
        "line": 917,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesWithAddEgressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(firewallRuleVO.getState()).thenReturn(FirewallRule.State.Add);",
        "line": 922,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesWithAddEgressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(firewallRuleVO.getSourceCidrList()).thenReturn(List.of(\"192.168.100.0/24\"));",
        "line": 923,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesWithAddEgressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(firewallRuleVO.getProtocol()).thenReturn(NetUtils.ALL_PROTO);",
        "line": 924,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesWithAddEgressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(firewallRuleVO.getPurpose()).thenReturn(FirewallRule.Purpose.Firewall);",
        "line": 926,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesWithAddEgressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(firewallRuleVO.getTrafficType()).thenReturn(FirewallRule.TrafficType.Egress);",
        "line": 927,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesWithAddEgressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "firewallRuleVO",
    "variableType": "FirewallRuleVO",
    "mockedClass": "FirewallRuleVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenElementTest.java",
      "className": "TungstenElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "FirewallRuleVO firewallRuleVO = mock(FirewallRuleVO.class);",
        "line": 939,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesWithAddIngressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(firewallRuleVO.getState()).thenReturn(FirewallRule.State.Add);",
        "line": 946,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesWithAddIngressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(firewallRuleVO.getSourceCidrList()).thenReturn(List.of(\"192.168.100.0/24\"));",
        "line": 947,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesWithAddIngressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(firewallRuleVO.getProtocol()).thenReturn(NetUtils.ALL_PROTO);",
        "line": 948,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesWithAddIngressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(firewallRuleVO.getPurpose()).thenReturn(FirewallRule.Purpose.Firewall);",
        "line": 952,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesWithAddIngressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(firewallRuleVO.getTrafficType()).thenReturn(FirewallRule.TrafficType.Ingress);",
        "line": 953,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesWithAddIngressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "firewallRuleVO",
    "variableType": "FirewallRuleVO",
    "mockedClass": "FirewallRuleVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenElementTest.java",
      "className": "TungstenElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "FirewallRuleVO firewallRuleVO = mock(FirewallRuleVO.class);",
        "line": 965,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesWithRevokeRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(firewallRuleVO.getState()).thenReturn(FirewallRule.State.Revoke);",
        "line": 969,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesWithRevokeRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(firewallRuleVO.getPurpose()).thenReturn(FirewallRule.Purpose.Firewall);",
        "line": 971,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesWithRevokeRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(firewallRuleVO.getTrafficType()).thenReturn(FirewallRule.TrafficType.Ingress);",
        "line": 972,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesWithRevokeRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "rule4",
    "variableType": "FirewallRuleVO",
    "mockedClass": "FirewallRuleVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.firewall",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\firewall\\FirewallManagerTest.java",
      "className": "FirewallManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "FirewallRuleVO rule4 = spy(new FirewallRuleVO(\"rule4\", 3L, 10, 20, \"TCP\", 1, 2, 1, Purpose.Firewall, sString, dString1, null, null, null, FirewallRule.TrafficType.Egress));",
        "line": 183,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDetectRulesConflict",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(rule4.getId()).thenReturn(4L);",
        "line": 197,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDetectRulesConflict",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "rule1",
    "variableType": "FirewallRuleVO",
    "mockedClass": "FirewallRuleVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.firewall",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\firewall\\FirewallManagerTest.java",
      "className": "FirewallManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "FirewallRuleVO rule1 = spy(new FirewallRuleVO(\"rule1\", 3, 500, \"UDP\", 1, 2, 1, Purpose.Vpn, null, null, null, null));",
        "line": 175,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDetectRulesConflict",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(rule1.getId()).thenReturn(1L);",
        "line": 194,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDetectRulesConflict",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "rule3",
    "variableType": "FirewallRuleVO",
    "mockedClass": "FirewallRuleVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.firewall",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\firewall\\FirewallManagerTest.java",
      "className": "FirewallManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "FirewallRuleVO rule3 = spy(new FirewallRuleVO(\"rule3\", 3, 4500, \"UDP\", 1, 2, 1, Purpose.Vpn, null, null, null, null));",
        "line": 177,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDetectRulesConflict",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(rule3.getId()).thenReturn(3L);",
        "line": 196,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDetectRulesConflict",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "rule2",
    "variableType": "FirewallRuleVO",
    "mockedClass": "FirewallRuleVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.firewall",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\firewall\\FirewallManagerTest.java",
      "className": "FirewallManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "FirewallRuleVO rule2 = spy(new FirewallRuleVO(\"rule2\", 3, 1701, \"UDP\", 1, 2, 1, Purpose.Vpn, null, null, null, null));",
        "line": 176,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDetectRulesConflict",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(rule2.getId()).thenReturn(2L);",
        "line": 195,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDetectRulesConflict",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "ingressFirewallRule",
    "variableType": "FirewallRuleVO",
    "mockedClass": "FirewallRuleVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\Ipv6ServiceImplTest.java",
      "className": "Ipv6ServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "FirewallRuleVO ingressFirewallRule = Mockito.mock(FirewallRuleVO.class);",
        "line": 641,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateIpv6FirewallRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(ingressFirewallRule.getTrafficType()).thenReturn(FirewallRule.TrafficType.Ingress);",
        "line": 642,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateIpv6FirewallRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "ingressFirewallRule",
    "variableType": "FirewallRuleVO",
    "mockedClass": "FirewallRuleVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\Ipv6ServiceImplTest.java",
      "className": "Ipv6ServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "FirewallRuleVO ingressFirewallRule = Mockito.mock(FirewallRuleVO.class);",
        "line": 659,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteIpv6FirewallRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(ingressFirewallRule.getTrafficType()).thenReturn(FirewallRule.TrafficType.Ingress);",
        "line": 660,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteIpv6FirewallRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "ingressFirewallRule",
    "variableType": "FirewallRuleVO",
    "mockedClass": "FirewallRuleVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\Ipv6ServiceImplTest.java",
      "className": "Ipv6ServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "FirewallRuleVO ingressFirewallRule = Mockito.mock(FirewallRuleVO.class);",
        "line": 676,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetIpv6FirewallRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(ingressFirewallRule.getUuid()).thenReturn(uuid);",
        "line": 677,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetIpv6FirewallRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
[
  {
    "variableName": "libvirtComputingResource",
    "variableType": "LibvirtComputingResource",
    "mockedClass": "LibvirtComputingResource",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.kvm.resource.wrapper",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\kvm\\src\\test\\java\\com\\cloud\\hypervisor\\kvm\\resource\\wrapper\\LibvirtReplugNicCommandWrapperTest.java",
      "className": "LibvirtReplugNicCommandWrapperTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate LibvirtComputingResource libvirtComputingResource;",
        "line": 67,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(libvirtComputingResource.getInterfaces(conn, \"\")).thenReturn(ifaces);",
        "line": 295,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReplugNic",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "resource",
    "variableType": "LibvirtComputingResource",
    "mockedClass": "LibvirtComputingResource",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.kvm.storage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\kvm\\src\\test\\java\\com\\cloud\\hypervisor\\kvm\\storage\\KVMStorageProcessorTest.java",
      "className": "KVMStorageProcessorTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nLibvirtComputingResource resource;",
        "line": 70,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(resource.getDirectDownloadTemporaryDownloadPath()).thenReturn(directDownloadTemporaryPath);",
        "line": 118,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsEnoughSpaceForDownloadTemplateOnTemporaryLocationAssumeEnoughSpaceWhenNotProvided",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(resource.getDirectDownloadTemporaryDownloadPath()).thenReturn(directDownloadTemporaryPath);",
        "line": 126,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsEnoughSpaceForDownloadTemplateOnTemporaryLocationNotEnoughSpace",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(resource.getDirectDownloadTemporaryDownloadPath()).thenReturn(directDownloadTemporaryPath);",
        "line": 136,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsEnoughSpaceForDownloadTemplateOnTemporaryLocationEnoughSpace",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(resource.getDirectDownloadTemporaryDownloadPath()).thenReturn(directDownloadTemporaryPath);",
        "line": 146,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsEnoughSpaceForDownloadTemplateOnTemporaryLocationNotExistingLocation",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
[
  {
    "variableName": "userVoMock",
    "variableType": "UserVO",
    "mockedClass": "UserVO",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "com.cloud.user",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\user\\AccountManagerImplTest.java",
      "className": "AccountManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate UserVO userVoMock;",
        "line": 87,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "inOrder.verify(userVoMock, Mockito.times(numberOfExpectedCallsForSetEmailAndSetTimeZone)).setEmail(Mockito.anyString());",
        "line": 341,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "prepareMockAndExecuteUpdateUserTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "inOrder.verify(userVoMock, Mockito.times(numberOfExpectedCallsForSetEmailAndSetTimeZone)).setTimezone(Mockito.anyString());",
        "line": 342,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "prepareMockAndExecuteUpdateUserTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(userVoMock).setApiKey(apiKey);",
        "line": 421,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateAndUpdatApiAndSecretKeyIfNeededTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(userVoMock).setSecretKey(secretKey);",
        "line": 422,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateAndUpdatApiAndSecretKeyIfNeededTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(userVoMock, Mockito.times(0)).setFirstname(Mockito.anyString());",
        "line": 477,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateAndUpdateFirstNameIfNeededTestFirstNameNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(userVoMock).setFirstname(firstname);",
        "line": 487,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateAndUpdateFirstNameIfNeededTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(userVoMock, Mockito.times(0)).setLastname(Mockito.anyString());",
        "line": 503,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateAndUpdateLastNameIfNeededTestLastNameNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(userVoMock).setLastname(lastName);",
        "line": 513,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateAndUpdateLastNameIfNeededTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(userVoMock, Mockito.times(0)).setUsername(Mockito.anyString());",
        "line": 522,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateAndUpdateUsernameIfNeededTestNullUsername",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(userVoMock).setUsername(userName);",
        "line": 600,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateAndUpdateUsernameIfNeededTestDuplicatedUserButInDifferentDomains",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(userVoMock).setUsername(userName);",
        "line": 620,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateAndUpdateUsernameIfNeededTestNoDuplicatedUserNames",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(userVoMock, Mockito.times(0)).setPassword(Mockito.anyString());",
        "line": 627,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "valiateUserPasswordAndUpdateIfNeededTestPasswordNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(userVoMock, Mockito.times(1)).setPassword(expectedUserPasswordAfterEncoded);",
        "line": 683,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateUserPasswordAndUpdateIfNeededTestRootAdminUpdatingUserPassword",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(userVoMock, Mockito.times(1)).setPassword(expectedUserPasswordAfterEncoded);",
        "line": 705,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateUserPasswordAndUpdateIfNeededTestDomainAdminUpdatingUserPassword",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(userVoMock, Mockito.times(1)).setPassword(expectedUserPasswordAfterEncoded);",
        "line": 728,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateUserPasswordAndUpdateIfNeededTestUserUpdatingHisPassword",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 9
  }
]
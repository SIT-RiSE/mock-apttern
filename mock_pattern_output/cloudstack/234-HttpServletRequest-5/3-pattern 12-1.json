[
  {
    "variableName": "request",
    "variableType": "HttpServletRequest",
    "mockedClass": "HttpServletRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 @Before\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.api",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\api\\ApiServletTest.java",
      "className": "ApiServletTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nHttpServletRequest request;",
        "line": 69,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(request.getRemoteAddr()).thenReturn(\"127.0.0.1\");",
        "line": 116,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(request.getQueryString()).thenReturn(\"foo=12345&bar=blah&baz=&param=param\");",
        "line": 160,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "utf8Fixup",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(request.getQueryString()).thenReturn(\"&&=a&=&&a&a=a=a=a\");",
        "line": 170,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "utf8FixupNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(request.getQueryString()).thenReturn(\"&&=a&=&&a&a=a=a=a\");",
        "line": 176,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "utf8FixupStrangeInputs",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(request.getQueryString()).thenReturn(URLEncoder.encode(\"\u9632\u6c34\u955c\u94bb\u5b54\u673a\", \"UTF-8\") + \"=\" + URLEncoder.encode(\"\u00e1rv\u00edzt\u0171r\u0151t\u00fck\u00f6rf\u00far\u00f3\", \"UTF-8\"));",
        "line": 184,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "utf8FixupUtf",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(request.getMethod()).thenReturn(\"GET\");",
        "line": 195,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "processRequestInContextUnauthorizedGET",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(request.getMethod()).thenReturn(\"GET\");",
        "line": 209,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "processRequestInContextAuthorizedGet",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(request.getMethod()).thenReturn(\"GET\");",
        "line": 223,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "processRequestInContextLogout",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(request.getSession(Mockito.anyBoolean())).thenReturn(session);",
        "line": 224,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "processRequestInContextLogout",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(request.getParameterMap()).thenReturn(params);",
        "line": 230,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "processRequestInContextLogout",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(request.getMethod()).thenReturn(\"GET\");",
        "line": 246,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "processRequestInContextLogin",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(request.getSession(Mockito.anyBoolean())).thenReturn(session);",
        "line": 247,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "processRequestInContextLogin",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(request.getParameterMap()).thenReturn(params);",
        "line": 255,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "processRequestInContextLogin",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(request.getHeader(Mockito.eq(\"X-Forwarded-For\"))).thenReturn(\"192.168.1.1\");",
        "line": 269,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getClientAddressWithXForwardedFor",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(request.getHeader(Mockito.eq(\"HTTP_X_FORWARDED_FOR\"))).thenReturn(\"192.168.1.1\");",
        "line": 278,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getClientAddressWithHttpXForwardedFor",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(request.getHeader(Mockito.eq(\"HTTP_CLIENT_IP\"))).thenReturn(\"192.168.1.1\");",
        "line": 295,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getClientAddressWithHttpClientIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(request.getRemoteAddr()).thenReturn(\"127.0.0.1\");",
        "line": 301,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getClientAddressDefault",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 12
  }
]
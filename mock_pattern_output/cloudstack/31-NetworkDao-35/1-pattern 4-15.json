[
  {
    "variableName": "netdao",
    "variableType": "NetworkDao",
    "mockedClass": "NetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\guru\\NiciraNvpGuestNetworkGuruTest.java",
      "className": "NiciraNvpGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "NetworkDao netdao = mock(NetworkDao.class);",
        "line": 86,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(netdao.findById(NETWORK_ID)).thenReturn(network);",
        "line": 443,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testShutdown",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "networkDao",
    "variableType": "NetworkDao",
    "mockedClass": "NetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenElementTest.java",
      "className": "TungstenElementTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nNetworkDao networkDao;",
        "line": 174,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDao.listByZoneSecurityGroup(anyLong())).thenReturn(List.of(network));",
        "line": 890,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "processHostAboutToBeRemovedWithSecurityGroupTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "networkDao",
    "variableType": "NetworkDao",
    "mockedClass": "NetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenServiceImplTest.java",
      "className": "TungstenServiceImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nNetworkDao networkDao;",
        "line": 230,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDao.findById(anyLong())).thenReturn(networkVO);",
        "line": 991,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "listTungstenPolicyTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDao.findByUuid(anyString())).thenReturn(networkVO);",
        "line": 1729,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "addNetworkGatewayToLogicalRouterTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDao.findByUuid(anyString())).thenReturn(networkVO);",
        "line": 1769,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeNetworkGatewayFromLogicalRouterTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "netdao",
    "variableType": "NetworkDao",
    "mockedClass": "NetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\vxlan\\src\\test\\java\\com\\cloud\\network\\guru\\VxlanGuestNetworkGuruTest.java",
      "className": "VxlanGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "NetworkDao netdao = mock(NetworkDao.class);",
        "line": 73,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(netdao.findById(42L)).thenReturn(network);",
        "line": 253,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testShutdown",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "networkDaoMock",
    "variableType": "NetworkDao",
    "mockedClass": "NetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.consoleproxy",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\consoleproxy\\ConsoleProxyManagerTest.java",
      "className": "ConsoleProxyManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nNetworkDao networkDaoMock;",
        "line": 66,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDaoMock.listByZoneAndTrafficType(anyLong(), eq(TrafficType.Public))).thenReturn(Collections.singletonList(network));",
        "line": 135,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedNonSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDaoMock.listByZoneAndTrafficType(anyLong(), not(eq(TrafficType.Public)))).thenReturn(Collections.singletonList(badNetwork));",
        "line": 138,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedNonSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDaoMock.listByZoneSecurityGroup(anyLong())).thenReturn(Collections.singletonList(badNetwork));",
        "line": 141,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedNonSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDaoMock.listByZoneAndTrafficType(anyLong(), any(TrafficType.class))).thenReturn(Collections.singletonList(badNetwork));",
        "line": 161,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDaoMock.listByZoneSecurityGroup(anyLong())).thenReturn(Collections.singletonList(network));",
        "line": 164,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDaoMock.listByZoneAndTrafficType(anyLong(), eq(TrafficType.Guest))).thenReturn(Collections.singletonList(network));",
        "line": 183,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicNonSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDaoMock.listByZoneAndTrafficType(anyLong(), not(eq(TrafficType.Guest)))).thenReturn(Collections.singletonList(badNetwork));",
        "line": 186,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicNonSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDaoMock.listByZoneAndTrafficType(anyLong(), eq(TrafficType.Guest))).thenReturn(Collections.singletonList(network));",
        "line": 205,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDaoMock.listByZoneAndTrafficType(anyLong(), not(eq(TrafficType.Guest)))).thenReturn(Collections.singletonList(badNetwork));",
        "line": 208,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDaoMock.listByZoneAndTrafficType(anyLong(), eq(TrafficType.Guest))).thenReturn(Collections.singletonList(network));",
        "line": 229,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicSGWrongZoneType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDaoMock.listByZoneAndTrafficType(anyLong(), not(eq(TrafficType.Guest)))).thenReturn(Collections.singletonList(badNetwork));",
        "line": 232,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicSGWrongZoneType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDaoMock.listByZoneAndTrafficType(anyLong(), any(TrafficType.class))).thenReturn(Collections.singletonList(badNetwork));",
        "line": 248,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedWrongZoneType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDaoMock.listByZoneSecurityGroup(anyLong())).thenReturn(Collections.singletonList(network));",
        "line": 251,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedWrongZoneType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "networkDao",
    "variableType": "NetworkDao",
    "mockedClass": "NetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.as",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\as\\AutoScaleManagerImplTest.java",
      "className": "AutoScaleManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nNetworkDao networkDao;",
        "line": 228,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDao.findById(networkId)).thenReturn(networkMock);",
        "line": 973,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateAutoScaleVmGroup",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDao.findById(networkId)).thenReturn(networkMock);",
        "line": 1064,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateAutoScaleVmGroup",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDao.findByUuid(networkUuid)).thenReturn(networkMock);",
        "line": 1401,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getVmNetworkIds1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDao.findByUuid(networkUuid)).thenReturn(networkMock);",
        "line": 1414,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getVmNetworkIds2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDao.findById(networkId)).thenReturn(networkMock);",
        "line": 1892,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDao.findById(networkId)).thenReturn(null);",
        "line": 1910,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getNetworkFail2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "networkDao",
    "variableType": "NetworkDao",
    "mockedClass": "NetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\IpAddressManagerTest.java",
      "className": "IpAddressManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nNetworkDao networkDao;",
        "line": 62,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.lenient().when(networkDao.findById(1L)).thenReturn(networkImplemented);",
        "line": 169,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "assertSourceNatImplementedNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.lenient().when(networkDao.findById(2L)).thenReturn(networkAllocated);",
        "line": 188,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "assertSourceNatAllocatedNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.lenient().when(networkDao.findById(3L)).thenReturn(networkNat);",
        "line": 208,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "assertExistingSourceNatAllocatedNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "_networkDao",
    "variableType": "NetworkDao",
    "mockedClass": "NetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.lb",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\lb\\LoadBalancingRulesManagerImplTest.java",
      "className": "LoadBalancingRulesManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nNetworkDao _networkDao;",
        "line": 45,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.findById(Mockito.anyLong())).thenReturn(networkMock);",
        "line": 86,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetLoadBalancerServiceProvider",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.findById(Mockito.any())).thenReturn(networkMock);",
        "line": 99,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetLoadBalancerServiceProviderFail",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "netDao",
    "variableType": "NetworkDao",
    "mockedClass": "NetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.lb",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\lb\\UpdateLoadBalancerTest.java",
      "className": "UpdateLoadBalancerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private NetworkDao netDao = Mockito.mock(NetworkDao.class);",
        "line": 65,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(netDao.findById(anyLong())).thenReturn(Mockito.mock(NetworkVO.class));",
        "line": 100,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testValidateRuleBeforeUpdateLB",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(netDao.findById(anyLong())).thenReturn(Mockito.mock(NetworkVO.class));",
        "line": 118,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRuleNotValidated",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "networkDao",
    "variableType": "NetworkDao",
    "mockedClass": "NetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\NetworkModelTest.java",
      "className": "NetworkModelTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate NetworkDao networkDao;",
        "line": 106,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDao.listBy(caller.getId(), network.getId())).thenReturn(List.of(network));",
        "line": 308,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckNetworkPermissions",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDao.listBy(caller.getId(), network.getId())).thenReturn(List.of(network));",
        "line": 323,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckNetworkPermissionsForAdmin",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDao.listBy(caller.getId(), network.getId())).thenReturn(null);",
        "line": 358,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckNetworkPermissionsNoPermission",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDao.findById(network.getId())).thenReturn(network);",
        "line": 374,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckNetworkPermissionsSharedNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDao.findById(network.getId())).thenReturn(network);",
        "line": 396,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckNetworkPermissionsSharedNetworkNoSubDomainAccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(networkDao.findById(network.getId())).thenReturn(network);",
        "line": 416,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckNetworkPermissionsSharedNetworkNotSubDomain",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "networkDao",
    "variableType": "NetworkDao",
    "mockedClass": "NetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\NetworkServiceImplTest.java",
      "className": "NetworkServiceImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nNetworkDao networkDao;",
        "line": 140,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkDao.findById(anyLong())).thenReturn(networkVO);",
        "line": 451,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateSharedNetworkMtus",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "nwDao",
    "variableType": "NetworkDao",
    "mockedClass": "NetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.router",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\router\\RouterControlHelperTest.java",
      "className": "RouterControlHelperTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprotected NetworkDao nwDao;",
        "line": 54,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(this.nwDao.findById(NW_ID_1)).thenReturn(nw1);",
        "line": 86,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetRouterControlIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(this.nwDao.findById(NW_ID_2)).thenReturn(nw2);",
        "line": 87,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetRouterControlIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "lenient().when(this.nwDao.findById(NW_ID_3)).thenReturn(nw3);",
        "line": 88,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetRouterControlIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(this.nwDao.findById(NW_ID_1)).thenReturn(nw1);",
        "line": 109,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetRouterControlIpWithRouterIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "networkDao",
    "variableType": "NetworkDao",
    "mockedClass": "NetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.vpc",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\vpc\\VpcManagerImplTest.java",
      "className": "VpcManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nNetworkDao networkDao;",
        "line": 128,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkDao.countVpcNetworks(anyLong())).thenReturn(1L);",
        "line": 334,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateVpcNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkDao.listByVpc(vpcId)).thenReturn(List.of(Mockito.mock(NetworkVO.class)));",
        "line": 397,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVpcNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkDao.update(anyLong(), any())).thenReturn(true);",
        "line": 398,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVpcNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "_networkDao",
    "variableType": "NetworkDao",
    "mockedClass": "NetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\vm\\UserVmManagerTest.java",
      "className": "UserVmManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate NetworkDao _networkDao;",
        "line": 203,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.findById(anyLong())).thenReturn(_networkMock);",
        "line": 556,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVmNicIpSuccess1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.findById(anyLong())).thenReturn(_networkMock);",
        "line": 604,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVmNicIpSuccess2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.findById(anyLong())).thenReturn(_networkMock);",
        "line": 661,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVmNicIpFailure1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.findById(anyLong())).thenReturn(_networkMock);",
        "line": 699,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVmNicIpFailure2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.findById(anyLong())).thenReturn(_networkMock);",
        "line": 746,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVmNicIpFailure3",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.findById(2L)).thenReturn(_networkMock);",
        "line": 783,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testApplyUserDataInNetworkWithoutUserDataSupport",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.findById(2L)).thenReturn(_networkMock);",
        "line": 796,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testApplyUserDataInNetworkWithoutElement",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.findById(2L)).thenReturn(_networkMock);",
        "line": 813,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testApplyUserDataSuccessful",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "_networkDao",
    "variableType": "NetworkDao",
    "mockedClass": "NetworkDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.secondarystorage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\services\\secondary-storage\\controller\\src\\test\\java\\org\\apache\\cloudstack\\secondarystorage\\SecondaryStorageManagerTest.java",
      "className": "SecondaryStorageManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nNetworkDao _networkDao;",
        "line": 55,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.listByZoneAndTrafficType(anyLong(), eq(TrafficType.Public))).thenReturn(Collections.singletonList(network));",
        "line": 76,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedNonSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.listByZoneAndTrafficType(anyLong(), not(eq(TrafficType.Public)))).thenReturn(Collections.singletonList(badNetwork));",
        "line": 79,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedNonSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.listByZoneSecurityGroup(anyLong())).thenReturn(Collections.singletonList(badNetwork));",
        "line": 82,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedNonSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.listByZoneAndTrafficType(anyLong(), any(TrafficType.class))).thenReturn(Collections.singletonList(badNetwork));",
        "line": 102,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.listByZoneSecurityGroup(anyLong())).thenReturn(Collections.singletonList(network));",
        "line": 105,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.listByZoneAndTrafficType(anyLong(), eq(TrafficType.Guest))).thenReturn(Collections.singletonList(network));",
        "line": 124,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicNonSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.listByZoneAndTrafficType(anyLong(), not(eq(TrafficType.Guest)))).thenReturn(Collections.singletonList(badNetwork));",
        "line": 127,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicNonSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.listByZoneAndTrafficType(anyLong(), eq(TrafficType.Guest))).thenReturn(Collections.singletonList(network));",
        "line": 147,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.listByZoneAndTrafficType(anyLong(), not(eq(TrafficType.Guest)))).thenReturn(Collections.singletonList(badNetwork));",
        "line": 150,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicSG",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.listByZoneAndTrafficType(anyLong(), eq(TrafficType.Guest))).thenReturn(Collections.singletonList(network));",
        "line": 171,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicSGWrongZoneType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.listByZoneAndTrafficType(anyLong(), not(eq(TrafficType.Guest)))).thenReturn(Collections.singletonList(badNetwork));",
        "line": 174,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForBasicSGWrongZoneType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.listByZoneAndTrafficType(anyLong(), any(TrafficType.class))).thenReturn(Collections.singletonList(badNetwork));",
        "line": 190,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedWrongZoneType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_networkDao.listByZoneSecurityGroup(anyLong())).thenReturn(Collections.singletonList(network));",
        "line": 193,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getDefaultNetworkForAdvancedWrongZoneType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
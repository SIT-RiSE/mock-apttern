[
  {
    "variableName": "serviceOfferingMock",
    "variableType": "ServiceOfferingVO",
    "mockedClass": "ServiceOfferingVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\orchestration\\src\\test\\java\\com\\cloud\\vm\\VirtualMachineManagerImplTest.java",
      "className": "VirtualMachineManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ServiceOfferingVO serviceOfferingMock;",
        "line": 138,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(serviceOfferingMock.isDynamic()).thenReturn(true);",
        "line": 354,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckIfCanUpgrade",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(serviceOfferingMock.isSystemUse()).thenReturn(true);",
        "line": 365,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckIfCanUpgrade",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(serviceOfferingMock.getState()).thenReturn(ServiceOffering.State.Inactive);",
        "line": 376,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckIfCanUpgradeFail",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "svo",
    "variableType": "ServiceOfferingVO",
    "mockedClass": "ServiceOfferingVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.capacity",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\capacity\\CapacityManagerTest.java",
      "className": "CapacityManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private ServiceOfferingVO svo = mock(ServiceOfferingVO.class);",
        "line": 41,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(svo.getCpu()).thenReturn(500);",
        "line": 68,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "allocateCapacityTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(svo.getRamSize()).thenReturn(512);",
        "line": 69,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "allocateCapacityTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "serviceOfferingVoMock",
    "variableType": "ServiceOfferingVO",
    "mockedClass": "ServiceOfferingVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\hypervisor\\KVMGuruTest.java",
      "className": "KVMGuruTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nServiceOfferingVO serviceOfferingVoMock;",
        "line": 83,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(serviceOfferingVoMock.getDetail(ApiConstants.MAX_MEMORY)).thenReturn(String.valueOf(maxCustomOfferingMemory));",
        "line": 175,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateGetVmMaxMemoryReturnCustomOfferingMaxMemory",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(serviceOfferingVoMock.getDetail(ApiConstants.MAX_MEMORY)).thenReturn(null);",
        "line": 185,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateGetVmMaxMemoryReturnVmServiceOfferingMaxRAMSize",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(serviceOfferingVoMock.getDetail(ApiConstants.MAX_MEMORY)).thenReturn(null);",
        "line": 199,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateGetVmMaxMemoryReturnMaxHostMemory",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(serviceOfferingVoMock.getDetail(ApiConstants.MAX_CPU_NUMBER)).thenReturn(String.valueOf(maxCustomOfferingCpuCores));",
        "line": 214,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateGetVmMaxCpuCoresReturnCustomOfferingMaxCpuCores",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(serviceOfferingVoMock.getDetail(ApiConstants.MAX_CPU_NUMBER)).thenReturn(null);",
        "line": 224,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateGetVmMaxCpuCoresVmServiceOfferingMaxCPUCores",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(serviceOfferingVoMock.getDetail(ApiConstants.MAX_CPU_NUMBER)).thenReturn(null);",
        "line": 238,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateGetVmMaxCpuCoresReturnMaxHostMemory",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "serviceOfferingMock",
    "variableType": "ServiceOfferingVO",
    "mockedClass": "ServiceOfferingVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.as",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\as\\AutoScaleManagerImplTest.java",
      "className": "AutoScaleManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nServiceOfferingVO serviceOfferingMock;",
        "line": 351,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(serviceOfferingMock.isDynamic()).thenReturn(false);",
        "line": 742,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateAutoScaleVmProfile",
          "methodAnnotations": [
            "@Test",
            "@PrepareForTest"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(serviceOfferingMock.isDynamic()).thenReturn(false);",
        "line": 780,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateAutoScaleVmProfileFail",
          "methodAnnotations": [
            "@Test",
            "@PrepareForTest"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(serviceOfferingMock.isDynamic()).thenReturn(false);",
        "line": 816,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateAutoScaleVmProfile",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(serviceOfferingMock.getDiskOfferingId()).thenReturn(diskOfferingId);",
        "line": 1272,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateNewVM1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(serviceOfferingMock.getDiskOfferingId()).thenReturn(diskOfferingId);",
        "line": 1320,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateNewVM2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(serviceOfferingMock.getDiskOfferingId()).thenReturn(diskOfferingId);",
        "line": 1369,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateNewVM3",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(serviceOfferingMock.getRamSize()).thenReturn(ramSize);",
        "line": 2147,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateCountersMapWithInstantDataForMemory",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "serviceOffering",
    "variableType": "ServiceOfferingVO",
    "mockedClass": "ServiceOfferingVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\vm\\UserVmManagerImplTest.java",
      "className": "UserVmManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ServiceOfferingVO serviceOffering;",
        "line": 193,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(serviceOffering.getState()).thenReturn(ServiceOffering.State.Inactive);",
        "line": 926,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "createVirtualMachineWithInactiveServiceOffering",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
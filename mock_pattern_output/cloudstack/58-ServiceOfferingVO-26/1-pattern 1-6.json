[
  {
    "variableName": "mockCurrentServiceOffering",
    "variableType": "ServiceOfferingVO",
    "mockedClass": "ServiceOfferingVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\orchestration\\src\\test\\java\\com\\cloud\\vm\\VirtualMachineManagerImplTest.java",
      "className": "VirtualMachineManagerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServiceOfferingVO mockCurrentServiceOffering = mock(ServiceOfferingVO.class);",
        "line": 357,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckIfCanUpgrade",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(mockCurrentServiceOffering.isSystemUse()).thenReturn(true);",
        "line": 364,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckIfCanUpgrade",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "offering",
    "variableType": "ServiceOfferingVO",
    "mockedClass": "ServiceOfferingVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.implicitplanner",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\deployment-planners\\implicit-dedication\\src\\test\\java\\org\\apache\\cloudstack\\implicitplanner\\ImplicitPlannerTest.java",
      "className": "ImplicitPlannerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServiceOfferingVO offering = mock(ServiceOfferingVO.class);",
        "line": 332,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(offering.getId()).thenReturn(offeringId);",
        "line": 352,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(offering.getCpu()).thenReturn(noOfCpusInOffering);",
        "line": 354,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(offering.getSpeed()).thenReturn(cpuSpeedInOffering);",
        "line": 355,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(offering.getRamSize()).thenReturn(ramInOffering);",
        "line": 356,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForTest",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "offeringForVmOfThisAccount",
    "variableType": "ServiceOfferingVO",
    "mockedClass": "ServiceOfferingVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.implicitplanner",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\deployment-planners\\implicit-dedication\\src\\test\\java\\org\\apache\\cloudstack\\implicitplanner\\ImplicitPlannerTest.java",
      "className": "ImplicitPlannerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// Mock the offering with which the vm was created.\r\nServiceOfferingVO offeringForVmOfThisAccount = mock(ServiceOfferingVO.class);",
        "line": 435,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForImplicitPlannerTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(offeringForVmOfThisAccount.getDeploymentPlanner()).thenReturn(planner.getName());",
        "line": 437,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForImplicitPlannerTest",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "offeringForVMOfOtherAccount",
    "variableType": "ServiceOfferingVO",
    "mockedClass": "ServiceOfferingVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.implicitplanner",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\deployment-planners\\implicit-dedication\\src\\test\\java\\org\\apache\\cloudstack\\implicitplanner\\ImplicitPlannerTest.java",
      "className": "ImplicitPlannerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServiceOfferingVO offeringForVMOfOtherAccount = mock(ServiceOfferingVO.class);",
        "line": 439,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForImplicitPlannerTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(offeringForVMOfOtherAccount.getDeploymentPlanner()).thenReturn(\"FirstFitPlanner\");",
        "line": 441,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForImplicitPlannerTest",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "serviceOfferingVO",
    "variableType": "ServiceOfferingVO",
    "mockedClass": "ServiceOfferingVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.storage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\storage\\VolumeApiServiceImplTest.java",
      "className": "VolumeApiServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServiceOfferingVO serviceOfferingVO = Mockito.mock(ServiceOfferingVO.class);",
        "line": 705,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateConditionsToReplaceDiskOfferingOfVolumeTestRootVolumeWithDiskOfferingStrictnessTrue",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(serviceOfferingVO.getDiskOfferingStrictness()).thenReturn(true);",
        "line": 707,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateConditionsToReplaceDiskOfferingOfVolumeTestRootVolumeWithDiskOfferingStrictnessTrue",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "offering",
    "variableType": "ServiceOfferingVO",
    "mockedClass": "ServiceOfferingVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\vm\\FirstFitPlannerTest.java",
      "className": "FirstFitPlannerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServiceOfferingVO offering = mock(ServiceOfferingVO.class);",
        "line": 265,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(offering.getId()).thenReturn(offeringId);",
        "line": 285,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(offering.getCpu()).thenReturn(noOfCpusInOffering);",
        "line": 287,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(offering.getSpeed()).thenReturn(cpuSpeedInOffering);",
        "line": 288,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(offering.getRamSize()).thenReturn(ramInOffering);",
        "line": 289,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "initializeForTest",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 1
  }
]
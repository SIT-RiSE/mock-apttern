[
  {
    "variableName": "consoleProxyManagerImplMock",
    "variableType": "ConsoleProxyManagerImpl",
    "mockedClass": "ConsoleProxyManagerImpl",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.consoleproxy",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\consoleproxy\\ConsoleProxyManagerTest.java",
      "className": "ConsoleProxyManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nConsoleProxyManagerImpl consoleProxyManagerImplMock;",
        "line": 68,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// No existing CPVM\r\nMockito.when(consoleProxyManagerImplMock.assignProxyFromStoppedPool(Mockito.anyLong())).thenReturn(null);",
        "line": 88,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNewCPVMCreation",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consoleProxyManagerImplMock.startNew(Mockito.anyLong())).thenReturn(consoleProxyVOMock);",
        "line": 92,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNewCPVMCreation",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Start CPVM\r\nMockito.when(consoleProxyManagerImplMock.startProxy(Mockito.anyLong(), Mockito.anyBoolean())).thenReturn(consoleProxyVOMock);",
        "line": 94,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNewCPVMCreation",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// CPVM already exists\r\nMockito.when(consoleProxyManagerImplMock.assignProxyFromStoppedPool(Mockito.anyLong())).thenReturn(consoleProxyVOMock);",
        "line": 104,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExistingCPVMStart",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Start CPVM\r\nMockito.when(consoleProxyManagerImplMock.startProxy(Mockito.anyLong(), Mockito.anyBoolean())).thenReturn(consoleProxyVOMock);",
        "line": 106,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExistingCPVMStart",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// CPVM already exists\r\nMockito.when(consoleProxyManagerImplMock.assignProxyFromStoppedPool(Mockito.anyLong())).thenReturn(consoleProxyVOMock);",
        "line": 116,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExisingCPVMStartFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Start CPVM\r\nMockito.when(consoleProxyManagerImplMock.startProxy(Mockito.anyLong(), Mockito.anyBoolean())).thenReturn(null);",
        "line": 118,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExisingCPVMStartFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Destroy existing CPVM, so that a new one is created subsequently\r\nMockito.when(consoleProxyManagerImplMock.destroyProxy(Mockito.anyLong())).thenReturn(true);",
        "line": 120,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExisingCPVMStartFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
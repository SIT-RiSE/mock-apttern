[
  {
    "variableName": "tungstenService",
    "variableType": "TungstenService",
    "mockedClass": "TungstenService",
    "isReuseableMock": null,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 @Before\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenElementTest.java",
      "className": "TungstenElementTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nTungstenService tungstenService;",
        "line": 176,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(tungstenService.getTungstenProjectFqn(any())).thenReturn(\"default-domain:default-project\");",
        "line": 218,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(tungstenService.updateLoadBalancer(any(), any())).thenReturn(true);",
        "line": 386,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyLBRulesAddRuleSuccessTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(tungstenService.updateLoadBalancerSsl(any(), any())).thenReturn(false);",
        "line": 440,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyLBRulesAddRuleFailTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(tungstenService.updateLoadBalancerSsl(any(), any())).thenReturn(false);",
        "line": 473,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyLBRulesRevokeRuleFailTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(tungstenService.updateLoadBalancer(any(), any())).thenReturn(true);",
        "line": 506,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyLBRulesRevokeRuleSuccessTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(tungstenService, times(2)).removePublicNetworkSubnet(any(VlanVO.class));",
        "line": 816,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shutdownProviderInstancesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(tungstenService, times(1)).deletePublicNetwork(anyLong());",
        "line": 817,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shutdownProviderInstancesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(tungstenService, times(2)).removeManagementNetworkSubnet(any(HostPodVO.class));",
        "line": 818,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shutdownProviderInstancesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(tungstenService, times(1)).deleteManagementNetwork(anyLong());",
        "line": 819,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shutdownProviderInstancesTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(tungstenService.addTungstenVmSecurityGroup(any(VMInstanceVO.class))).thenReturn(true);",
        "line": 987,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postStateTransitionEventWithVmStartedTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(tungstenService.removeTungstenVmSecurityGroup(any(VMInstanceVO.class))).thenReturn(true);",
        "line": 1000,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postStateTransitionEventWithVmStopedTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 21
  }
]
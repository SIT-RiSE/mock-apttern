[
  {
    "variableName": "domain",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.kvm.resource",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\kvm\\src\\test\\java\\com\\cloud\\hypervisor\\kvm\\resource\\LibvirtComputingResourceTest.java",
      "className": "LibvirtComputingResourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Domain domain = Mockito.mock(Domain.class);",
        "line": 939,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetVmStat",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(domain.getInfo()).thenReturn(domainInfo);",
        "line": 943,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetVmStat",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(domain.memoryStats(20)).thenReturn(domainMem);",
        "line": 944,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetVmStat",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// this is testing the interface stats, returns an increasing number of sent and received bytes\r\nMockito.when(domain.interfaceStats(nullable(String.class))).thenAnswer(new org.mockito.stubbing.Answer<DomainInterfaceStats>() {\r\n\r\n    // increment with less than a KB, so this should be less than 1 KB\r\n    final static int increment = 1000;\r\n\r\n    int rxBytes = 1000;\r\n\r\n    int txBytes = 1000;\r\n\r\n    @Override\r\n    public DomainInterfaceStats answer(final InvocationOnMock invocation) throws Throwable {\r\n        final DomainInterfaceStats domainInterfaceStats = new DomainInterfaceStats();\r\n        domainInterfaceStats.rx_bytes = rxBytes += increment;\r\n        domainInterfaceStats.tx_bytes = txBytes += increment;\r\n        return domainInterfaceStats;\r\n    }\r\n});",
        "line": 956,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetVmStat",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(domain.blockStats(nullable(String.class))).thenAnswer(new org.mockito.stubbing.Answer<DomainBlockStats>() {\r\n\r\n    // a little less than a KB\r\n    final static int increment = 1000;\r\n\r\n    int rdBytes = 0;\r\n\r\n    int wrBytes = 1024;\r\n\r\n    @Override\r\n    public DomainBlockStats answer(final InvocationOnMock invocation) throws Throwable {\r\n        final DomainBlockStats domainBlockStats = new DomainBlockStats();\r\n        domainBlockStats.rd_bytes = rdBytes += increment;\r\n        domainBlockStats.wr_bytes = wrBytes += increment;\r\n        return domainBlockStats;\r\n    }\r\n});",
        "line": 974,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetVmStat",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.kvm.resource",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\kvm\\src\\test\\java\\com\\cloud\\hypervisor\\kvm\\resource\\LibvirtComputingResourceTest.java",
      "className": "LibvirtComputingResourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Domain vm = Mockito.mock(Domain.class);",
        "line": 1058,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStopCommandCheckVmNOTRunning",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getInfo()).thenReturn(info);",
        "line": 1071,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStopCommandCheckVmNOTRunning",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.kvm.resource",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\kvm\\src\\test\\java\\com\\cloud\\hypervisor\\kvm\\resource\\LibvirtComputingResourceTest.java",
      "className": "LibvirtComputingResourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Domain vm = Mockito.mock(Domain.class);",
        "line": 1097,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStopCommandCheckException1",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getInfo()).thenReturn(info);",
        "line": 1110,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStopCommandCheckException1",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.kvm.resource",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\kvm\\src\\test\\java\\com\\cloud\\hypervisor\\kvm\\resource\\LibvirtComputingResourceTest.java",
      "className": "LibvirtComputingResourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Domain vm = Mockito.mock(Domain.class);",
        "line": 1135,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStopCommandCheckVmRunning",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getInfo()).thenReturn(info);",
        "line": 1148,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStopCommandCheckVmRunning",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.kvm.resource",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\kvm\\src\\test\\java\\com\\cloud\\hypervisor\\kvm\\resource\\LibvirtComputingResourceTest.java",
      "className": "LibvirtComputingResourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Domain vm = Mockito.mock(Domain.class);",
        "line": 4146,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testManageSnapshotCommandLibvirt",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getInfo()).thenReturn(info);",
        "line": 4159,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testManageSnapshotCommandLibvirt",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getUUIDString()).thenReturn(\"cdb18980-546d-4153-b916-70ee9edf0908\");",
        "line": 4170,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testManageSnapshotCommandLibvirt",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.kvm.resource",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\kvm\\src\\test\\java\\com\\cloud\\hypervisor\\kvm\\resource\\LibvirtComputingResourceTest.java",
      "className": "LibvirtComputingResourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Domain vm = Mockito.mock(Domain.class);",
        "line": 4885,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testResizeVolumeCommand",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getInfo()).thenReturn(info);",
        "line": 4905,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testResizeVolumeCommand",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vm",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.kvm.resource",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\kvm\\src\\test\\java\\com\\cloud\\hypervisor\\kvm\\resource\\LibvirtComputingResourceTest.java",
      "className": "LibvirtComputingResourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Domain vm = Mockito.mock(Domain.class);",
        "line": 4945,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testResizeVolumeCommandLinstorNotifyOnly",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(vm.getInfo()).thenReturn(info);",
        "line": 4962,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testResizeVolumeCommandLinstorNotifyOnly",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dm",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.kvm.resource",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\kvm\\src\\test\\java\\com\\cloud\\hypervisor\\kvm\\resource\\LibvirtComputingResourceTest.java",
      "className": "LibvirtComputingResourceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Domain dm = Mockito.mock(Domain.class);",
        "line": 5522,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartCommandHostMemory",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dm.getMaxMemory()).thenReturn(1024L);",
        "line": 5538,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartCommandHostMemory",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dm.getName()).thenReturn(vmName);",
        "line": 5539,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartCommandHostMemory",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dom",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\brocade-vcs\\src\\test\\java\\com\\cloud\\network\\guru\\BrocadeVcsGuestNetworkGuruTest.java",
      "className": "BrocadeVcsGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Domain dom = mock(Domain.class);",
        "line": 260,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplement",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dom.getName()).thenReturn(\"domain\");",
        "line": 261,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplement",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dom",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\brocade-vcs\\src\\test\\java\\com\\cloud\\network\\guru\\BrocadeVcsGuestNetworkGuruTest.java",
      "className": "BrocadeVcsGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Domain dom = mock(Domain.class);",
        "line": 320,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementFail",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dom.getName()).thenReturn(\"domain\");",
        "line": 321,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementFail",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dom",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\brocade-vcs\\src\\test\\java\\com\\cloud\\network\\guru\\BrocadeVcsGuestNetworkGuruTest.java",
      "className": "BrocadeVcsGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Domain dom = mock(Domain.class);",
        "line": 374,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReserve",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dom.getName()).thenReturn(\"domain\");",
        "line": 375,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReserve",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dom",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\brocade-vcs\\src\\test\\java\\com\\cloud\\network\\guru\\BrocadeVcsGuestNetworkGuruTest.java",
      "className": "BrocadeVcsGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Domain dom = mock(Domain.class);",
        "line": 426,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReserveFail",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dom.getName()).thenReturn(\"domain\");",
        "line": 427,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReserveFail",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dom",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\cisco-vnmc\\src\\test\\java\\com\\cloud\\network\\element\\CiscoVnmcElementTest.java",
      "className": "CiscoVnmcElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Domain dom = mock(Domain.class);",
        "line": 161,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dom.getName()).thenReturn(\"d1\");",
        "line": 162,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dom",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\element\\NiciraNvpElementTest.java",
      "className": "NiciraNvpElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Domain dom = mock(Domain.class);",
        "line": 181,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementIsolatedNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dom.getName()).thenReturn(\"domain\");",
        "line": 182,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementIsolatedNetworkTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dom",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\element\\NiciraNvpElementTest.java",
      "className": "NiciraNvpElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Domain dom = mock(Domain.class);",
        "line": 297,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkUuidVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dom.getName()).thenReturn(\"domain\");",
        "line": 298,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkUuidVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dom",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\element\\NiciraNvpElementTest.java",
      "className": "NiciraNvpElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Domain dom = mock(Domain.class);",
        "line": 350,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkNumericalVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dom.getName()).thenReturn(\"domain\");",
        "line": 351,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkNumericalVlanIdTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dom",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\element\\NiciraNvpElementTest.java",
      "className": "NiciraNvpElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Domain dom = mock(Domain.class);",
        "line": 402,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkNumericalVlanIdWithoutL2GatewayService",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dom.getName()).thenReturn(\"domain\");",
        "line": 403,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "implementSharedNetworkNumericalVlanIdWithoutL2GatewayService",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dom",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\guru\\NiciraNvpGuestNetworkGuruTest.java",
      "className": "NiciraNvpGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Domain dom = mock(Domain.class);",
        "line": 285,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplement",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dom.getName()).thenReturn(\"domain\");",
        "line": 286,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplement",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dom",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\guru\\NiciraNvpGuestNetworkGuruTest.java",
      "className": "NiciraNvpGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Domain dom = mock(Domain.class);",
        "line": 342,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementWithCidr",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dom.getName()).thenReturn(\"domain\");",
        "line": 343,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementWithCidr",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dom",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\guru\\NiciraNvpGuestNetworkGuruTest.java",
      "className": "NiciraNvpGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Domain dom = mock(Domain.class);",
        "line": 399,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementURIException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dom.getName()).thenReturn(\"domain\");",
        "line": 400,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementURIException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dom",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\nicira-nvp\\src\\test\\java\\com\\cloud\\network\\guru\\NiciraNvpGuestNetworkGuruTest.java",
      "className": "NiciraNvpGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Domain dom = mock(Domain.class);",
        "line": 457,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testShutdown",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dom.getName()).thenReturn(\"domain\");",
        "line": 458,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testShutdown",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dom",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\vxlan\\src\\test\\java\\com\\cloud\\network\\guru\\VxlanGuestNetworkGuruTest.java",
      "className": "VxlanGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Domain dom = mock(Domain.class);",
        "line": 174,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplement",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dom.getName()).thenReturn(\"domain\");",
        "line": 175,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplement",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dom",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\vxlan\\src\\test\\java\\com\\cloud\\network\\guru\\VxlanGuestNetworkGuruTest.java",
      "className": "VxlanGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Domain dom = mock(Domain.class);",
        "line": 219,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementWithCidr",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dom.getName()).thenReturn(\"domain\");",
        "line": 220,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testImplementWithCidr",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "dom",
    "variableType": "Domain",
    "mockedClass": "Domain",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\vxlan\\src\\test\\java\\com\\cloud\\network\\guru\\VxlanGuestNetworkGuruTest.java",
      "className": "VxlanGuestNetworkGuruTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Domain dom = mock(Domain.class);",
        "line": 262,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testShutdown",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(dom.getName()).thenReturn(\"domain\");",
        "line": 263,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testShutdown",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
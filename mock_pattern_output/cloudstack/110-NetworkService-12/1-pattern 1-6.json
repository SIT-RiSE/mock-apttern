[
  {
    "variableName": "networkService",
    "variableType": "NetworkService",
    "mockedClass": "NetworkService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.api.command.test",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\api\\src\\test\\java\\org\\apache\\cloudstack\\api\\command\\test\\AddIpToVmNicTest.java",
      "className": "AddIpToVmNicTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NetworkService networkService = Mockito.mock(NetworkService.class);",
        "line": 57,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkService.allocateSecondaryGuestIP(Matchers.anyLong(), Matchers.any())).thenReturn(secIp);",
        "line": 61,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "networkService",
    "variableType": "NetworkService",
    "mockedClass": "NetworkService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.api.command.test",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\api\\src\\test\\java\\org\\apache\\cloudstack\\api\\command\\test\\AddIpToVmNicTest.java",
      "className": "AddIpToVmNicTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NetworkService networkService = Mockito.mock(NetworkService.class);",
        "line": 78,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkService.allocateSecondaryGuestIP(Matchers.anyLong(), Matchers.any())).thenReturn(null);",
        "line": 81,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "networkService",
    "variableType": "NetworkService",
    "mockedClass": "NetworkService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.api.command.test",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\api\\src\\test\\java\\org\\apache\\cloudstack\\api\\command\\test\\AddIpToVmNicTest.java",
      "className": "AddIpToVmNicTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NetworkService networkService = Mockito.mock(NetworkService.class);",
        "line": 98,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemoveIpFromVmNicSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkService.releaseSecondaryIpFromNic(Matchers.anyInt())).thenReturn(true);",
        "line": 101,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemoveIpFromVmNicSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "networkService",
    "variableType": "NetworkService",
    "mockedClass": "NetworkService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.api.command.test",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\api\\src\\test\\java\\org\\apache\\cloudstack\\api\\command\\test\\AddIpToVmNicTest.java",
      "className": "AddIpToVmNicTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NetworkService networkService = Mockito.mock(NetworkService.class);",
        "line": 109,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemoveIpFromVmNicFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkService.releaseSecondaryIpFromNic(Matchers.anyInt())).thenReturn(false);",
        "line": 112,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRemoveIpFromVmNicFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "networkService",
    "variableType": "NetworkService",
    "mockedClass": "NetworkService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.api.command.test",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\api\\src\\test\\java\\org\\apache\\cloudstack\\api\\command\\test\\AddNetworkServiceProviderCmdTest.java",
      "className": "AddNetworkServiceProviderCmdTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NetworkService networkService = Mockito.mock(NetworkService.class);",
        "line": 85,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateProviderToPhysicalNetworkSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkService.addProviderToPhysicalNetwork(Matchers.anyLong(), Matchers.anyString(), Matchers.anyLong(), Matchers.anyList())).thenReturn(physicalNetworkServiceProvider);",
        "line": 89,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateProviderToPhysicalNetworkSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "networkService",
    "variableType": "NetworkService",
    "mockedClass": "NetworkService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.api.command.test",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\api\\src\\test\\java\\org\\apache\\cloudstack\\api\\command\\test\\AddNetworkServiceProviderCmdTest.java",
      "className": "AddNetworkServiceProviderCmdTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NetworkService networkService = Mockito.mock(NetworkService.class);",
        "line": 103,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateProviderToPhysicalNetworkFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(networkService.addProviderToPhysicalNetwork(Matchers.anyLong(), Matchers.anyString(), Matchers.anyLong(), Matchers.anyList())).thenReturn(null);",
        "line": 106,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateProviderToPhysicalNetworkFailure",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
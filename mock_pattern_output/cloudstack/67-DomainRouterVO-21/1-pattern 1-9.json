[
  {
    "variableName": "candidateVmMock",
    "variableType": "DomainRouterVO",
    "mockedClass": "DomainRouterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.lb",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\elastic-loadbalancer\\src\\test\\java\\com\\cloud\\network\\lb\\LoadBalanceRuleHandlerTest.java",
      "className": "LoadBalanceRuleHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DomainRouterVO candidateVmMock = mock(DomainRouterVO.class);",
        "line": 79,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddCandidateVmIsPodIpMatchesWhenIdsHaveSameValue",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(candidateVmMock.getPodIdToDeployIn()).thenReturn(new Long(1));",
        "line": 80,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddCandidateVmIsPodIpMatchesWhenIdsHaveSameValue",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "candidateVmMock",
    "variableType": "DomainRouterVO",
    "mockedClass": "DomainRouterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.lb",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\elastic-loadbalancer\\src\\test\\java\\com\\cloud\\network\\lb\\LoadBalanceRuleHandlerTest.java",
      "className": "LoadBalanceRuleHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DomainRouterVO candidateVmMock = mock(DomainRouterVO.class);",
        "line": 91,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddCandidateVmIsPodIpMatchesWhenPodIdForDirectIpIsNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(candidateVmMock.getPodIdToDeployIn()).thenReturn(new Long(1));",
        "line": 92,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddCandidateVmIsPodIpMatchesWhenPodIdForDirectIpIsNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "candidateVmMock",
    "variableType": "DomainRouterVO",
    "mockedClass": "DomainRouterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.lb",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\elastic-loadbalancer\\src\\test\\java\\com\\cloud\\network\\lb\\LoadBalanceRuleHandlerTest.java",
      "className": "LoadBalanceRuleHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DomainRouterVO candidateVmMock = mock(DomainRouterVO.class);",
        "line": 104,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddCandidateVmIsPodIpMatchesWhenPodIdToDeployInIsNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(candidateVmMock.getPodIdToDeployIn()).thenReturn(null);",
        "line": 105,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddCandidateVmIsPodIpMatchesWhenPodIdToDeployInIsNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "candidateVmMock",
    "variableType": "DomainRouterVO",
    "mockedClass": "DomainRouterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.lb",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\elastic-loadbalancer\\src\\test\\java\\com\\cloud\\network\\lb\\LoadBalanceRuleHandlerTest.java",
      "className": "LoadBalanceRuleHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DomainRouterVO candidateVmMock = mock(DomainRouterVO.class);",
        "line": 114,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddCandidateVmIsPodIpMatchesWhenCandidateVmsIsNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(candidateVmMock.getPodIdToDeployIn()).thenReturn(new Long(1));",
        "line": 115,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddCandidateVmIsPodIpMatchesWhenCandidateVmsIsNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "elbVmMock",
    "variableType": "DomainRouterVO",
    "mockedClass": "DomainRouterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.lb",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\elastic-loadbalancer\\src\\test\\java\\com\\cloud\\network\\lb\\LoadBalanceRuleHandlerTest.java",
      "className": "LoadBalanceRuleHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DomainRouterVO elbVmMock = mock(DomainRouterVO.class);",
        "line": 132,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartWhenParamsIsNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(elbVmMock.getUuid()).thenReturn(uuid);",
        "line": 134,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartWhenParamsIsNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(elbVmMock.getId()).thenReturn(id);",
        "line": 136,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartWhenParamsIsNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "elbVmMock",
    "variableType": "DomainRouterVO",
    "mockedClass": "DomainRouterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.lb",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\elastic-loadbalancer\\src\\test\\java\\com\\cloud\\network\\lb\\LoadBalanceRuleHandlerTest.java",
      "className": "LoadBalanceRuleHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DomainRouterVO elbVmMock = mock(DomainRouterVO.class);",
        "line": 147,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartWhenParamsIsEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(elbVmMock.getUuid()).thenReturn(uuid);",
        "line": 149,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartWhenParamsIsEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(elbVmMock.getId()).thenReturn(id);",
        "line": 151,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStartWhenParamsIsEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "elbVmMock",
    "variableType": "DomainRouterVO",
    "mockedClass": "DomainRouterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.lb",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\elastic-loadbalancer\\src\\test\\java\\com\\cloud\\network\\lb\\LoadBalanceRuleHandlerTest.java",
      "className": "LoadBalanceRuleHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DomainRouterVO elbVmMock = mock(DomainRouterVO.class);",
        "line": 162,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(elbVmMock.getUuid()).thenReturn(uuid);",
        "line": 164,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(elbVmMock.getId()).thenReturn(id);",
        "line": 166,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStart",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "unusedElbVmThatMatchesPodId",
    "variableType": "DomainRouterVO",
    "mockedClass": "DomainRouterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.lb",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\elastic-loadbalancer\\src\\test\\java\\com\\cloud\\network\\lb\\LoadBalanceRuleHandlerTest.java",
      "className": "LoadBalanceRuleHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DomainRouterVO unusedElbVmThatMatchesPodId = mock(DomainRouterVO.class);",
        "line": 203,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFindElbVmWithCapacityWhenThereAreUnusedElbVmsAndOneMatchesThePodId",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(unusedElbVmThatMatchesPodId.getPodIdToDeployIn()).thenReturn(podId);",
        "line": 204,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFindElbVmWithCapacityWhenThereAreUnusedElbVmsAndOneMatchesThePodId",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "router",
    "variableType": "DomainRouterVO",
    "mockedClass": "DomainRouterVO",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.router",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\router\\RouterControlHelperTest.java",
      "className": "RouterControlHelperTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "DomainRouterVO router = mock(DomainRouterVO.class);",
        "line": 111,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetRouterControlIpWithRouterIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(router.getPrivateIpAddress()).thenReturn(IP4_ADDRES1);",
        "line": 113,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetRouterControlIpWithRouterIp",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
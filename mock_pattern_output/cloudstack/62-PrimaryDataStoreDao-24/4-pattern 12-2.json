[
  {
    "variableName": "primaryDataStoreDao",
    "variableType": "PrimaryDataStoreDao",
    "mockedClass": "PrimaryDataStoreDao",
    "isReuseableMock": "Fully Shared",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 @Before\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.motion",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\storage\\datamotion\\src\\test\\java\\org\\apache\\cloudstack\\storage\\motion\\KvmNonManagedStorageSystemDataMotionTest.java",
      "className": "KvmNonManagedStorageSystemDataMotionTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate PrimaryDataStoreDao primaryDataStoreDao;",
        "line": 86,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(primaryDataStoreDao.findById(POOL_1_ID)).thenReturn(pool1);",
        "line": 410,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(primaryDataStoreDao.findById(POOL_2_ID)).thenReturn(pool2);",
        "line": 413,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "lenient().when(primaryDataStoreDao.findById(POOL_3_ID)).thenReturn(pool3);",
        "line": 426,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(primaryDataStoreDao.findById(POOL_1_ID)).thenReturn(null);",
        "line": 484,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testVerifyLiveMigrationMapForKVMNotExistingSource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(primaryDataStoreDao.findById(POOL_2_ID)).thenReturn(null);",
        "line": 490,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testVerifyLiveMigrationMapForKVMNotExistingDest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 12
  },
  {
    "variableName": "primaryDataStoreDaoMock",
    "variableType": "PrimaryDataStoreDao",
    "mockedClass": "PrimaryDataStoreDao",
    "isReuseableMock": "Fully Shared",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 @Before\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.storage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\storage\\VolumeApiServiceImplTest.java",
      "className": "VolumeApiServiceImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate PrimaryDataStoreDao primaryDataStoreDaoMock;",
        "line": 150,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(primaryDataStoreDaoMock.findById(storagePoolMockId)).thenReturn(storagePoolVO);",
        "line": 267,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(primaryDataStoreDaoMock.findById(1L)).thenReturn(unmanagedPool);",
        "line": 315,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(primaryDataStoreDaoMock.findById(2L)).thenReturn(managedPool);",
        "line": 320,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(primaryDataStoreDaoMock.findById(1L)).thenReturn(srcStoragePoolVOMock);",
        "line": 1618,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testStoragePoolCompatibilityAndAllowEncryptedVolumeMigrationForPowerFlexStorage",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 12
  }
]
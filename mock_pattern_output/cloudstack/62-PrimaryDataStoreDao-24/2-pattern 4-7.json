[
  {
    "variableName": "primaryDataStoreDao",
    "variableType": "PrimaryDataStoreDao",
    "mockedClass": "PrimaryDataStoreDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.vmsnapshot",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\storage\\snapshot\\src\\test\\java\\org\\apache\\cloudstack\\storage\\vmsnapshot\\DefaultVMSnapshotStrategyTest.java",
      "className": "DefaultVMSnapshotStrategyTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nPrimaryDataStoreDao primaryDataStoreDao;",
        "line": 47,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(primaryDataStoreDao.findPoolByUUID(newDSUuid)).thenReturn(storagePoolVO);",
        "line": 95,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVolumePath",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "_storagePoolDao",
    "variableType": "PrimaryDataStoreDao",
    "mockedClass": "PrimaryDataStoreDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.hypervisor.guru",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\hypervisors\\vmware\\src\\test\\java\\com\\cloud\\hypervisor\\guru\\VMwareGuruTest.java",
      "className": "VMwareGuruTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nPrimaryDataStoreDao _storagePoolDao;",
        "line": 66,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_storagePoolDao.findById(1L)).thenReturn(storagePoolVO);",
        "line": 103,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "finalizeMigrateForLocalStorageToHaveTargetHostGuid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "primaryDataStoreDao",
    "variableType": "PrimaryDataStoreDao",
    "mockedClass": "PrimaryDataStoreDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.storage.datastore.lifecycle",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\storage\\volume\\scaleio\\src\\test\\java\\org\\apache\\cloudstack\\storage\\datastore\\lifecycle\\ScaleIOPrimaryDataStoreLifeCycleTest.java",
      "className": "ScaleIOPrimaryDataStoreLifeCycleTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate PrimaryDataStoreDao primaryDataStoreDao;",
        "line": 88,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(primaryDataStoreDao.findById(anyLong())).thenReturn(null);",
        "line": 226,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteDataStoreWithStoragePoolNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(primaryDataStoreDao.findById(anyLong())).thenReturn(storagePoolVO);",
        "line": 236,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteDataStore",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "primaryDataStoreDao",
    "variableType": "PrimaryDataStoreDao",
    "mockedClass": "PrimaryDataStoreDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.configuration",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\configuration\\ConfigurationManagerTest.java",
      "className": "ConfigurationManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nPrimaryDataStoreDao primaryDataStoreDao;",
        "line": 197,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(primaryDataStoreDao.listStoragePoolsWithActiveVolumesByOfferingId(anyLong())).thenReturn(pools);",
        "line": 1054,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateDiskOfferingTagsWithPrimaryStorageTagsEqualNullTestThrowException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(primaryDataStoreDao.listStoragePoolsWithActiveVolumesByOfferingId(anyLong())).thenReturn(pools);",
        "line": 1069,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateDiskOfferingTagsWithPrimaryStorageMissingTagsTestThrowException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(primaryDataStoreDao.listStoragePoolsWithActiveVolumesByOfferingId(anyLong())).thenReturn(pools);",
        "line": 1084,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateDiskOfferingTagsWithPrimaryStorageWithCorrectTagsTestSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "primaryDataStoreDao",
    "variableType": "PrimaryDataStoreDao",
    "mockedClass": "PrimaryDataStoreDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.configuration",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\configuration\\ConfigurationManagerTest.java",
      "className": "ConfigurationManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nPrimaryDataStoreDao primaryDataStoreDao;",
        "line": 197,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(primaryDataStoreDao.listStoragePoolsWithActiveVolumesByOfferingId(anyLong())).thenReturn(pools);",
        "line": 1054,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateDiskOfferingTagsWithPrimaryStorageTagsEqualNullTestThrowException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(primaryDataStoreDao.listStoragePoolsWithActiveVolumesByOfferingId(anyLong())).thenReturn(pools);",
        "line": 1069,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateDiskOfferingTagsWithPrimaryStorageMissingTagsTestThrowException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(primaryDataStoreDao.listStoragePoolsWithActiveVolumesByOfferingId(anyLong())).thenReturn(pools);",
        "line": 1084,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateDiskOfferingTagsWithPrimaryStorageWithCorrectTagsTestSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "primaryDataStoreDao",
    "variableType": "PrimaryDataStoreDao",
    "mockedClass": "PrimaryDataStoreDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.configuration",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\configuration\\ConfigurationManagerTest.java",
      "className": "ConfigurationManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nPrimaryDataStoreDao primaryDataStoreDao;",
        "line": 197,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(primaryDataStoreDao.listStoragePoolsWithActiveVolumesByOfferingId(anyLong())).thenReturn(pools);",
        "line": 1054,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateDiskOfferingTagsWithPrimaryStorageTagsEqualNullTestThrowException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(primaryDataStoreDao.listStoragePoolsWithActiveVolumesByOfferingId(anyLong())).thenReturn(pools);",
        "line": 1069,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateDiskOfferingTagsWithPrimaryStorageMissingTagsTestThrowException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(primaryDataStoreDao.listStoragePoolsWithActiveVolumesByOfferingId(anyLong())).thenReturn(pools);",
        "line": 1084,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateDiskOfferingTagsWithPrimaryStorageWithCorrectTagsTestSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "poolDao",
    "variableType": "PrimaryDataStoreDao",
    "mockedClass": "PrimaryDataStoreDao",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.storage.listener",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\storage\\listener\\StoragePoolMonitorTest.java",
      "className": "StoragePoolMonitorTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private PrimaryDataStoreDao poolDao;",
        "line": 40,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "poolDao = Mockito.mock(PrimaryDataStoreDao.class);",
        "line": 49,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(poolDao.listBy(nullable(Long.class), nullable(Long.class), nullable(Long.class), Mockito.any(ScopeType.class))).thenReturn(Collections.singletonList(pool));",
        "line": 63,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessConnectStoragePoolNormal",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(poolDao.findZoneWideStoragePoolsByTags(Mockito.anyLong(), Mockito.any(String[].class))).thenReturn(Collections.<StoragePoolVO>emptyList());",
        "line": 64,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessConnectStoragePoolNormal",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(poolDao.findZoneWideStoragePoolsByHypervisor(Mockito.anyLong(), Mockito.any(Hypervisor.HypervisorType.class))).thenReturn(Collections.<StoragePoolVO>emptyList());",
        "line": 65,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessConnectStoragePoolNormal",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(poolDao.listBy(Mockito.anyLong(), Mockito.anyLong(), Mockito.anyLong(), Mockito.any(ScopeType.class))).thenReturn(Collections.singletonList(pool));",
        "line": 76,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessConnectStoragePoolFailureOnHost",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(poolDao.findZoneWideStoragePoolsByTags(Mockito.anyLong(), Mockito.any(String[].class))).thenReturn(Collections.<StoragePoolVO>emptyList());",
        "line": 77,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessConnectStoragePoolFailureOnHost",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(poolDao.findZoneWideStoragePoolsByHypervisor(Mockito.anyLong(), Mockito.any(Hypervisor.HypervisorType.class))).thenReturn(Collections.<StoragePoolVO>emptyList());",
        "line": 78,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testProcessConnectStoragePoolFailureOnHost",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
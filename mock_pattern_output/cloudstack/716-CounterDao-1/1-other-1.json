[
  {
    "variableName": "counterDao",
    "variableType": "CounterDao",
    "mockedClass": "CounterDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 @Before\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "com.cloud.network.as",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\as\\AutoScaleManagerImplTest.java",
      "className": "AutoScaleManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nCounterDao counterDao;",
        "line": 177,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(counterDao.persist(any(CounterVO.class))).thenReturn(counterMock);",
        "line": 403,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(counterDao.findById(anyLong())).thenReturn(counterMock);",
        "line": 404,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(counterDao).persist(Mockito.any());",
        "line": 434,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateCounterCmd",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(counterDao, never()).persist(Mockito.any());",
        "line": 447,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateCounterCmdWithInvalidSource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(counterDao, never()).persist(Mockito.any());",
        "line": 460,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateCounterCmdWithInvalidProvider",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(counterDao.listCounters(any(), any(), any(), any(), any(), any())).thenReturn(countersMock);",
        "line": 466,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testListCounters",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(counterDao.remove(counterId)).thenReturn(true);",
        "line": 485,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteCounter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(counterDao).remove(counterId);",
        "line": 490,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteCounter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(counterDao.findById(counterId)).thenReturn(null);",
        "line": 495,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteCounterInvalidCounter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(counterDao, never()).remove(counterId);",
        "line": 498,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteCounterInvalidCounter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(counterDao, never()).remove(counterId);",
        "line": 506,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDeleteCounterWithUsedCounter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(counterDao, never()).persist(Mockito.any());",
        "line": 533,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateConditionCmdWithInvalidOperator",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(counterDao, never()).persist(Mockito.any());",
        "line": 546,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateConditionCmdWithInvalidThreshold",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(counterDao.findById(counterId)).thenReturn(counterMock);",
        "line": 2141,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateCountersMapWithInstantDataForMemory",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(counterDao.findById(counterId)).thenReturn(counterMock);",
        "line": 2172,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateCountersMapWithInstantDataForCPU",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 21
  }
]
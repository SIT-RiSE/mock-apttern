[
  {
    "variableName": "_datacenterDao",
    "variableType": "DataCenterDao",
    "mockedClass": "DataCenterDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Declaration Attribute\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.globo.globodns.cloudstack.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\globodns\\src\\test\\java\\com\\globo\\globodns\\cloudstack\\element\\GloboDnsElementTest.java",
      "className": "GloboDnsElementTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "@Inject\r\nDataCenterDao _datacenterDao;",
        "line": 94,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Inject"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_datacenterDao.findById(zoneId)).thenReturn(mock(DataCenterVO.class));",
        "line": 142,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpperCaseCharactersAreNotAllowed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_datacenterDao.findById(zoneId)).thenReturn(dataCenterVO);",
        "line": 160,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrepareMethodCallGloboDnsToRegisterHostName",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_datacenterDao.findById(zoneId)).thenReturn(dataCenterVO);",
        "line": 193,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReleaseMethodCallResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 36
  },
  {
    "variableName": "_datacenterDao",
    "variableType": "DataCenterDao",
    "mockedClass": "DataCenterDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Declaration Attribute\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.globo.globodns.cloudstack.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\globodns\\src\\test\\java\\com\\globo\\globodns\\cloudstack\\element\\GloboDnsElementTest.java",
      "className": "GloboDnsElementTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "@Inject\r\nDataCenterDao _datacenterDao;",
        "line": 94,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Inject"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_datacenterDao.findById(zoneId)).thenReturn(mock(DataCenterVO.class));",
        "line": 142,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpperCaseCharactersAreNotAllowed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_datacenterDao.findById(zoneId)).thenReturn(dataCenterVO);",
        "line": 160,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrepareMethodCallGloboDnsToRegisterHostName",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_datacenterDao.findById(zoneId)).thenReturn(dataCenterVO);",
        "line": 193,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReleaseMethodCallResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 36
  },
  {
    "variableName": "_datacenterDao",
    "variableType": "DataCenterDao",
    "mockedClass": "DataCenterDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Declaration Attribute\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.globo.globodns.cloudstack.element",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\globodns\\src\\test\\java\\com\\globo\\globodns\\cloudstack\\element\\GloboDnsElementTest.java",
      "className": "GloboDnsElementTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "@Inject\r\nDataCenterDao _datacenterDao;",
        "line": 94,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Inject"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_datacenterDao.findById(zoneId)).thenReturn(mock(DataCenterVO.class));",
        "line": 142,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpperCaseCharactersAreNotAllowed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_datacenterDao.findById(zoneId)).thenReturn(dataCenterVO);",
        "line": 160,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPrepareMethodCallGloboDnsToRegisterHostName",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(_datacenterDao.findById(zoneId)).thenReturn(dataCenterVO);",
        "line": 193,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReleaseMethodCallResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 36
  },
  {
    "variableName": "_zoneDao",
    "variableType": "DataCenterDao",
    "mockedClass": "DataCenterDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\u2014 Other Methods\n\u2014 Helper Method\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.configuration",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\configuration\\ConfigurationManagerTest.java",
      "className": "ConfigurationManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nDataCenterDao _zoneDao;",
        "line": 169,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(configurationMgr._zoneDao.findById(anyLong())).thenReturn(dc);",
        "line": 333,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "runDedicatePublicIpRangePostiveTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(configurationMgr._zoneDao.findById(anyLong())).thenReturn(dc);",
        "line": 376,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "runDedicatePublicIpRangeDedicatedRange",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(configurationMgr._zoneDao.findById(anyLong())).thenReturn(dc);",
        "line": 402,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "runDedicatePublicIpRangeInvalidZone",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(configurationMgr._zoneDao.findById(anyLong())).thenReturn(dc);",
        "line": 427,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "runDedicatePublicIpRangeIPAddressAllocated",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.findById(Mockito.anyLong())).thenReturn(Mockito.mock(DataCenterVO.class));",
        "line": 1098,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvalidCreateDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.findById(Mockito.anyLong())).thenReturn(Mockito.mock(DataCenterVO.class));",
        "line": 1107,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWrongCreateDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.findById(Mockito.anyLong())).thenReturn(Mockito.mock(DataCenterVO.class));",
        "line": 1116,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConflictingCreateDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.findById(Mockito.anyLong())).thenReturn(Mockito.mock(DataCenterVO.class));",
        "line": 1130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.findById(Mockito.anyLong())).thenReturn(Mockito.mock(DataCenterVO.class));",
        "line": 1150,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testListDataCenterGuestIpv6Prefixes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.persist(Mockito.any(DataCenterVO.class))).thenAnswer((Answer<DataCenterVO>) invocation -> {\r\n    DataCenterVO zone = (DataCenterVO) invocation.getArguments()[0];\r\n    ReflectionTestUtils.setField(zone, \"uuid\", UUID.randomUUID().toString());\r\n    ReflectionTestUtils.setField(zone, \"id\", 1L);\r\n    return zone;\r\n});",
        "line": 1242,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockPersistDatacenterForCreateZone",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.findById(Mockito.anyLong())).thenReturn(zone);",
        "line": 1308,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testEditEdgeZone",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.update(Mockito.anyLong(), Mockito.any(DataCenterVO.class))).thenReturn(true);",
        "line": 1310,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testEditEdgeZone",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.findById(Mockito.anyLong())).thenReturn(zone);",
        "line": 1321,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testEdgeZoneCreatePod",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 45
  },
  {
    "variableName": "_zoneDao",
    "variableType": "DataCenterDao",
    "mockedClass": "DataCenterDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\u2014 Other Methods\n\u2014 Helper Method\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.configuration",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\configuration\\ConfigurationManagerTest.java",
      "className": "ConfigurationManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nDataCenterDao _zoneDao;",
        "line": 169,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(configurationMgr._zoneDao.findById(anyLong())).thenReturn(dc);",
        "line": 333,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "runDedicatePublicIpRangePostiveTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(configurationMgr._zoneDao.findById(anyLong())).thenReturn(dc);",
        "line": 376,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "runDedicatePublicIpRangeDedicatedRange",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(configurationMgr._zoneDao.findById(anyLong())).thenReturn(dc);",
        "line": 402,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "runDedicatePublicIpRangeInvalidZone",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(configurationMgr._zoneDao.findById(anyLong())).thenReturn(dc);",
        "line": 427,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "runDedicatePublicIpRangeIPAddressAllocated",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.findById(Mockito.anyLong())).thenReturn(Mockito.mock(DataCenterVO.class));",
        "line": 1098,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvalidCreateDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.findById(Mockito.anyLong())).thenReturn(Mockito.mock(DataCenterVO.class));",
        "line": 1107,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWrongCreateDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.findById(Mockito.anyLong())).thenReturn(Mockito.mock(DataCenterVO.class));",
        "line": 1116,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConflictingCreateDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.findById(Mockito.anyLong())).thenReturn(Mockito.mock(DataCenterVO.class));",
        "line": 1130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.findById(Mockito.anyLong())).thenReturn(Mockito.mock(DataCenterVO.class));",
        "line": 1150,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testListDataCenterGuestIpv6Prefixes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.persist(Mockito.any(DataCenterVO.class))).thenAnswer((Answer<DataCenterVO>) invocation -> {\r\n    DataCenterVO zone = (DataCenterVO) invocation.getArguments()[0];\r\n    ReflectionTestUtils.setField(zone, \"uuid\", UUID.randomUUID().toString());\r\n    ReflectionTestUtils.setField(zone, \"id\", 1L);\r\n    return zone;\r\n});",
        "line": 1242,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockPersistDatacenterForCreateZone",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.findById(Mockito.anyLong())).thenReturn(zone);",
        "line": 1308,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testEditEdgeZone",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.update(Mockito.anyLong(), Mockito.any(DataCenterVO.class))).thenReturn(true);",
        "line": 1310,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testEditEdgeZone",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.findById(Mockito.anyLong())).thenReturn(zone);",
        "line": 1321,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testEdgeZoneCreatePod",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 45
  },
  {
    "variableName": "_zoneDao",
    "variableType": "DataCenterDao",
    "mockedClass": "DataCenterDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\u2014 Other Methods\n\u2014 Helper Method\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.configuration",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\configuration\\ConfigurationManagerTest.java",
      "className": "ConfigurationManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nDataCenterDao _zoneDao;",
        "line": 169,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(configurationMgr._zoneDao.findById(anyLong())).thenReturn(dc);",
        "line": 333,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "runDedicatePublicIpRangePostiveTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(configurationMgr._zoneDao.findById(anyLong())).thenReturn(dc);",
        "line": 376,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "runDedicatePublicIpRangeDedicatedRange",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(configurationMgr._zoneDao.findById(anyLong())).thenReturn(dc);",
        "line": 402,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "runDedicatePublicIpRangeInvalidZone",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(configurationMgr._zoneDao.findById(anyLong())).thenReturn(dc);",
        "line": 427,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "runDedicatePublicIpRangeIPAddressAllocated",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.findById(Mockito.anyLong())).thenReturn(Mockito.mock(DataCenterVO.class));",
        "line": 1098,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvalidCreateDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.findById(Mockito.anyLong())).thenReturn(Mockito.mock(DataCenterVO.class));",
        "line": 1107,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWrongCreateDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.findById(Mockito.anyLong())).thenReturn(Mockito.mock(DataCenterVO.class));",
        "line": 1116,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConflictingCreateDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.findById(Mockito.anyLong())).thenReturn(Mockito.mock(DataCenterVO.class));",
        "line": 1130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCreateDataCenterGuestIpv6Prefix",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.findById(Mockito.anyLong())).thenReturn(Mockito.mock(DataCenterVO.class));",
        "line": 1150,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testListDataCenterGuestIpv6Prefixes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.persist(Mockito.any(DataCenterVO.class))).thenAnswer((Answer<DataCenterVO>) invocation -> {\r\n    DataCenterVO zone = (DataCenterVO) invocation.getArguments()[0];\r\n    ReflectionTestUtils.setField(zone, \"uuid\", UUID.randomUUID().toString());\r\n    ReflectionTestUtils.setField(zone, \"id\", 1L);\r\n    return zone;\r\n});",
        "line": 1242,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "mockPersistDatacenterForCreateZone",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.findById(Mockito.anyLong())).thenReturn(zone);",
        "line": 1308,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testEditEdgeZone",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.update(Mockito.anyLong(), Mockito.any(DataCenterVO.class))).thenReturn(true);",
        "line": 1310,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testEditEdgeZone",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(_zoneDao.findById(Mockito.anyLong())).thenReturn(zone);",
        "line": 1321,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testEdgeZoneCreatePod",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 45
  }
]
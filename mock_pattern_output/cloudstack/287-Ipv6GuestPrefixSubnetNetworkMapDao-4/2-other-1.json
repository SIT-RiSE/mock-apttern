[
  {
    "variableName": "ipv6GuestPrefixSubnetNetworkMapDao",
    "variableType": "Ipv6GuestPrefixSubnetNetworkMapDao",
    "mockedClass": "Ipv6GuestPrefixSubnetNetworkMapDao",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 @Before\n\u2014 Helper Method\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\Ipv6ServiceImplTest.java",
      "className": "Ipv6ServiceImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nIpv6GuestPrefixSubnetNetworkMapDao ipv6GuestPrefixSubnetNetworkMapDao;",
        "line": 109,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(ipv6GuestPrefixSubnetNetworkMapDao.update(Mockito.anyLong(), Mockito.any(Ipv6GuestPrefixSubnetNetworkMapVO.class))).thenAnswer((Answer<Boolean>) invocation -> {\r\n    Ipv6GuestPrefixSubnetNetworkMapVO map = (Ipv6GuestPrefixSubnetNetworkMapVO) invocation.getArguments()[1];\r\n    updatedPrefixSubnetMap.add(map);\r\n    return true;\r\n});",
        "line": 158,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(ipv6GuestPrefixSubnetNetworkMapDao.persist(Mockito.any(Ipv6GuestPrefixSubnetNetworkMapVO.class))).thenAnswer((Answer<Ipv6GuestPrefixSubnetNetworkMapVO>) invocation -> {\r\n    Ipv6GuestPrefixSubnetNetworkMapVO map = (Ipv6GuestPrefixSubnetNetworkMapVO) invocation.getArguments()[0];\r\n    persistedPrefixSubnetMap.add(map);\r\n    return map;\r\n});",
        "line": 163,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@Before"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(ipv6GuestPrefixSubnetNetworkMapDao.listUsedByPrefix(prefixId)).thenReturn(subnets);",
        "line": 182,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "prepareMocksForIpv6Subnet",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(ipv6GuestPrefixSubnetNetworkMapDao.findFirstAvailable(prefix.getId())).thenReturn(ipv6GuestPrefixSubnetNetworkMap);",
        "line": 240,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExistingPreAllocateIpv6SubnetForNetwork",
          "methodAnnotations": [
            "@Test",
            "@DB"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(ipv6GuestPrefixSubnetNetworkMapDao.findFirstAvailable(prefix.getId())).thenReturn(null);",
        "line": 271,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNewPreAllocateIpv6SubnetForNetwork",
          "methodAnnotations": [
            "@Test",
            "@DB"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(ipv6GuestPrefixSubnetNetworkMapDao.listUsedByPrefix(prefix.getId())).thenReturn(new ArrayList<>());",
        "line": 272,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNewPreAllocateIpv6SubnetForNetwork",
          "methodAnnotations": [
            "@Test",
            "@DB"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(ipv6GuestPrefixSubnetNetworkMapDao.listUsedByPrefix(prefix.getId())).thenReturn(usedSubnets);",
        "line": 292,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNewPreAllocateIpv6SubnetForNetwork",
          "methodAnnotations": [
            "@Test",
            "@DB"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(ipv6GuestPrefixSubnetNetworkMapDao.findBySubnet(subnet)).thenReturn(allocatingMap);",
        "line": 327,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAssignIpv6SubnetToNetwork",
          "methodAnnotations": [
            "@Test",
            "@DB"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(ipv6GuestPrefixSubnetNetworkMapDao.createForUpdate(Mockito.anyLong())).thenReturn(allocatingMap);",
        "line": 328,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAssignIpv6SubnetToNetwork",
          "methodAnnotations": [
            "@Test",
            "@DB"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(ipv6GuestPrefixSubnetNetworkMapDao.findByNetworkId(networkId)).thenReturn(allocatingMap);",
        "line": 347,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReleaseIpv6SubnetForNetwork",
          "methodAnnotations": [
            "@Test",
            "@DB"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(ipv6GuestPrefixSubnetNetworkMapDao.createForUpdate(Mockito.anyLong())).thenReturn(allocatingMap);",
        "line": 348,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReleaseIpv6SubnetForNetwork",
          "methodAnnotations": [
            "@Test",
            "@DB"
          ]
        }
      }
    ],
    "pattern_id": 64
  }
]
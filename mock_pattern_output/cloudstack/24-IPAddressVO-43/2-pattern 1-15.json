[
  {
    "variableName": "ipVoSpy",
    "variableType": "IPAddressVO",
    "mockedClass": "IPAddressVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.engine.orchestration",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\engine\\orchestration\\src\\test\\java\\org\\apache\\cloudstack\\engine\\orchestration\\NetworkOrchestratorTest.java",
      "className": "NetworkOrchestratorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "IPAddressVO ipVoSpy = Mockito.spy(new IPAddressVO(new Ip(\"192.168.100.100\"), 0l, 0l, 0l, true));",
        "line": 366,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "configureTestConfigureNicProfileBasedOnRequestedIpTests",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(ipVoSpy.getId()).thenReturn(ipvoId);",
        "line": 372,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "configureTestConfigureNicProfileBasedOnRequestedIpTests",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(ipVoSpy.getState()).thenReturn(state);",
        "line": 373,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "configureTestConfigureNicProfileBasedOnRequestedIpTests",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "address",
    "variableType": "IPAddressVO",
    "mockedClass": "IPAddressVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.kubernetes.cluster.actionworkers",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\integrations\\kubernetes-service\\src\\test\\java\\com\\cloud\\kubernetes\\cluster\\actionworkers\\KubernetesClusterActionWorkerTest.java",
      "className": "KubernetesClusterActionWorkerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "IPAddressVO address = Mockito.mock(IPAddressVO.class);",
        "line": 117,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetVpcTierKubernetesPublicIpDifferentVpc",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(address.getVpcId()).thenReturn(2L);",
        "line": 118,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetVpcTierKubernetesPublicIpDifferentVpc",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "address",
    "variableType": "IPAddressVO",
    "mockedClass": "IPAddressVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.kubernetes.cluster.actionworkers",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\integrations\\kubernetes-service\\src\\test\\java\\com\\cloud\\kubernetes\\cluster\\actionworkers\\KubernetesClusterActionWorkerTest.java",
      "className": "KubernetesClusterActionWorkerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "IPAddressVO address = Mockito.mock(IPAddressVO.class);",
        "line": 127,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetVpcTierKubernetesPublicIpValid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(address.getVpcId()).thenReturn(DEFAULT_ID);",
        "line": 128,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetVpcTierKubernetesPublicIpValid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "ipAddrMock",
    "variableType": "IPAddressVO",
    "mockedClass": "IPAddressVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.lb",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\elastic-loadbalancer\\src\\test\\java\\com\\cloud\\network\\lb\\LoadBalanceRuleHandlerTest.java",
      "className": "LoadBalanceRuleHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "IPAddressVO ipAddrMock = mock(IPAddressVO.class);",
        "line": 198,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFindElbVmWithCapacityWhenThereAreUnusedElbVmsAndOneMatchesThePodId",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(ipAddrMock.getVlanId()).thenReturn(podId);",
        "line": 199,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFindElbVmWithCapacityWhenThereAreUnusedElbVmsAndOneMatchesThePodId",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "ipAddressVO",
    "variableType": "IPAddressVO",
    "mockedClass": "IPAddressVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenElementTest.java",
      "className": "TungstenElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "IPAddressVO ipAddressVO = mock(IPAddressVO.class);",
        "line": 344,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyLBRulesAddRuleSuccessTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(ipAddressVO.getAddress()).thenReturn(ip);",
        "line": 370,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyLBRulesAddRuleSuccessTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "ipAddressVO",
    "variableType": "IPAddressVO",
    "mockedClass": "IPAddressVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenElementTest.java",
      "className": "TungstenElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "IPAddressVO ipAddressVO = mock(IPAddressVO.class);",
        "line": 408,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyLBRulesAddRuleFailTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(ipAddressVO.getAddress()).thenReturn(ip);",
        "line": 428,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyLBRulesAddRuleFailTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "ipAddressVO",
    "variableType": "IPAddressVO",
    "mockedClass": "IPAddressVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenElementTest.java",
      "className": "TungstenElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "IPAddressVO ipAddressVO = mock(IPAddressVO.class);",
        "line": 454,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyLBRulesRevokeRuleFailTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(ipAddressVO.getAddress()).thenReturn(ip1);",
        "line": 467,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyLBRulesRevokeRuleFailTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "ipAddressVO",
    "variableType": "IPAddressVO",
    "mockedClass": "IPAddressVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenElementTest.java",
      "className": "TungstenElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "IPAddressVO ipAddressVO = mock(IPAddressVO.class);",
        "line": 486,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyLBRulesRevokeRuleSuccessTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(ipAddressVO.getAddress()).thenReturn(ip);",
        "line": 500,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyLBRulesRevokeRuleSuccessTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "ipAddressVO",
    "variableType": "IPAddressVO",
    "mockedClass": "IPAddressVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenElementTest.java",
      "className": "TungstenElementTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "IPAddressVO ipAddressVO = mock(IPAddressVO.class);",
        "line": 943,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesWithAddIngressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(ipAddressVO.getAddress()).thenReturn(ip);",
        "line": 951,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyFWRulesWithAddIngressRuleTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "ipAddressVO",
    "variableType": "IPAddressVO",
    "mockedClass": "IPAddressVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenServiceImplTest.java",
      "className": "TungstenServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "IPAddressVO ipAddressVO = mock(IPAddressVO.class);",
        "line": 316,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "createTungstenFloatingIpTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(ipAddressVO.getAddress()).thenReturn(ip);",
        "line": 324,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "createTungstenFloatingIpTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "ipAddressVO",
    "variableType": "IPAddressVO",
    "mockedClass": "IPAddressVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.cloudstack.network.tungsten.service",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\plugins\\network-elements\\tungsten\\src\\test\\java\\org\\apache\\cloudstack\\network\\tungsten\\service\\TungstenServiceImplTest.java",
      "className": "TungstenServiceImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "IPAddressVO ipAddressVO = mock(IPAddressVO.class);",
        "line": 683,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateLoadBalancerTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(ipAddressVO.getAddress()).thenReturn(ip);",
        "line": 717,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateLoadBalancerTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "vo",
    "variableType": "IPAddressVO",
    "mockedClass": "IPAddressVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\IpAddressManagerTest.java",
      "className": "IpAddressManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "IPAddressVO vo = mock(IPAddressVO.class);",
        "line": 100,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetStaticNatSourceIps",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "lenient().when(vo.getAddress()).thenReturn(new Ip(publicIpAddress));",
        "line": 101,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetStaticNatSourceIps",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "lenient().when(vo.getId()).thenReturn(1l);",
        "line": 102,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetStaticNatSourceIps",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "ipVo",
    "variableType": "IPAddressVO",
    "mockedClass": "IPAddressVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\Ipv6AddressManagerTest.java",
      "className": "Ipv6AddressManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "IPAddressVO ipVo = Mockito.mock(IPAddressVO.class);",
        "line": 226,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setAcquireGuestIpv6AddressTest",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(ipVo.getState()).thenReturn(state);",
        "line": 229,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setAcquireGuestIpv6AddressTest",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "ipAddressVO",
    "variableType": "IPAddressVO",
    "mockedClass": "IPAddressVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.network.vpc",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\vpc\\VpcManagerImplTest.java",
      "className": "VpcManagerImplTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "IPAddressVO ipAddressVO = Mockito.mock(IPAddressVO.class);",
        "line": 367,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVpcNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(ipAddressVO.getAddress()).thenReturn(Mockito.mock(Ip.class));",
        "line": 368,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVpcNetwork",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "newIp",
    "variableType": "IPAddressVO",
    "mockedClass": "IPAddressVO",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "com.cloud.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\vm\\UserVmManagerTest.java",
      "className": "UserVmManagerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "IPAddressVO newIp = mock(IPAddressVO.class);",
        "line": 621,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVmNicIpSuccess2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(newIp.getVlanId()).thenReturn(1L);",
        "line": 622,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUpdateVmNicIpSuccess2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
[
  {
    "variableName": "accountManagerMock",
    "variableType": "AccountManager",
    "mockedClass": "AccountManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "com.cloud.api.dispatch",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\api\\dispatch\\ParamProcessWorkerTest.java",
      "className": "ParamProcessWorkerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate AccountManager accountManagerMock;",
        "line": 61,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(accountManagerMock).checkAccess(callingAccountMock, null, false, owners);",
        "line": 144,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doAccessChecksTestChecksCallerAccessToOwnerWhenCmdExtendsBaseAsyncCreateCmd",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(accountManagerMock).checkAccess(callingAccountMock, null, false, owners);",
        "line": 185,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkCallerAccessToEntitiesTestChecksCallerAccessToOwners",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(accountManagerMock).validateAccountHasAccessToResource(callingAccountMock, SecurityChecker.AccessType.UseEntry, vmInstanceVo);",
        "line": 195,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkCallerAccessToEntitiesTestChecksCallerAccessToResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 9
  },
  {
    "variableName": "accountManagerMock",
    "variableType": "AccountManager",
    "mockedClass": "AccountManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "com.cloud.api.dispatch",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\api\\dispatch\\ParamProcessWorkerTest.java",
      "className": "ParamProcessWorkerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate AccountManager accountManagerMock;",
        "line": 61,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(accountManagerMock).checkAccess(callingAccountMock, null, false, owners);",
        "line": 144,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doAccessChecksTestChecksCallerAccessToOwnerWhenCmdExtendsBaseAsyncCreateCmd",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(accountManagerMock).checkAccess(callingAccountMock, null, false, owners);",
        "line": 185,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkCallerAccessToEntitiesTestChecksCallerAccessToOwners",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(accountManagerMock).validateAccountHasAccessToResource(callingAccountMock, SecurityChecker.AccessType.UseEntry, vmInstanceVo);",
        "line": 195,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "checkCallerAccessToEntitiesTestChecksCallerAccessToResource",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 9
  },
  {
    "variableName": "accountManagerMock",
    "variableType": "AccountManager",
    "mockedClass": "AccountManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "com.cloud.network.vpc",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\network\\vpc\\NetworkACLServiceImplTest.java",
      "className": "NetworkACLServiceImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate AccountManager accountManagerMock;",
        "line": 85,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(accountManagerMock).checkAccess(Mockito.any(Account.class), Mockito.isNull(AccessType.class), Mockito.eq(true), Mockito.any(Vpc.class));",
        "line": 423,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateNetworkAclTestAclNotDefaulWithVpc",
          "methodAnnotations": [
            "@Test",
            "@PrepareForTest"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "inOrder.verify(accountManagerMock).checkAccess(Mockito.any(Account.class), Mockito.isNull(AccessType.class), Mockito.eq(true), nullable(Vpc.class));",
        "line": 887,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateNetworkACLTestParametersNotNull",
          "methodAnnotations": [
            "@Test",
            "@PrepareForTest"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "inOrder.verify(accountManagerMock).checkAccess(any(Account.class), isNull(), eq(true), nullable(Vpc.class));",
        "line": 1087,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "updateNetworkACLTestParametersWithNullValues",
          "methodAnnotations": [
            "@Test",
            "@PrepareForTest"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(accountManagerMock).checkAccess(Mockito.any(Account.class), Mockito.isNull(AccessType.class), Mockito.eq(true), Mockito.any(Vpc.class));",
        "line": 1118,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateMoveAclRulesDataTestSuccesfullExecution",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 9
  },
  {
    "variableName": "accountManagerMock",
    "variableType": "AccountManager",
    "mockedClass": "AccountManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "com.cloud.storage",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\storage\\VolumeApiServiceImplTest.java",
      "className": "VolumeApiServiceImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate AccountManager accountManagerMock;",
        "line": 146,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(accountManagerMock).checkAccess(accountMock, null, true, volumeVoMock);",
        "line": 843,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "retrieveAndValidateVolumeTest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 9
  },
  {
    "variableName": "accountManager",
    "variableType": "AccountManager",
    "mockedClass": "AccountManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "com.cloud.vm",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\com\\cloud\\vm\\UserVmManagerImplTest.java",
      "className": "UserVmManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate AccountManager accountManager;",
        "line": 142,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(accountManager).checkAccess(callerAccount, null, true, userVmVoMock);",
        "line": 288,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "validateInputsAndPermissionForUpdateVirtualMachineCommandTest",
          "methodAnnotations": [
            "@Test",
            "@PrepareForTest"
          ]
        }
      }
    ],
    "pattern_id": 9
  },
  {
    "variableName": "accountManagerMock",
    "variableType": "AccountManager",
    "mockedClass": "AccountManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.apache.cloudstack.acl",
      "filePath": "C:\\java tool\\Apache\\cloudstack\\server\\src\\test\\java\\org\\apache\\cloudstack\\acl\\RoleManagerImplTest.java",
      "className": "RoleManagerImplTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate AccountManager accountManagerMock;",
        "line": 45,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(accountManagerMock).isRootAdmin(accountMockId);",
        "line": 100,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "findRoleTestNotRootAdminAndNotRoleAdminType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(accountManagerMock).isRootAdmin(accountMockId);",
        "line": 113,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "findRoleTestRootAdminAndNotRoleAdminType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(accountManagerMock).isRootAdmin(accountMockId);",
        "line": 126,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "findRoleTestRootAdminAndRoleAdminType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(accountManagerMock).isRootAdmin(accountMockId);",
        "line": 139,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "findRoleTestNotRootAdminAndRoleAdminType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(accountManagerMock, Mockito.times(0)).isRootAdmin(Mockito.anyLong());",
        "line": 230,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "findRolesByTypeTestNullRoleType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(accountManagerMock, Mockito.times(1)).isRootAdmin(Mockito.anyLong());",
        "line": 241,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "findRolesByTypeTestAdminRoleNonRootAdminUser",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(accountManagerMock, Mockito.times(1)).isRootAdmin(Mockito.anyLong());",
        "line": 257,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "findRolesByTypeTestAdminRoleRootAdminUser",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(accountManagerMock, Mockito.times(0)).isRootAdmin(Mockito.anyLong());",
        "line": 272,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "findRolesByTypeTestNonAdminRoleRootAdminUser",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 9
  }
]
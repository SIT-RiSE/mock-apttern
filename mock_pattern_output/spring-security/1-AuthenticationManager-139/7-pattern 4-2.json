[
  {
    "variableName": "delegate",
    "variableType": "AuthenticationManager",
    "mockedClass": "AuthenticationManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\authentication\\ReactiveAuthenticationManagerAdapterTests.java",
      "className": "ReactiveAuthenticationManagerAdapterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nAuthenticationManager delegate;",
        "line": 41,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.delegate.authenticate(any())).willReturn(this.authentication);",
        "line": 66,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenSuccessThenSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.delegate.authenticate(any())).willReturn(this.authentication);",
        "line": 74,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenReturnNotAuthenticatedThenError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.delegate.authenticate(any())).willThrow(new BadCredentialsException(\"Failed\"));",
        "line": 81,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenBadCredentialsThenError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "authenticationManager",
    "variableType": "AuthenticationManager",
    "mockedClass": "AuthenticationManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.saml2.provider.service.web.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\saml2\\saml2-service-provider\\src\\test\\java\\org\\springframework\\security\\saml2\\provider\\service\\web\\authentication\\Saml2WebSsoAuthenticationFilterTests.java",
      "className": "Saml2WebSsoAuthenticationFilterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private AuthenticationManager authenticationManager = mock(AuthenticationManager.class);",
        "line": 66,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationManager.authenticate(authentication)).willReturn(authentication);",
        "line": 193,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenPathStartsWithRegistrationIdThenAuthenticates",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
[
  {
    "variableName": "authman",
    "variableType": "AuthenticationManager",
    "mockedClass": "AuthenticationManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in @Before\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.access.intercept.method",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\access\\intercept\\method\\MethodInvocationPrivilegeEvaluatorTests.java",
      "className": "MethodInvocationPrivilegeEvaluatorTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "AuthenticationManager authman = mock(AuthenticationManager.class);",
        "line": 70,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      }
    ],
    "pattern_id": 18
  },
  {
    "variableName": "authenticationManager",
    "variableType": "AuthenticationManager",
    "mockedClass": "AuthenticationManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case\n\u2014 Other Methods",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.server.resource.web.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-resource-server\\src\\test\\java\\org\\springframework\\security\\oauth2\\server\\resource\\web\\authentication\\BearerTokenAuthenticationFilterTests.java",
      "className": "BearerTokenAuthenticationFilterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nAuthenticationManager authenticationManager;",
        "line": 78,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.authenticationManager).authenticate(captor.capture());",
        "line": 111,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenBearerTokenPresentThenAuthenticates",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationManager.authenticate(any())).willReturn(expectedAuthentication);",
        "line": 123,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenSecurityContextRepositoryThenSaves",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.authenticationManager).authenticate(captor.capture());",
        "line": 130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenSecurityContextRepositoryThenSaves",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.authenticationManager).authenticate(captor.capture());",
        "line": 146,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenUsingAuthenticationManagerResolverThenAuthenticates",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationManager.authenticate(any(BearerTokenAuthenticationToken.class))).willThrow(exception);",
        "line": 175,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenAuthenticationFailsWithDefaultHandlerThenPropagatesError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationManager.authenticate(any(BearerTokenAuthenticationToken.class))).willThrow(exception);",
        "line": 189,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenAuthenticationFailsWithCustomHandlerThenPropagatesError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationManager.authenticate(any())).willThrow(exception);",
        "line": 201,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenAuthenticationServiceExceptionThenRethrows",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationManager.authenticate(any())).willThrow(exception);",
        "line": 212,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenCustomEntryPointAndAuthenticationErrorThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(this.authenticationManager);",
        "line": 301,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "dontAuthenticate",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 74
  },
  {
    "variableName": "am",
    "variableType": "AuthenticationManager",
    "mockedClass": "AuthenticationManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Other Methods\n\nStubbing:\n\u2014 Other Methods\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.web.authentication.preauth",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\authentication\\preauth\\AbstractPreAuthenticatedProcessingFilterTests.java",
      "className": "AbstractPreAuthenticatedProcessingFilterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "AuthenticationManager am = mock(AuthenticationManager.class);",
        "line": 401,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "getFilter",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(am.authenticate(any(Authentication.class))).willThrow(new BadCredentialsException(\"\"));",
        "line": 403,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "getFilter",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(am.authenticate(any(Authentication.class))).willAnswer((Answer<Authentication>) (invocation) -> (Authentication) invocation.getArguments()[0]);",
        "line": 406,
        "locate": "Other Methods",
        "locationContext": {
          "methodName": "getFilter",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 20
  }
]
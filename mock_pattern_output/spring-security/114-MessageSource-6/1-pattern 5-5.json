[
  {
    "variableName": "source",
    "variableType": "MessageSource",
    "mockedClass": "MessageSource",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\authentication\\UserDetailsRepositoryReactiveAuthenticationManagerTests.java",
      "className": "UserDetailsRepositoryReactiveAuthenticationManagerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "MessageSource source = mock(MessageSource.class);",
        "line": 269,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setMessageSourceWhenNotNullThenCanGet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(source).getMessage(eq(code), any(), any());",
        "line": 273,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setMessageSourceWhenNotNullThenCanGet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "source",
    "variableType": "MessageSource",
    "mockedClass": "MessageSource",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.core.userdetails.jdbc",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\core\\userdetails\\jdbc\\JdbcDaoImplTests.java",
      "className": "JdbcDaoImplTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "MessageSource source = mock(MessageSource.class);",
        "line": 167,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setMessageSourceWhenNotNullThenCanGet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(source).getMessage(eq(code), any(), any());",
        "line": 172,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setMessageSourceWhenNotNullThenCanGet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "source",
    "variableType": "MessageSource",
    "mockedClass": "MessageSource",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.access",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\access\\ExceptionTranslationFilterTests.java",
      "className": "ExceptionTranslationFilterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "MessageSource source = mock(MessageSource.class);",
        "line": 288,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setMessageSourceWhenNotNullThenCanGet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(source).getMessage(eq(code), any(), any());",
        "line": 293,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setMessageSourceWhenNotNullThenCanGet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "source",
    "variableType": "MessageSource",
    "mockedClass": "MessageSource",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.authentication.preauth.x509",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\authentication\\preauth\\x509\\SubjectDnX509PrincipalExtractorTests.java",
      "className": "SubjectDnX509PrincipalExtractorTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "MessageSource source = mock(MessageSource.class);",
        "line": 84,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setMessageSourceWhenNotNullThenCanGet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(source).getMessage(eq(code), any(), any());",
        "line": 88,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setMessageSourceWhenNotNullThenCanGet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "source",
    "variableType": "MessageSource",
    "mockedClass": "MessageSource",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.authentication.rememberme",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\authentication\\rememberme\\AbstractRememberMeServicesTests.java",
      "className": "AbstractRememberMeServicesTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "MessageSource source = mock(MessageSource.class);",
        "line": 397,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setMessageSourceWhenNotNullThenCanGet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(source).getMessage(eq(code), any(), any());",
        "line": 402,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setMessageSourceWhenNotNullThenCanGet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  }
]
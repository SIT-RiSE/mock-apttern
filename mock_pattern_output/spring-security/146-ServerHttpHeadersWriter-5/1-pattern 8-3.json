[
  {
    "variableName": "writer2",
    "variableType": "ServerHttpHeadersWriter",
    "mockedClass": "ServerHttpHeadersWriter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.server.header",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\header\\CompositeServerHttpHeadersWriterTests.java",
      "className": "CompositeServerHttpHeadersWriterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nServerHttpHeadersWriter writer2;",
        "line": 51,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.writer2.writeHttpHeaders(this.exchange)).willReturn(Mono.empty());",
        "line": 82,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "writeHttpHeadersWhenNoErrorThenNoError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.writer2).writeHttpHeaders(this.exchange);",
        "line": 86,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "writeHttpHeadersWhenNoErrorThenNoError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "writer1",
    "variableType": "ServerHttpHeadersWriter",
    "mockedClass": "ServerHttpHeadersWriter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.server.header",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\header\\CompositeServerHttpHeadersWriterTests.java",
      "className": "CompositeServerHttpHeadersWriterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nServerHttpHeadersWriter writer1;",
        "line": 48,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.writer1.writeHttpHeaders(this.exchange)).willReturn(Mono.error(new RuntimeException()));",
        "line": 65,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "writeHttpHeadersWhenErrorNoErrorThenError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.writer1).writeHttpHeaders(this.exchange);",
        "line": 68,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "writeHttpHeadersWhenErrorNoErrorThenError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.writer1.writeHttpHeaders(this.exchange)).willReturn(Mono.error(new RuntimeException()));",
        "line": 73,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "writeHttpHeadersWhenErrorErrorThenError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.writer1).writeHttpHeaders(this.exchange);",
        "line": 76,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "writeHttpHeadersWhenErrorErrorThenError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.writer1.writeHttpHeaders(this.exchange)).willReturn(Mono.empty());",
        "line": 81,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "writeHttpHeadersWhenNoErrorThenNoError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.writer1).writeHttpHeaders(this.exchange);",
        "line": 85,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "writeHttpHeadersWhenNoErrorThenNoError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "delegate",
    "variableType": "ServerHttpHeadersWriter",
    "mockedClass": "ServerHttpHeadersWriter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.server.header",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\header\\ServerWebExchangeDelegatingServerHttpHeadersWriterTests.java",
      "className": "ServerWebExchangeDelegatingServerHttpHeadersWriterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ServerHttpHeadersWriter delegate;",
        "line": 48,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.delegate.writeHttpHeaders(this.exchange)).willReturn(Mono.empty());",
        "line": 102,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "writeHeadersWhenMatchThenDelegateWriteHttpHeaders",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.delegate).writeHttpHeaders(this.exchange);",
        "line": 104,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "writeHeadersWhenMatchThenDelegateWriteHttpHeaders",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.delegate, times(0)).writeHttpHeaders(this.exchange);",
        "line": 112,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "writeHeadersWhenNoMatchThenDelegateNotCalled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  }
]
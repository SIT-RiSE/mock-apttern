[
  {
    "variableName": "cache",
    "variableType": "Cache",
    "mockedClass": "Cache",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.jwt",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-jose\\src\\test\\java\\org\\springframework\\security\\oauth2\\jwt\\NimbusJwtDecoderTests.java",
      "className": "NimbusJwtDecoderTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Cache cache = mock(Cache.class);",
        "line": 705,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "decodeWhenCacheThenRetrieveFromCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(cache.get(eq(JWK_SET_URI), eq(String.class))).willReturn(JWK_SET);",
        "line": 706,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "decodeWhenCacheThenRetrieveFromCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(cache.get(eq(JWK_SET_URI))).willReturn(mock(Cache.ValueWrapper.class));",
        "line": 707,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "decodeWhenCacheThenRetrieveFromCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(cache).get(eq(JWK_SET_URI), eq(String.class));",
        "line": 715,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "decodeWhenCacheThenRetrieveFromCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(cache, times(2)).get(eq(JWK_SET_URI));",
        "line": 716,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "decodeWhenCacheThenRetrieveFromCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(cache);",
        "line": 717,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "decodeWhenCacheThenRetrieveFromCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "cache",
    "variableType": "Cache",
    "mockedClass": "Cache",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.jwt",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-jose\\src\\test\\java\\org\\springframework\\security\\oauth2\\jwt\\NimbusJwtDecoderTests.java",
      "className": "NimbusJwtDecoderTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Cache cache = mock(Cache.class);",
        "line": 797,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "decodeWhenCacheIsConfiguredAndParseFailsOnCachedValueThenExceptionIgnored",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(cache.get(eq(JWK_SET_URI), eq(String.class))).willReturn(JWK_SET);",
        "line": 798,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "decodeWhenCacheIsConfiguredAndParseFailsOnCachedValueThenExceptionIgnored",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(cache.get(eq(JWK_SET_URI))).willReturn(mock(Cache.ValueWrapper.class));",
        "line": 799,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "decodeWhenCacheIsConfiguredAndParseFailsOnCachedValueThenExceptionIgnored",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(cache).get(eq(JWK_SET_URI), eq(String.class));",
        "line": 807,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "decodeWhenCacheIsConfiguredAndParseFailsOnCachedValueThenExceptionIgnored",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(cache, times(2)).get(eq(JWK_SET_URI));",
        "line": 808,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "decodeWhenCacheIsConfiguredAndParseFailsOnCachedValueThenExceptionIgnored",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(cache);",
        "line": 809,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "decodeWhenCacheIsConfiguredAndParseFailsOnCachedValueThenExceptionIgnored",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  }
]
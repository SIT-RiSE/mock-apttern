[
  {
    "variableName": "securityContextHolderStrategy",
    "variableType": "SecurityContextHolderStrategy",
    "mockedClass": "SecurityContextHolderStrategy",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.acls.jdbc",
      "filePath": "C:\\java tool\\Spring\\spring-security\\acl\\src\\test\\java\\org\\springframework\\security\\acls\\jdbc\\JdbcMutableAclServiceTests.java",
      "className": "JdbcMutableAclServiceTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextHolderStrategy securityContextHolderStrategy = mock(SecurityContextHolderStrategy.class);",
        "line": 361,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "createAclWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test",
            "@Transactional"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(securityContextHolderStrategy.getContext()).willReturn(context);",
        "line": 363,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "createAclWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test",
            "@Transactional"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(securityContextHolderStrategy).getContext();",
        "line": 368,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "createAclWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test",
            "@Transactional"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "securityContextRepository",
    "variableType": "SecurityContextHolderStrategy",
    "mockedClass": "SecurityContextHolderStrategy",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.cas.web",
      "filePath": "C:\\java tool\\Spring\\spring-security\\cas\\src\\test\\java\\org\\springframework\\security\\cas\\web\\CasAuthenticationFilterTests.java",
      "className": "CasAuthenticationFilterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextHolderStrategy securityContextRepository = mock(SecurityContextHolderStrategy.class);",
        "line": 260,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "successfulAuthenticationWhenSecurityContextHolderStrategySetThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(securityContextRepository.createEmptyContext()).willReturn(new SecurityContextImpl());",
        "line": 261,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "successfulAuthenticationWhenSecurityContextHolderStrategySetThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(securityContextRepository).setContext(any(SecurityContext.class));",
        "line": 266,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "successfulAuthenticationWhenSecurityContextHolderStrategySetThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "strategy",
    "variableType": "SecurityContextHolderStrategy",
    "mockedClass": "SecurityContextHolderStrategy",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.provisioning",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\provisioning\\InMemoryUserDetailsManagerTests.java",
      "className": "InMemoryUserDetailsManagerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextHolderStrategy strategy = mock(SecurityContextHolderStrategy.class);",
        "line": 107,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "changePasswordWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(strategy.getContext()).willReturn(new SecurityContextImpl(authentication));",
        "line": 108,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "changePasswordWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(strategy).getContext();",
        "line": 111,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "changePasswordWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "strategy",
    "variableType": "SecurityContextHolderStrategy",
    "mockedClass": "SecurityContextHolderStrategy",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.provisioning",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\provisioning\\JdbcUserDetailsManagerTests.java",
      "className": "JdbcUserDetailsManagerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextHolderStrategy strategy = mock(SecurityContextHolderStrategy.class);",
        "line": 215,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "changePasswordWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(strategy.getContext()).willReturn(new SecurityContextImpl(authentication));",
        "line": 216,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "changePasswordWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(strategy.createEmptyContext()).willReturn(new SecurityContextImpl());",
        "line": 217,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "changePasswordWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(strategy).getContext();",
        "line": 220,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "changePasswordWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "strategy",
    "variableType": "SecurityContextHolderStrategy",
    "mockedClass": "SecurityContextHolderStrategy",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.data.repository.query",
      "filePath": "C:\\java tool\\Spring\\spring-security\\data\\src\\test\\java\\org\\springframework\\security\\data\\repository\\query\\SecurityEvaluationContextExtensionTests.java",
      "className": "SecurityEvaluationContextExtensionTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextHolderStrategy strategy = mock(SecurityContextHolderStrategy.class);",
        "line": 70,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getRootObjectUseSecurityContextHolderStrategy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(strategy.getContext()).willReturn(new SecurityContextImpl(authentication));",
        "line": 71,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getRootObjectUseSecurityContextHolderStrategy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(strategy).getContext();",
        "line": 74,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getRootObjectUseSecurityContextHolderStrategy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "strategy",
    "variableType": "SecurityContextHolderStrategy",
    "mockedClass": "SecurityContextHolderStrategy",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.ldap.userdetails",
      "filePath": "C:\\java tool\\Spring\\spring-security\\ldap\\src\\integration-test\\java\\org\\springframework\\security\\ldap\\userdetails\\LdapUserDetailsManagerTests.java",
      "className": "LdapUserDetailsManagerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextHolderStrategy strategy = mock(SecurityContextHolderStrategy.class);",
        "line": 225,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordChangeUsesCustomSecurityContextHolderStrategy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(strategy.getContext()).willReturn(new SecurityContextImpl(UsernamePasswordAuthenticationToken.authenticated(\"johnyossarian\", \"yossarianspassword\", TEST_AUTHORITIES)));",
        "line": 226,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordChangeUsesCustomSecurityContextHolderStrategy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(strategy).getContext();",
        "line": 234,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordChangeUsesCustomSecurityContextHolderStrategy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "strategy",
    "variableType": "SecurityContextHolderStrategy",
    "mockedClass": "SecurityContextHolderStrategy",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.ldap",
      "filePath": "C:\\java tool\\Spring\\spring-security\\ldap\\src\\test\\java\\org\\springframework\\security\\ldap\\SpringSecurityAuthenticationSourceTests.java",
      "className": "SpringSecurityAuthenticationSourceTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextHolderStrategy strategy = mock(SecurityContextHolderStrategy.class);",
        "line": 97,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getPrincipalWhenCustomSecurityContextHolderStrategyThenExpectedPrincipalIsReturned",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(strategy.getContext()).willReturn(new SecurityContextImpl(new TestingAuthenticationToken(user.createUserDetails(), null)));",
        "line": 98,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getPrincipalWhenCustomSecurityContextHolderStrategyThenExpectedPrincipalIsReturned",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(strategy).getContext();",
        "line": 103,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getPrincipalWhenCustomSecurityContextHolderStrategyThenExpectedPrincipalIsReturned",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "strategy",
    "variableType": "SecurityContextHolderStrategy",
    "mockedClass": "SecurityContextHolderStrategy",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.client.web.method.annotation",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-client\\src\\test\\java\\org\\springframework\\security\\oauth2\\client\\web\\method\\annotation\\OAuth2AuthorizedClientArgumentResolverTests.java",
      "className": "OAuth2AuthorizedClientArgumentResolverTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextHolderStrategy strategy = mock(SecurityContextHolderStrategy.class);",
        "line": 248,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveArgumentWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(strategy.getContext()).willReturn(new SecurityContextImpl(this.authentication));",
        "line": 249,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveArgumentWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(strategy, atLeastOnce()).getContext();",
        "line": 256,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveArgumentWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "strategy",
    "variableType": "SecurityContextHolderStrategy",
    "mockedClass": "SecurityContextHolderStrategy",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.client.web",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-client\\src\\test\\java\\org\\springframework\\security\\oauth2\\client\\web\\OAuth2AuthorizationCodeGrantFilterTests.java",
      "className": "OAuth2AuthorizationCodeGrantFilterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextHolderStrategy strategy = mock(SecurityContextHolderStrategy.class);",
        "line": 319,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(strategy.getContext()).willReturn(new SecurityContextImpl(new TestingAuthenticationToken(\"user\", \"password\")));",
        "line": 320,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(strategy).getContext();",
        "line": 324,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "strategy",
    "variableType": "SecurityContextHolderStrategy",
    "mockedClass": "SecurityContextHolderStrategy",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.client.web.reactive.function.client",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-client\\src\\test\\java\\org\\springframework\\security\\oauth2\\client\\web\\reactive\\function\\client\\ServletOAuth2AuthorizedClientExchangeFilterFunctionTests.java",
      "className": "ServletOAuth2AuthorizedClientExchangeFilterFunctionTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextHolderStrategy strategy = mock(SecurityContextHolderStrategy.class);",
        "line": 262,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "defaultRequestAuthenticationWhenCustomSecurityContextHolderStrategyThenAuthenticationSet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(strategy.getContext()).willReturn(new SecurityContextImpl(this.authentication));",
        "line": 263,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "defaultRequestAuthenticationWhenCustomSecurityContextHolderStrategyThenAuthenticationSet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(strategy).getContext();",
        "line": 268,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "defaultRequestAuthenticationWhenCustomSecurityContextHolderStrategyThenAuthenticationSet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "strategy",
    "variableType": "SecurityContextHolderStrategy",
    "mockedClass": "SecurityContextHolderStrategy",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.server.resource.web.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-resource-server\\src\\test\\java\\org\\springframework\\security\\oauth2\\server\\resource\\web\\authentication\\BearerTokenAuthenticationFilterTests.java",
      "className": "BearerTokenAuthenticationFilterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextHolderStrategy strategy = mock(SecurityContextHolderStrategy.class);",
        "line": 235,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(strategy.createEmptyContext()).willReturn(new SecurityContextImpl());",
        "line": 236,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(strategy).setContext(any());",
        "line": 239,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "strategy",
    "variableType": "SecurityContextHolderStrategy",
    "mockedClass": "SecurityContextHolderStrategy",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.taglibs.authz",
      "filePath": "C:\\java tool\\Spring\\spring-security\\taglibs\\src\\test\\java\\org\\springframework\\security\\taglibs\\authz\\AbstractAuthorizeTagTests.java",
      "className": "AbstractAuthorizeTagTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextHolderStrategy strategy = mock(SecurityContextHolderStrategy.class);",
        "line": 93,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "privilegeEvaluatorFromRequestUsesSecurityContextHolderStrategy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(strategy.getContext()).willReturn(new SecurityContextImpl(new TestingAuthenticationToken(\"user\", \"password\", AuthorityUtils.NO_AUTHORITIES)));",
        "line": 94,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "privilegeEvaluatorFromRequestUsesSecurityContextHolderStrategy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(strategy).getContext();",
        "line": 106,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "privilegeEvaluatorFromRequestUsesSecurityContextHolderStrategy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "strategy",
    "variableType": "SecurityContextHolderStrategy",
    "mockedClass": "SecurityContextHolderStrategy",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.taglibs.authz",
      "filePath": "C:\\java tool\\Spring\\spring-security\\taglibs\\src\\test\\java\\org\\springframework\\security\\taglibs\\authz\\AccessControlListTagTests.java",
      "className": "AccessControlListTagTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextHolderStrategy strategy = mock(SecurityContextHolderStrategy.class);",
        "line": 100,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "securityContextHolderStrategyIsUsedIfConfigured",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(strategy.getContext()).willReturn(new SecurityContextImpl(this.bob));",
        "line": 101,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "securityContextHolderStrategyIsUsedIfConfigured",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(strategy).getContext();",
        "line": 119,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "securityContextHolderStrategyIsUsedIfConfigured",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "strategy",
    "variableType": "SecurityContextHolderStrategy",
    "mockedClass": "SecurityContextHolderStrategy",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.taglibs.authz",
      "filePath": "C:\\java tool\\Spring\\spring-security\\taglibs\\src\\test\\java\\org\\springframework\\security\\taglibs\\authz\\AuthenticationTagTests.java",
      "className": "AuthenticationTagTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextHolderStrategy strategy = mock(SecurityContextHolderStrategy.class);",
        "line": 144,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(strategy.getContext()).willReturn(new SecurityContextImpl(new TestingAuthenticationToken(\"rodAsString\", \"koala\", AuthorityUtils.NO_AUTHORITIES)));",
        "line": 145,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(strategy).getContext();",
        "line": 157,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "strategy",
    "variableType": "SecurityContextHolderStrategy",
    "mockedClass": "SecurityContextHolderStrategy",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.access.intercept",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\access\\intercept\\AuthorizationFilterTests.java",
      "className": "AuthorizationFilterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextHolderStrategy strategy = mock(SecurityContextHolderStrategy.class);",
        "line": 102,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenAuthorizationManagerVerifyPassesThenNextFilter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(strategy.getContext()).willReturn(new SecurityContextImpl(authenticationToken));",
        "line": 103,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenAuthorizationManagerVerifyPassesThenNextFilter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(strategy).getContext();",
        "line": 118,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenAuthorizationManagerVerifyPassesThenNextFilter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "strategy",
    "variableType": "SecurityContextHolderStrategy",
    "mockedClass": "SecurityContextHolderStrategy",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\authentication\\AnonymousAuthenticationFilterTests.java",
      "className": "AnonymousAuthenticationFilterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextHolderStrategy strategy = mock(SecurityContextHolderStrategy.class);",
        "line": 119,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterDoesNotGetContext",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(strategy.getDeferredContext()).willReturn(originalSupplier);",
        "line": 120,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterDoesNotGetContext",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(strategy.getContext()).willReturn(originalContext);",
        "line": 121,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterDoesNotGetContext",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(strategy, never()).getContext();",
        "line": 129,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterDoesNotGetContext",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "strategy",
    "variableType": "SecurityContextHolderStrategy",
    "mockedClass": "SecurityContextHolderStrategy",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\authentication\\AuthenticationFilterTests.java",
      "className": "AuthenticationFilterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextHolderStrategy strategy = mock(SecurityContextHolderStrategy.class);",
        "line": 143,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(strategy.createEmptyContext()).willReturn(new SecurityContextImpl());",
        "line": 144,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(strategy).setContext(any());",
        "line": 152,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "securityContextHolderStrategy",
    "variableType": "SecurityContextHolderStrategy",
    "mockedClass": "SecurityContextHolderStrategy",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.context",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\context\\RequestAttributeSecurityContextRepositoryTests.java",
      "className": "RequestAttributeSecurityContextRepositoryTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextHolderStrategy securityContextHolderStrategy = mock(SecurityContextHolderStrategy.class);",
        "line": 102,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextWhenCustomSecurityContextHolderStrategySetThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(securityContextHolderStrategy.createEmptyContext()).willReturn(new SecurityContextImpl());",
        "line": 103,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextWhenCustomSecurityContextHolderStrategySetThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(securityContextHolderStrategy).createEmptyContext();",
        "line": 108,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextWhenCustomSecurityContextHolderStrategySetThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(securityContextHolderStrategy);",
        "line": 109,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextWhenCustomSecurityContextHolderStrategySetThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  }
]
[
  {
    "variableName": "principal",
    "variableType": "OAuth2User",
    "mockedClass": "OAuth2User",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.client.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-client\\src\\test\\java\\org\\springframework\\security\\oauth2\\client\\authentication\\OAuth2LoginAuthenticationProviderTests.java",
      "className": "OAuth2LoginAuthenticationProviderTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "OAuth2User principal = mock(OAuth2User.class);",
        "line": 159,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenLoginSuccessThenReturnAuthentication",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(principal.getAuthorities()).willAnswer((Answer<List<GrantedAuthority>>) (invocation) -> authorities);",
        "line": 161,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenLoginSuccessThenReturnAuthentication",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "principal",
    "variableType": "OAuth2User",
    "mockedClass": "OAuth2User",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.client.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-client\\src\\test\\java\\org\\springframework\\security\\oauth2\\client\\authentication\\OAuth2LoginAuthenticationProviderTests.java",
      "className": "OAuth2LoginAuthenticationProviderTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "OAuth2User principal = mock(OAuth2User.class);",
        "line": 179,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenAuthoritiesMapperSetThenReturnMappedAuthorities",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(principal.getAuthorities()).willAnswer((Answer<List<GrantedAuthority>>) (invocation) -> authorities);",
        "line": 181,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenAuthoritiesMapperSetThenReturnMappedAuthorities",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "principal",
    "variableType": "OAuth2User",
    "mockedClass": "OAuth2User",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.client.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-client\\src\\test\\java\\org\\springframework\\security\\oauth2\\client\\authentication\\OAuth2LoginAuthenticationProviderTests.java",
      "className": "OAuth2LoginAuthenticationProviderTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "OAuth2User principal = mock(OAuth2User.class);",
        "line": 198,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenTokenSuccessResponseThenAdditionalParametersAddedToUserRequest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(principal.getAuthorities()).willAnswer((Answer<List<GrantedAuthority>>) (invocation) -> authorities);",
        "line": 200,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenTokenSuccessResponseThenAdditionalParametersAddedToUserRequest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
[
  {
    "variableName": "exchange",
    "variableType": "ServerWebExchange",
    "mockedClass": "ServerWebExchange",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.client.web.server",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-client\\src\\test\\java\\org\\springframework\\security\\oauth2\\client\\web\\server\\WebSessionServerOAuth2AuthorizedClientRepositoryTests.java",
      "className": "WebSessionServerOAuth2AuthorizedClientRepositoryTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServerWebExchange exchange = mock(ServerWebExchange.class);",
        "line": 210,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "saveAuthorizedClientWhenSessionIsNullThenThrowIllegalArgumentException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(exchange.getSession()).willReturn(Mono.empty());",
        "line": 211,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "saveAuthorizedClientWhenSessionIsNullThenThrowIllegalArgumentException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "exchange",
    "variableType": "ServerWebExchange",
    "mockedClass": "ServerWebExchange",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.client.web.server",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-client\\src\\test\\java\\org\\springframework\\security\\oauth2\\client\\web\\server\\WebSessionServerOAuth2AuthorizedClientRepositoryTests.java",
      "className": "WebSessionServerOAuth2AuthorizedClientRepositoryTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServerWebExchange exchange = mock(ServerWebExchange.class);",
        "line": 223,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeAuthorizedClientWhenSessionIsNullThenThrowIllegalArgumentException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(exchange.getSession()).willReturn(Mono.empty());",
        "line": 224,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeAuthorizedClientWhenSessionIsNullThenThrowIllegalArgumentException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "exchange",
    "variableType": "ServerWebExchange",
    "mockedClass": "ServerWebExchange",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.server.resource.web.access.server",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-resource-server\\src\\test\\java\\org\\springframework\\security\\oauth2\\server\\resource\\web\\access\\server\\BearerTokenServerAccessDeniedHandlerTests.java",
      "className": "BearerTokenServerAccessDeniedHandlerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServerWebExchange exchange = mock(ServerWebExchange.class);",
        "line": 51,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenNotOAuth2AuthenticatedThenStatus403",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(exchange.getPrincipal()).willReturn(Mono.just(token));",
        "line": 52,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenNotOAuth2AuthenticatedThenStatus403",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(exchange.getResponse()).willReturn(new MockServerHttpResponse());",
        "line": 53,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenNotOAuth2AuthenticatedThenStatus403",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "exchange",
    "variableType": "ServerWebExchange",
    "mockedClass": "ServerWebExchange",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.server.resource.web.access.server",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-resource-server\\src\\test\\java\\org\\springframework\\security\\oauth2\\server\\resource\\web\\access\\server\\BearerTokenServerAccessDeniedHandlerTests.java",
      "className": "BearerTokenServerAccessDeniedHandlerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServerWebExchange exchange = mock(ServerWebExchange.class);",
        "line": 62,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenNotOAuth2AuthenticatedAndRealmSetThenStatus403AndAuthHeaderWithRealm",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(exchange.getPrincipal()).willReturn(Mono.just(token));",
        "line": 63,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenNotOAuth2AuthenticatedAndRealmSetThenStatus403AndAuthHeaderWithRealm",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(exchange.getResponse()).willReturn(new MockServerHttpResponse());",
        "line": 64,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenNotOAuth2AuthenticatedAndRealmSetThenStatus403AndAuthHeaderWithRealm",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "exchange",
    "variableType": "ServerWebExchange",
    "mockedClass": "ServerWebExchange",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.server.resource.web.access.server",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-resource-server\\src\\test\\java\\org\\springframework\\security\\oauth2\\server\\resource\\web\\access\\server\\BearerTokenServerAccessDeniedHandlerTests.java",
      "className": "BearerTokenServerAccessDeniedHandlerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServerWebExchange exchange = mock(ServerWebExchange.class);",
        "line": 75,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenOAuth2AuthenticatedThenStatus403AndAuthHeaderWithInsufficientScopeErrorAttribute",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(exchange.getPrincipal()).willReturn(Mono.just(token));",
        "line": 76,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenOAuth2AuthenticatedThenStatus403AndAuthHeaderWithInsufficientScopeErrorAttribute",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(exchange.getResponse()).willReturn(new MockServerHttpResponse());",
        "line": 77,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenOAuth2AuthenticatedThenStatus403AndAuthHeaderWithInsufficientScopeErrorAttribute",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "exchange",
    "variableType": "ServerWebExchange",
    "mockedClass": "ServerWebExchange",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.web.server.context",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\context\\WebSessionServerSecurityContextRepositoryTests.java",
      "className": "WebSessionServerSecurityContextRepositoryTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServerWebExchange exchange = mock(ServerWebExchange.class);",
        "line": 90,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadWhenCacheSecurityContextThenSubscribeOnce",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(exchange.getSession()).willReturn(webSession.mono());",
        "line": 91,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadWhenCacheSecurityContextThenSubscribeOnce",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "exchange",
    "variableType": "ServerWebExchange",
    "mockedClass": "ServerWebExchange",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.web.server.context",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\context\\WebSessionServerSecurityContextRepositoryTests.java",
      "className": "WebSessionServerSecurityContextRepositoryTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServerWebExchange exchange = mock(ServerWebExchange.class);",
        "line": 101,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadWhenNotCacheSecurityContextThenSubscribeMultiple",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(exchange.getSession()).willReturn(webSession.mono());",
        "line": 102,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadWhenNotCacheSecurityContextThenSubscribeMultiple",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
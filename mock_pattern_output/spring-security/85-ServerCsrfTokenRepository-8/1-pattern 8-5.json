[
  {
    "variableName": "csrfTokenRepository",
    "variableType": "ServerCsrfTokenRepository",
    "mockedClass": "ServerCsrfTokenRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.web.server",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\web\\server\\ServerHttpSecurityTests.java",
      "className": "ServerHttpSecurityTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ServerCsrfTokenRepository csrfTokenRepository;",
        "line": 117,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.csrfTokenRepository.loadToken(any(ServerWebExchange.class))).willReturn(Mono.just(csrfToken));",
        "line": 546,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenCustomRequestHandlerThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.csrfTokenRepository.generateToken(any(ServerWebExchange.class))).willReturn(Mono.empty());",
        "line": 547,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenCustomRequestHandlerThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.csrfTokenRepository, times(2)).loadToken(any(ServerWebExchange.class));",
        "line": 559,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenCustomRequestHandlerThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.csrfTokenRepository).generateToken(any(ServerWebExchange.class));",
        "line": 560,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenCustomRequestHandlerThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.csrfTokenRepository.loadToken(any(ServerWebExchange.class))).willReturn(Mono.just(csrfToken));",
        "line": 568,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenServerXorCsrfTokenRequestAttributeHandlerThenOk",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.csrfTokenRepository.generateToken(any(ServerWebExchange.class))).willReturn(Mono.empty());",
        "line": 569,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenServerXorCsrfTokenRequestAttributeHandlerThenOk",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// @formatter:on\r\nverify(this.csrfTokenRepository, times(2)).loadToken(any(ServerWebExchange.class));",
        "line": 593,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenServerXorCsrfTokenRequestAttributeHandlerThenOk",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.csrfTokenRepository).generateToken(any(ServerWebExchange.class));",
        "line": 594,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenServerXorCsrfTokenRequestAttributeHandlerThenOk",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "csrfTokenRepository",
    "variableType": "ServerCsrfTokenRepository",
    "mockedClass": "ServerCsrfTokenRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.web.server",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\web\\server\\ServerHttpSecurityTests.java",
      "className": "ServerHttpSecurityTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ServerCsrfTokenRepository csrfTokenRepository;",
        "line": 117,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.csrfTokenRepository.loadToken(any(ServerWebExchange.class))).willReturn(Mono.just(csrfToken));",
        "line": 546,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenCustomRequestHandlerThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.csrfTokenRepository.generateToken(any(ServerWebExchange.class))).willReturn(Mono.empty());",
        "line": 547,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenCustomRequestHandlerThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.csrfTokenRepository, times(2)).loadToken(any(ServerWebExchange.class));",
        "line": 559,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenCustomRequestHandlerThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.csrfTokenRepository).generateToken(any(ServerWebExchange.class));",
        "line": 560,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenCustomRequestHandlerThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.csrfTokenRepository.loadToken(any(ServerWebExchange.class))).willReturn(Mono.just(csrfToken));",
        "line": 568,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenServerXorCsrfTokenRequestAttributeHandlerThenOk",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.csrfTokenRepository.generateToken(any(ServerWebExchange.class))).willReturn(Mono.empty());",
        "line": 569,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenServerXorCsrfTokenRequestAttributeHandlerThenOk",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// @formatter:on\r\nverify(this.csrfTokenRepository, times(2)).loadToken(any(ServerWebExchange.class));",
        "line": 593,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenServerXorCsrfTokenRequestAttributeHandlerThenOk",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.csrfTokenRepository).generateToken(any(ServerWebExchange.class));",
        "line": 594,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenServerXorCsrfTokenRequestAttributeHandlerThenOk",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "csrfTokenRepository",
    "variableType": "ServerCsrfTokenRepository",
    "mockedClass": "ServerCsrfTokenRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.web.server",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\web\\server\\ServerHttpSecurityTests.java",
      "className": "ServerHttpSecurityTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ServerCsrfTokenRepository csrfTokenRepository;",
        "line": 117,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.csrfTokenRepository.loadToken(any(ServerWebExchange.class))).willReturn(Mono.just(csrfToken));",
        "line": 546,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenCustomRequestHandlerThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.csrfTokenRepository.generateToken(any(ServerWebExchange.class))).willReturn(Mono.empty());",
        "line": 547,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenCustomRequestHandlerThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.csrfTokenRepository, times(2)).loadToken(any(ServerWebExchange.class));",
        "line": 559,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenCustomRequestHandlerThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.csrfTokenRepository).generateToken(any(ServerWebExchange.class));",
        "line": 560,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenCustomRequestHandlerThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.csrfTokenRepository.loadToken(any(ServerWebExchange.class))).willReturn(Mono.just(csrfToken));",
        "line": 568,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenServerXorCsrfTokenRequestAttributeHandlerThenOk",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.csrfTokenRepository.generateToken(any(ServerWebExchange.class))).willReturn(Mono.empty());",
        "line": 569,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenServerXorCsrfTokenRequestAttributeHandlerThenOk",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// @formatter:on\r\nverify(this.csrfTokenRepository, times(2)).loadToken(any(ServerWebExchange.class));",
        "line": 593,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenServerXorCsrfTokenRequestAttributeHandlerThenOk",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.csrfTokenRepository).generateToken(any(ServerWebExchange.class));",
        "line": 594,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenServerXorCsrfTokenRequestAttributeHandlerThenOk",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "csrfTokenRepository",
    "variableType": "ServerCsrfTokenRepository",
    "mockedClass": "ServerCsrfTokenRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.web.server",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\web\\server\\ServerHttpSecurityTests.java",
      "className": "ServerHttpSecurityTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ServerCsrfTokenRepository csrfTokenRepository;",
        "line": 117,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.csrfTokenRepository.loadToken(any(ServerWebExchange.class))).willReturn(Mono.just(csrfToken));",
        "line": 546,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenCustomRequestHandlerThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.csrfTokenRepository.generateToken(any(ServerWebExchange.class))).willReturn(Mono.empty());",
        "line": 547,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenCustomRequestHandlerThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.csrfTokenRepository, times(2)).loadToken(any(ServerWebExchange.class));",
        "line": 559,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenCustomRequestHandlerThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.csrfTokenRepository).generateToken(any(ServerWebExchange.class));",
        "line": 560,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenCustomRequestHandlerThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.csrfTokenRepository.loadToken(any(ServerWebExchange.class))).willReturn(Mono.just(csrfToken));",
        "line": 568,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenServerXorCsrfTokenRequestAttributeHandlerThenOk",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.csrfTokenRepository.generateToken(any(ServerWebExchange.class))).willReturn(Mono.empty());",
        "line": 569,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenServerXorCsrfTokenRequestAttributeHandlerThenOk",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// @formatter:on\r\nverify(this.csrfTokenRepository, times(2)).loadToken(any(ServerWebExchange.class));",
        "line": 593,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenServerXorCsrfTokenRequestAttributeHandlerThenOk",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.csrfTokenRepository).generateToken(any(ServerWebExchange.class));",
        "line": 594,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "postWhenServerXorCsrfTokenRequestAttributeHandlerThenOk",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "csrfTokenRepository",
    "variableType": "ServerCsrfTokenRepository",
    "mockedClass": "ServerCsrfTokenRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.server.csrf",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\csrf\\CsrfServerLogoutHandlerTests.java",
      "className": "CsrfServerLogoutHandlerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ServerCsrfTokenRepository csrfTokenRepository;",
        "line": 43,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.csrfTokenRepository.saveToken(this.exchange, null)).willReturn(Mono.empty());",
        "line": 71,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "logoutRemovesCsrfToken",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.csrfTokenRepository).saveToken(this.exchange, null);",
        "line": 74,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "logoutRemovesCsrfToken",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  }
]
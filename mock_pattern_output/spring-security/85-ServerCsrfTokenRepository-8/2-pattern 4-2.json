[
  {
    "variableName": "repository",
    "variableType": "ServerCsrfTokenRepository",
    "mockedClass": "ServerCsrfTokenRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.web.server.csrf",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\csrf\\CsrfWebFilterTests.java",
      "className": "CsrfWebFilterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ServerCsrfTokenRepository repository;",
        "line": 61,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 102,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPostAndEstablishedCsrfTokenAndRequestMissingTokenThenCsrfException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 113,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPostAndEstablishedCsrfTokenAndRequestParamInvalidTokenThenCsrfException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 126,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPostAndEstablishedCsrfTokenAndRequestParamValidTokenThenContinues",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.generateToken(any())).willReturn(Mono.just(this.token));",
        "line": 127,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPostAndEstablishedCsrfTokenAndRequestParamValidTokenThenContinues",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 140,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPostAndEstablishedCsrfTokenAndHeaderInvalidTokenThenCsrfException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 153,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPostAndEstablishedCsrfTokenAndHeaderValidTokenThenContinues",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.generateToken(any())).willReturn(Mono.just(this.token));",
        "line": 154,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPostAndEstablishedCsrfTokenAndHeaderValidTokenThenContinues",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 173,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenRequestHandlerSetThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.generateToken(any())).willReturn(Mono.just(this.token));",
        "line": 174,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenRequestHandlerSetThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.generateToken(any())).willReturn(Mono.just(this.token));",
        "line": 190,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenXorServerCsrfTokenRequestAttributeHandlerAndValidTokenThenSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 191,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenXorServerCsrfTokenRequestAttributeHandlerAndValidTokenThenSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 204,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenXorServerCsrfTokenRequestAttributeHandlerAndRawTokenThenAccessDeniedException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 240,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenMultipartFormDataAndNotEnabledThenDenied",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 257,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenMultipartFormDataAndEnabledThenGranted",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.generateToken(any())).willReturn(Mono.just(this.token));",
        "line": 258,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenMultipartFormDataAndEnabledThenGranted",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 275,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPostAndMultipartFormDataEnabledAndNoBodyProvided",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.generateToken(any())).willReturn(Mono.just(this.token));",
        "line": 276,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPostAndMultipartFormDataEnabledAndNoBodyProvided",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 292,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenFormDataAndEnabledThenGranted",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.generateToken(any())).willReturn(Mono.just(this.token));",
        "line": 293,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenFormDataAndEnabledThenGranted",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 310,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenMultipartMixedAndEnabledThenNotRead",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(token));",
        "line": 330,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenTokenIsNullThenNoNullPointer",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.empty());",
        "line": 346,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenSubscribingCsrfTokenMultipleTimesThenGenerateOnlyOnce",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.generateToken(any())).willReturn(chainResult.mono());",
        "line": 347,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenSubscribingCsrfTokenMultipleTimesThenGenerateOnlyOnce",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "repository",
    "variableType": "ServerCsrfTokenRepository",
    "mockedClass": "ServerCsrfTokenRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.web.server.csrf",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\csrf\\CsrfWebFilterTests.java",
      "className": "CsrfWebFilterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ServerCsrfTokenRepository repository;",
        "line": 61,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 102,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPostAndEstablishedCsrfTokenAndRequestMissingTokenThenCsrfException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 113,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPostAndEstablishedCsrfTokenAndRequestParamInvalidTokenThenCsrfException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 126,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPostAndEstablishedCsrfTokenAndRequestParamValidTokenThenContinues",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.generateToken(any())).willReturn(Mono.just(this.token));",
        "line": 127,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPostAndEstablishedCsrfTokenAndRequestParamValidTokenThenContinues",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 140,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPostAndEstablishedCsrfTokenAndHeaderInvalidTokenThenCsrfException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 153,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPostAndEstablishedCsrfTokenAndHeaderValidTokenThenContinues",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.generateToken(any())).willReturn(Mono.just(this.token));",
        "line": 154,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPostAndEstablishedCsrfTokenAndHeaderValidTokenThenContinues",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 173,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenRequestHandlerSetThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.generateToken(any())).willReturn(Mono.just(this.token));",
        "line": 174,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenRequestHandlerSetThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.generateToken(any())).willReturn(Mono.just(this.token));",
        "line": 190,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenXorServerCsrfTokenRequestAttributeHandlerAndValidTokenThenSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 191,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenXorServerCsrfTokenRequestAttributeHandlerAndValidTokenThenSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 204,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenXorServerCsrfTokenRequestAttributeHandlerAndRawTokenThenAccessDeniedException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 240,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenMultipartFormDataAndNotEnabledThenDenied",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 257,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenMultipartFormDataAndEnabledThenGranted",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.generateToken(any())).willReturn(Mono.just(this.token));",
        "line": 258,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenMultipartFormDataAndEnabledThenGranted",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 275,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPostAndMultipartFormDataEnabledAndNoBodyProvided",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.generateToken(any())).willReturn(Mono.just(this.token));",
        "line": 276,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPostAndMultipartFormDataEnabledAndNoBodyProvided",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 292,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenFormDataAndEnabledThenGranted",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.generateToken(any())).willReturn(Mono.just(this.token));",
        "line": 293,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenFormDataAndEnabledThenGranted",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(this.token));",
        "line": 310,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenMultipartMixedAndEnabledThenNotRead",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.just(token));",
        "line": 330,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenTokenIsNullThenNoNullPointer",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadToken(any())).willReturn(Mono.empty());",
        "line": 346,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenSubscribingCsrfTokenMultipleTimesThenGenerateOnlyOnce",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.generateToken(any())).willReturn(chainResult.mono());",
        "line": 347,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenSubscribingCsrfTokenMultipleTimesThenGenerateOnlyOnce",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
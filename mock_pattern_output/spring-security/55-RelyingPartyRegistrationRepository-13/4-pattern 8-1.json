[
  {
    "variableName": "repository",
    "variableType": "RelyingPartyRegistrationRepository",
    "mockedClass": "RelyingPartyRegistrationRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.saml2.provider.service.web.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\saml2\\saml2-service-provider\\src\\test\\java\\org\\springframework\\security\\saml2\\provider\\service\\web\\authentication\\Saml2WebSsoAuthenticationFilterTests.java",
      "className": "Saml2WebSsoAuthenticationFilterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private RelyingPartyRegistrationRepository repository = mock(RelyingPartyRegistrationRepository.class);",
        "line": 60,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.findByRegistrationId(\"non-existent-id\")).willReturn(null);",
        "line": 109,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "attemptAuthenticationWhenRegistrationIdDoesNotExistThenThrowsException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.findByRegistrationId(\"registration-id\")).willReturn(registration);",
        "line": 192,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenPathStartsWithRegistrationIdThenAuthenticates",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.repository).findByRegistrationId(\"registration-id\");",
        "line": 207,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenPathStartsWithRegistrationIdThenAuthenticates",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  }
]
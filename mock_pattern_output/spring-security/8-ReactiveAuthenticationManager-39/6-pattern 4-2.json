[
  {
    "variableName": "delegate2",
    "variableType": "ReactiveAuthenticationManager",
    "mockedClass": "ReactiveAuthenticationManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\authentication\\DelegatingReactiveAuthenticationManagerTests.java",
      "className": "DelegatingReactiveAuthenticationManagerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nReactiveAuthenticationManager delegate2;",
        "line": 44,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.delegate2.authenticate(any())).willReturn(Mono.just(this.authentication));",
        "line": 53,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenEmptyAndNotThenReturnsNotEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.delegate2.authenticate(any())).willReturn(Mono.just(this.authentication));",
        "line": 83,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenContinueOnErrorAndFirstBadCredentialsThenTriesSecond",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.delegate2.authenticate(any())).willReturn(Mono.error(new BadCredentialsException(\"Test\")));",
        "line": 93,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenContinueOnErrorAndBothDelegatesBadCredentialsThenError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "delegate1",
    "variableType": "ReactiveAuthenticationManager",
    "mockedClass": "ReactiveAuthenticationManager",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\authentication\\DelegatingReactiveAuthenticationManagerTests.java",
      "className": "DelegatingReactiveAuthenticationManagerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nReactiveAuthenticationManager delegate1;",
        "line": 41,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.delegate1.authenticate(any())).willReturn(Mono.empty());",
        "line": 52,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenEmptyAndNotThenReturnsNotEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// delay to try and force delegate2 to finish (i.e. make sure we didn't use\r\n// flatMap)\r\ngiven(this.delegate1.authenticate(any())).willReturn(Mono.just(this.authentication).delayElement(Duration.ofMillis(100)));",
        "line": 63,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenNotEmptyThenOtherDelegatesNotSubscribed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.delegate1.authenticate(any())).willReturn(Mono.error(new BadCredentialsException(\"Test\")));",
        "line": 72,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenBadCredentialsThenDelegate2NotInvokedAndError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.delegate1.authenticate(any())).willReturn(Mono.error(new BadCredentialsException(\"Test\")));",
        "line": 82,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenContinueOnErrorAndFirstBadCredentialsThenTriesSecond",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.delegate1.authenticate(any())).willReturn(Mono.error(new BadCredentialsException(\"Test\")));",
        "line": 92,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenContinueOnErrorAndBothDelegatesBadCredentialsThenError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.delegate1.authenticate(any())).willReturn(Mono.just(this.authentication));",
        "line": 104,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenContinueOnErrorAndDelegate1NotEmptyThenReturnsNotEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
[
  {
    "variableName": "AUTHENTICATION_CONVERTER",
    "variableType": "AuthenticationConverter",
    "mockedClass": "AuthenticationConverter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.saml2",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\saml2\\Saml2LoginConfigurerTests.java",
      "className": "Saml2LoginConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final AuthenticationConverter AUTHENTICATION_CONVERTER = mock(AuthenticationConverter.class);",
        "line": 145,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(AUTHENTICATION_CONVERTER.convert(any(HttpServletRequest.class))).willReturn(new Saml2AuthenticationToken(relyingPartyRegistration, response));",
        "line": 383,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(AUTHENTICATION_CONVERTER).convert(any(HttpServletRequest.class));",
        "line": 389,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "AUTHENTICATION_CONVERTER",
    "variableType": "AuthenticationConverter",
    "mockedClass": "AuthenticationConverter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.saml2",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\saml2\\Saml2LoginConfigurerTests.java",
      "className": "Saml2LoginConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final AuthenticationConverter AUTHENTICATION_CONVERTER = mock(AuthenticationConverter.class);",
        "line": 145,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(AUTHENTICATION_CONVERTER.convert(any(HttpServletRequest.class))).willReturn(new Saml2AuthenticationToken(relyingPartyRegistration, response));",
        "line": 383,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(AUTHENTICATION_CONVERTER).convert(any(HttpServletRequest.class));",
        "line": 389,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "AUTHENTICATION_CONVERTER",
    "variableType": "AuthenticationConverter",
    "mockedClass": "AuthenticationConverter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.saml2",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\saml2\\Saml2LoginConfigurerTests.java",
      "className": "Saml2LoginConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final AuthenticationConverter AUTHENTICATION_CONVERTER = mock(AuthenticationConverter.class);",
        "line": 145,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(AUTHENTICATION_CONVERTER.convert(any(HttpServletRequest.class))).willReturn(new Saml2AuthenticationToken(relyingPartyRegistration, response));",
        "line": 383,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(AUTHENTICATION_CONVERTER).convert(any(HttpServletRequest.class));",
        "line": 389,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "AUTHENTICATION_CONVERTER",
    "variableType": "AuthenticationConverter",
    "mockedClass": "AuthenticationConverter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.saml2",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\saml2\\Saml2LoginConfigurerTests.java",
      "className": "Saml2LoginConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final AuthenticationConverter AUTHENTICATION_CONVERTER = mock(AuthenticationConverter.class);",
        "line": 145,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(AUTHENTICATION_CONVERTER.convert(any(HttpServletRequest.class))).willReturn(new Saml2AuthenticationToken(relyingPartyRegistration, response));",
        "line": 383,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(AUTHENTICATION_CONVERTER).convert(any(HttpServletRequest.class));",
        "line": 389,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "AUTHENTICATION_CONVERTER",
    "variableType": "AuthenticationConverter",
    "mockedClass": "AuthenticationConverter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.saml2",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\saml2\\Saml2LoginConfigurerTests.java",
      "className": "Saml2LoginConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final AuthenticationConverter AUTHENTICATION_CONVERTER = mock(AuthenticationConverter.class);",
        "line": 145,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(AUTHENTICATION_CONVERTER.convert(any(HttpServletRequest.class))).willReturn(new Saml2AuthenticationToken(relyingPartyRegistration, response));",
        "line": 383,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(AUTHENTICATION_CONVERTER).convert(any(HttpServletRequest.class));",
        "line": 389,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "AUTHENTICATION_CONVERTER",
    "variableType": "AuthenticationConverter",
    "mockedClass": "AuthenticationConverter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.saml2",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\saml2\\Saml2LoginConfigurerTests.java",
      "className": "Saml2LoginConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final AuthenticationConverter AUTHENTICATION_CONVERTER = mock(AuthenticationConverter.class);",
        "line": 145,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(AUTHENTICATION_CONVERTER.convert(any(HttpServletRequest.class))).willReturn(new Saml2AuthenticationToken(relyingPartyRegistration, response));",
        "line": 383,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(AUTHENTICATION_CONVERTER).convert(any(HttpServletRequest.class));",
        "line": 389,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "AUTHENTICATION_CONVERTER",
    "variableType": "AuthenticationConverter",
    "mockedClass": "AuthenticationConverter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.saml2",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\saml2\\Saml2LoginConfigurerTests.java",
      "className": "Saml2LoginConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final AuthenticationConverter AUTHENTICATION_CONVERTER = mock(AuthenticationConverter.class);",
        "line": 145,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(AUTHENTICATION_CONVERTER.convert(any(HttpServletRequest.class))).willReturn(new Saml2AuthenticationToken(relyingPartyRegistration, response));",
        "line": 383,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(AUTHENTICATION_CONVERTER).convert(any(HttpServletRequest.class));",
        "line": 389,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "AUTHENTICATION_CONVERTER",
    "variableType": "AuthenticationConverter",
    "mockedClass": "AuthenticationConverter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.saml2",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\saml2\\Saml2LoginConfigurerTests.java",
      "className": "Saml2LoginConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final AuthenticationConverter AUTHENTICATION_CONVERTER = mock(AuthenticationConverter.class);",
        "line": 145,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(AUTHENTICATION_CONVERTER.convert(any(HttpServletRequest.class))).willReturn(new Saml2AuthenticationToken(relyingPartyRegistration, response));",
        "line": 383,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(AUTHENTICATION_CONVERTER).convert(any(HttpServletRequest.class));",
        "line": 389,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "AUTHENTICATION_CONVERTER",
    "variableType": "AuthenticationConverter",
    "mockedClass": "AuthenticationConverter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.saml2",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\saml2\\Saml2LoginConfigurerTests.java",
      "className": "Saml2LoginConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final AuthenticationConverter AUTHENTICATION_CONVERTER = mock(AuthenticationConverter.class);",
        "line": 145,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(AUTHENTICATION_CONVERTER.convert(any(HttpServletRequest.class))).willReturn(new Saml2AuthenticationToken(relyingPartyRegistration, response));",
        "line": 383,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(AUTHENTICATION_CONVERTER).convert(any(HttpServletRequest.class));",
        "line": 389,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "AUTHENTICATION_CONVERTER",
    "variableType": "AuthenticationConverter",
    "mockedClass": "AuthenticationConverter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.saml2",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\saml2\\Saml2LoginConfigurerTests.java",
      "className": "Saml2LoginConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final AuthenticationConverter AUTHENTICATION_CONVERTER = mock(AuthenticationConverter.class);",
        "line": 145,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(AUTHENTICATION_CONVERTER.convert(any(HttpServletRequest.class))).willReturn(new Saml2AuthenticationToken(relyingPartyRegistration, response));",
        "line": 383,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(AUTHENTICATION_CONVERTER).convert(any(HttpServletRequest.class));",
        "line": 389,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "AUTHENTICATION_CONVERTER",
    "variableType": "AuthenticationConverter",
    "mockedClass": "AuthenticationConverter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.saml2",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\saml2\\Saml2LoginConfigurerTests.java",
      "className": "Saml2LoginConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final AuthenticationConverter AUTHENTICATION_CONVERTER = mock(AuthenticationConverter.class);",
        "line": 145,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(AUTHENTICATION_CONVERTER.convert(any(HttpServletRequest.class))).willReturn(new Saml2AuthenticationToken(relyingPartyRegistration, response));",
        "line": 383,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(AUTHENTICATION_CONVERTER).convert(any(HttpServletRequest.class));",
        "line": 389,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "AUTHENTICATION_CONVERTER",
    "variableType": "AuthenticationConverter",
    "mockedClass": "AuthenticationConverter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.saml2",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\saml2\\Saml2LoginConfigurerTests.java",
      "className": "Saml2LoginConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final AuthenticationConverter AUTHENTICATION_CONVERTER = mock(AuthenticationConverter.class);",
        "line": 145,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(AUTHENTICATION_CONVERTER.convert(any(HttpServletRequest.class))).willReturn(new Saml2AuthenticationToken(relyingPartyRegistration, response));",
        "line": 383,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(AUTHENTICATION_CONVERTER).convert(any(HttpServletRequest.class));",
        "line": 389,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "AUTHENTICATION_CONVERTER",
    "variableType": "AuthenticationConverter",
    "mockedClass": "AuthenticationConverter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.saml2",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\saml2\\Saml2LoginConfigurerTests.java",
      "className": "Saml2LoginConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final AuthenticationConverter AUTHENTICATION_CONVERTER = mock(AuthenticationConverter.class);",
        "line": 145,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(AUTHENTICATION_CONVERTER.convert(any(HttpServletRequest.class))).willReturn(new Saml2AuthenticationToken(relyingPartyRegistration, response));",
        "line": 383,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(AUTHENTICATION_CONVERTER).convert(any(HttpServletRequest.class));",
        "line": 389,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "AUTHENTICATION_CONVERTER",
    "variableType": "AuthenticationConverter",
    "mockedClass": "AuthenticationConverter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.saml2",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\saml2\\Saml2LoginConfigurerTests.java",
      "className": "Saml2LoginConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final AuthenticationConverter AUTHENTICATION_CONVERTER = mock(AuthenticationConverter.class);",
        "line": 145,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(AUTHENTICATION_CONVERTER.convert(any(HttpServletRequest.class))).willReturn(new Saml2AuthenticationToken(relyingPartyRegistration, response));",
        "line": 383,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(AUTHENTICATION_CONVERTER).convert(any(HttpServletRequest.class));",
        "line": 389,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "AUTHENTICATION_CONVERTER",
    "variableType": "AuthenticationConverter",
    "mockedClass": "AuthenticationConverter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.saml2",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\saml2\\Saml2LoginConfigurerTests.java",
      "className": "Saml2LoginConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final AuthenticationConverter AUTHENTICATION_CONVERTER = mock(AuthenticationConverter.class);",
        "line": 145,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(AUTHENTICATION_CONVERTER.convert(any(HttpServletRequest.class))).willReturn(new Saml2AuthenticationToken(relyingPartyRegistration, response));",
        "line": 383,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(AUTHENTICATION_CONVERTER).convert(any(HttpServletRequest.class));",
        "line": 389,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "AUTHENTICATION_CONVERTER",
    "variableType": "AuthenticationConverter",
    "mockedClass": "AuthenticationConverter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.saml2",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\saml2\\Saml2LoginConfigurerTests.java",
      "className": "Saml2LoginConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final AuthenticationConverter AUTHENTICATION_CONVERTER = mock(AuthenticationConverter.class);",
        "line": 145,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(AUTHENTICATION_CONVERTER.convert(any(HttpServletRequest.class))).willReturn(new Saml2AuthenticationToken(relyingPartyRegistration, response));",
        "line": 383,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(AUTHENTICATION_CONVERTER).convert(any(HttpServletRequest.class));",
        "line": 389,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "AUTHENTICATION_CONVERTER",
    "variableType": "AuthenticationConverter",
    "mockedClass": "AuthenticationConverter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.saml2",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\saml2\\Saml2LoginConfigurerTests.java",
      "className": "Saml2LoginConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final AuthenticationConverter AUTHENTICATION_CONVERTER = mock(AuthenticationConverter.class);",
        "line": 145,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(AUTHENTICATION_CONVERTER.convert(any(HttpServletRequest.class))).willReturn(new Saml2AuthenticationToken(relyingPartyRegistration, response));",
        "line": 383,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(AUTHENTICATION_CONVERTER).convert(any(HttpServletRequest.class));",
        "line": 389,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "AUTHENTICATION_CONVERTER",
    "variableType": "AuthenticationConverter",
    "mockedClass": "AuthenticationConverter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.saml2",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\saml2\\Saml2LoginConfigurerTests.java",
      "className": "Saml2LoginConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static final AuthenticationConverter AUTHENTICATION_CONVERTER = mock(AuthenticationConverter.class);",
        "line": 145,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(AUTHENTICATION_CONVERTER.convert(any(HttpServletRequest.class))).willReturn(new Saml2AuthenticationToken(relyingPartyRegistration, response));",
        "line": 383,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(AUTHENTICATION_CONVERTER).convert(any(HttpServletRequest.class));",
        "line": 389,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenCustomLoginProcessingUrlAndCustomAuthenticationConverterThenAuthenticate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "authenticationConverter",
    "variableType": "AuthenticationConverter",
    "mockedClass": "AuthenticationConverter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\authentication\\AuthenticationFilterTests.java",
      "className": "AuthenticationFilterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate AuthenticationConverter authenticationConverter;",
        "line": 68,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationConverter.convert(any())).willReturn(authentication);",
        "line": 121,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenDefaultsAndAuthenticationSuccessThenContinues",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationConverter.convert(any())).willReturn(authentication);",
        "line": 139,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenCustomSecurityContextHolderStrategyThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationConverter.convert(any())).willReturn(authentication);",
        "line": 160,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenAuthenticationManagerResolverDefaultsAndAuthenticationSuccessThenContinues",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationConverter.convert(any())).willReturn(authentication);",
        "line": 178,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenDefaultsAndAuthenticationFailThenUnauthorized",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationConverter.convert(any())).willReturn(authentication);",
        "line": 195,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenAuthenticationManagerResolverDefaultsAndAuthenticationFailThenUnauthorized",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationConverter.convert(any())).willReturn(null);",
        "line": 209,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenConvertEmptyThenOk",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationConverter.convert(any())).willReturn(authentication);",
        "line": 224,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenConvertAndAuthenticationSuccessThenSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationConverter.convert(any())).willReturn(authentication);",
        "line": 244,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenConvertAndAuthenticationEmptyThenServerError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(this.authenticationConverter, this.authenticationManagerResolver, this.successHandler);",
        "line": 267,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenNotMatchAndConvertAndAuthenticationSuccessThenContinues",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationConverter.convert(any())).willReturn(authentication);",
        "line": 275,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenSuccessfulAuthenticationThenSessionIdChanges",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationConverter.convert(any())).willReturn(authentication);",
        "line": 292,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenSuccessfulAuthenticationThenNoSessionCreated",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationConverter.convert(any())).willReturn(authentication);",
        "line": 308,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenCustomSecurityContextRepositoryAndSuccessfulAuthenticationRepositoryUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  }
]
[
  {
    "variableName": "userService",
    "variableType": "ReactiveOAuth2UserService<OidcUserRequest,OidcUser>",
    "mockedClass": "ReactiveOAuth2UserService<OidcUserRequest,OidcUser>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.client.oidc.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-client\\src\\test\\java\\org\\springframework\\security\\oauth2\\client\\oidc\\authentication\\OidcAuthorizationCodeReactiveAuthenticationManagerTests.java",
      "className": "OidcAuthorizationCodeReactiveAuthenticationManagerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ReactiveOAuth2UserService<OidcUserRequest, OidcUser> userService;",
        "line": 84,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.userService.loadUser(any())).willReturn(Mono.empty());",
        "line": 233,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticationWhenOAuth2UserNotFoundThenEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.userService.loadUser(any())).willReturn(Mono.just(user));",
        "line": 258,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticationWhenOAuth2UserFoundThenSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.userService.loadUser(any())).willReturn(Mono.just(user));",
        "line": 289,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticationWhenRefreshTokenThenRefreshTokenInAuthorizedClient",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.userService.loadUser(userRequestArgCaptor.capture())).willReturn(Mono.just(user));",
        "line": 326,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenTokenSuccessResponseThenAdditionalParametersAddedToUserRequest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.userService.loadUser(userRequestArgCaptor.capture())).willReturn(Mono.just(user));",
        "line": 354,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenAuthoritiesMapperSetThenReturnMappedAuthorities",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
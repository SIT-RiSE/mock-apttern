[
  {
    "variableName": "callable",
    "variableType": "Callable<Iterable<RelyingPartyRegistration>>",
    "mockedClass": "Callable<Iterable<RelyingPartyRegistration>>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.saml2.provider.service.registration",
      "filePath": "C:\\java tool\\Spring\\spring-security\\saml2\\saml2-service-provider\\src\\test\\java\\org\\springframework\\security\\saml2\\provider\\service\\registration\\CachingRelyingPartyRegistrationRepositoryTests.java",
      "className": "CachingRelyingPartyRegistrationRepositoryTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nCallable<Iterable<RelyingPartyRegistration>> callable;",
        "line": 41,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.callable.call()).willReturn(mock(IterableRelyingPartyRegistrationRepository.class));",
        "line": 49,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "iteratorWhenResolvableThenPopulatesCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.callable).call();",
        "line": 51,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "iteratorWhenResolvableThenPopulatesCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(this.callable);",
        "line": 53,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "iteratorWhenResolvableThenPopulatesCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.callable.call()).willThrow(IllegalStateException.class);",
        "line": 58,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "iteratorWhenExceptionThenPropagates",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.callable.call()).willReturn(mock(IterableRelyingPartyRegistrationRepository.class));",
        "line": 65,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "findByRegistrationIdWhenResolvableThenPopulatesCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.callable).call();",
        "line": 67,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "findByRegistrationIdWhenResolvableThenPopulatesCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(this.callable);",
        "line": 69,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "findByRegistrationIdWhenResolvableThenPopulatesCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.callable.call()).willReturn(mock(IterableRelyingPartyRegistrationRepository.class));",
        "line": 74,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "findUniqueByAssertingPartyEntityIdWhenResolvableThenPopulatesCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.callable).call();",
        "line": 76,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "findUniqueByAssertingPartyEntityIdWhenResolvableThenPopulatesCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(this.callable);",
        "line": 78,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "findUniqueByAssertingPartyEntityIdWhenResolvableThenPopulatesCache",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  }
]
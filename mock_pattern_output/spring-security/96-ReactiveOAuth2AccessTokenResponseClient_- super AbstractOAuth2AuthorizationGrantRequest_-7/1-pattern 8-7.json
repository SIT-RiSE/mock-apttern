[
  {
    "variableName": "MOCK_RESPONSE_CLIENT",
    "variableType": "ReactiveOAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest>",
    "mockedClass": "ReactiveOAuth2AccessTokenResponseClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.reactive",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\reactive\\ReactiveOAuth2AuthorizedClientManagerConfigurationTests.java",
      "className": "ReactiveOAuth2AuthorizedClientManagerConfigurationTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private static ReactiveOAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest> MOCK_RESPONSE_CLIENT;",
        "line": 102,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "MOCK_RESPONSE_CLIENT = mock(ReactiveOAuth2AccessTokenResponseClient.class);",
        "line": 126,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@BeforeEach",
            "@SuppressWarnings"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2RefreshTokenGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 194,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 217,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2ClientCredentialsGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 241,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 260,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2PasswordGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 282,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 305,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(JwtBearerGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 329,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 346,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(TokenExchangeGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 369,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 387,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "MOCK_RESPONSE_CLIENT",
    "variableType": "ReactiveOAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest>",
    "mockedClass": "ReactiveOAuth2AccessTokenResponseClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.reactive",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\reactive\\ReactiveOAuth2AuthorizedClientManagerConfigurationTests.java",
      "className": "ReactiveOAuth2AuthorizedClientManagerConfigurationTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private static ReactiveOAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest> MOCK_RESPONSE_CLIENT;",
        "line": 102,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "MOCK_RESPONSE_CLIENT = mock(ReactiveOAuth2AccessTokenResponseClient.class);",
        "line": 126,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@BeforeEach",
            "@SuppressWarnings"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2RefreshTokenGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 194,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 217,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2ClientCredentialsGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 241,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 260,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2PasswordGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 282,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 305,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(JwtBearerGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 329,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 346,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(TokenExchangeGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 369,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 387,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "MOCK_RESPONSE_CLIENT",
    "variableType": "ReactiveOAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest>",
    "mockedClass": "ReactiveOAuth2AccessTokenResponseClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.reactive",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\reactive\\ReactiveOAuth2AuthorizedClientManagerConfigurationTests.java",
      "className": "ReactiveOAuth2AuthorizedClientManagerConfigurationTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private static ReactiveOAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest> MOCK_RESPONSE_CLIENT;",
        "line": 102,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "MOCK_RESPONSE_CLIENT = mock(ReactiveOAuth2AccessTokenResponseClient.class);",
        "line": 126,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@BeforeEach",
            "@SuppressWarnings"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2RefreshTokenGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 194,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 217,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2ClientCredentialsGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 241,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 260,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2PasswordGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 282,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 305,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(JwtBearerGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 329,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 346,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(TokenExchangeGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 369,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 387,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "MOCK_RESPONSE_CLIENT",
    "variableType": "ReactiveOAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest>",
    "mockedClass": "ReactiveOAuth2AccessTokenResponseClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.reactive",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\reactive\\ReactiveOAuth2AuthorizedClientManagerConfigurationTests.java",
      "className": "ReactiveOAuth2AuthorizedClientManagerConfigurationTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private static ReactiveOAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest> MOCK_RESPONSE_CLIENT;",
        "line": 102,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "MOCK_RESPONSE_CLIENT = mock(ReactiveOAuth2AccessTokenResponseClient.class);",
        "line": 126,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@BeforeEach",
            "@SuppressWarnings"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2RefreshTokenGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 194,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 217,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2ClientCredentialsGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 241,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 260,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2PasswordGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 282,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 305,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(JwtBearerGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 329,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 346,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(TokenExchangeGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 369,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 387,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "MOCK_RESPONSE_CLIENT",
    "variableType": "ReactiveOAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest>",
    "mockedClass": "ReactiveOAuth2AccessTokenResponseClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.reactive",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\reactive\\ReactiveOAuth2AuthorizedClientManagerConfigurationTests.java",
      "className": "ReactiveOAuth2AuthorizedClientManagerConfigurationTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private static ReactiveOAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest> MOCK_RESPONSE_CLIENT;",
        "line": 102,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "MOCK_RESPONSE_CLIENT = mock(ReactiveOAuth2AccessTokenResponseClient.class);",
        "line": 126,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@BeforeEach",
            "@SuppressWarnings"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2RefreshTokenGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 194,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 217,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2ClientCredentialsGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 241,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 260,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2PasswordGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 282,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 305,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(JwtBearerGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 329,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 346,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(TokenExchangeGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 369,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 387,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "MOCK_RESPONSE_CLIENT",
    "variableType": "ReactiveOAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest>",
    "mockedClass": "ReactiveOAuth2AccessTokenResponseClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.reactive",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\reactive\\ReactiveOAuth2AuthorizedClientManagerConfigurationTests.java",
      "className": "ReactiveOAuth2AuthorizedClientManagerConfigurationTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private static ReactiveOAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest> MOCK_RESPONSE_CLIENT;",
        "line": 102,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "MOCK_RESPONSE_CLIENT = mock(ReactiveOAuth2AccessTokenResponseClient.class);",
        "line": 126,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@BeforeEach",
            "@SuppressWarnings"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2RefreshTokenGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 194,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 217,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2ClientCredentialsGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 241,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 260,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2PasswordGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 282,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 305,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(JwtBearerGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 329,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 346,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(TokenExchangeGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 369,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 387,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "MOCK_RESPONSE_CLIENT",
    "variableType": "ReactiveOAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest>",
    "mockedClass": "ReactiveOAuth2AccessTokenResponseClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.reactive",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\reactive\\ReactiveOAuth2AuthorizedClientManagerConfigurationTests.java",
      "className": "ReactiveOAuth2AuthorizedClientManagerConfigurationTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private static ReactiveOAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest> MOCK_RESPONSE_CLIENT;",
        "line": 102,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "MOCK_RESPONSE_CLIENT = mock(ReactiveOAuth2AccessTokenResponseClient.class);",
        "line": 126,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@BeforeEach",
            "@SuppressWarnings"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2RefreshTokenGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 194,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 217,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2ClientCredentialsGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 241,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 260,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2PasswordGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 282,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 305,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(JwtBearerGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 329,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 346,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(TokenExchangeGrantRequest.class))).willReturn(Mono.just(accessTokenResponse));",
        "line": 369,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 387,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 8
  }
]
[
  {
    "variableName": "jwtAuthenticationConverter",
    "variableType": "Converter<Jwt,AbstractAuthenticationToken>",
    "mockedClass": "Converter<Jwt,AbstractAuthenticationToken>",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.server.resource.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-resource-server\\src\\test\\java\\org\\springframework\\security\\oauth2\\server\\resource\\authentication\\JwtAuthenticationProviderTests.java",
      "className": "JwtAuthenticationProviderTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nConverter<Jwt, AbstractAuthenticationToken> jwtAuthenticationConverter;",
        "line": 52,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.jwtAuthenticationConverter.convert(jwt)).willReturn(new JwtAuthenticationToken(jwt));",
        "line": 71,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenJwtDecodesThenAuthenticationHasAttributesContainedInJwt",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.jwtAuthenticationConverter.convert(jwt)).willReturn(authentication);",
        "line": 116,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenConverterReturnsAuthenticationThenProviderPropagatesIt",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.jwtAuthenticationConverter.convert(jwt)).willReturn(authentication);",
        "line": 129,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenConverterDoesNotSetAuthenticationDetailsThenProviderSetsItWithTokenDetails",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.jwtAuthenticationConverter.convert(jwt)).willReturn(authentication);",
        "line": 147,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenConverterSetsAuthenticationDetailsThenProviderDoesNotOverwriteIt",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
[
  {
    "variableName": "MOCK_RESPONSE_CLIENT",
    "variableType": "OAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest>",
    "mockedClass": "OAuth2AccessTokenResponseClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configuration",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configuration\\OAuth2AuthorizedClientManagerConfigurationTests.java",
      "className": "OAuth2AuthorizedClientManagerConfigurationTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private static OAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest> MOCK_RESPONSE_CLIENT;",
        "line": 98,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "MOCK_RESPONSE_CLIENT = mock(OAuth2AccessTokenResponseClient.class);",
        "line": 121,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@BeforeEach",
            "@SuppressWarnings"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2RefreshTokenGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 168,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 190,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2ClientCredentialsGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 214,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 232,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2PasswordGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 254,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 274,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(JwtBearerGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 298,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 314,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(TokenExchangeGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 337,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 355,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "MOCK_RESPONSE_CLIENT",
    "variableType": "OAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest>",
    "mockedClass": "OAuth2AccessTokenResponseClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configuration",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configuration\\OAuth2AuthorizedClientManagerConfigurationTests.java",
      "className": "OAuth2AuthorizedClientManagerConfigurationTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private static OAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest> MOCK_RESPONSE_CLIENT;",
        "line": 98,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "MOCK_RESPONSE_CLIENT = mock(OAuth2AccessTokenResponseClient.class);",
        "line": 121,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@BeforeEach",
            "@SuppressWarnings"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2RefreshTokenGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 168,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 190,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2ClientCredentialsGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 214,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 232,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2PasswordGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 254,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 274,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(JwtBearerGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 298,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 314,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(TokenExchangeGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 337,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 355,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "MOCK_RESPONSE_CLIENT",
    "variableType": "OAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest>",
    "mockedClass": "OAuth2AccessTokenResponseClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configuration",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configuration\\OAuth2AuthorizedClientManagerConfigurationTests.java",
      "className": "OAuth2AuthorizedClientManagerConfigurationTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private static OAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest> MOCK_RESPONSE_CLIENT;",
        "line": 98,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "MOCK_RESPONSE_CLIENT = mock(OAuth2AccessTokenResponseClient.class);",
        "line": 121,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@BeforeEach",
            "@SuppressWarnings"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2RefreshTokenGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 168,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 190,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2ClientCredentialsGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 214,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 232,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2PasswordGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 254,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 274,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(JwtBearerGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 298,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 314,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(TokenExchangeGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 337,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 355,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "MOCK_RESPONSE_CLIENT",
    "variableType": "OAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest>",
    "mockedClass": "OAuth2AccessTokenResponseClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configuration",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configuration\\OAuth2AuthorizedClientManagerConfigurationTests.java",
      "className": "OAuth2AuthorizedClientManagerConfigurationTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private static OAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest> MOCK_RESPONSE_CLIENT;",
        "line": 98,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "MOCK_RESPONSE_CLIENT = mock(OAuth2AccessTokenResponseClient.class);",
        "line": 121,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@BeforeEach",
            "@SuppressWarnings"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2RefreshTokenGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 168,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 190,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2ClientCredentialsGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 214,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 232,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2PasswordGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 254,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 274,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(JwtBearerGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 298,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 314,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(TokenExchangeGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 337,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 355,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "MOCK_RESPONSE_CLIENT",
    "variableType": "OAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest>",
    "mockedClass": "OAuth2AccessTokenResponseClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configuration",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configuration\\OAuth2AuthorizedClientManagerConfigurationTests.java",
      "className": "OAuth2AuthorizedClientManagerConfigurationTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private static OAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest> MOCK_RESPONSE_CLIENT;",
        "line": 98,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "MOCK_RESPONSE_CLIENT = mock(OAuth2AccessTokenResponseClient.class);",
        "line": 121,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@BeforeEach",
            "@SuppressWarnings"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2RefreshTokenGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 168,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 190,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2ClientCredentialsGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 214,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 232,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2PasswordGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 254,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 274,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(JwtBearerGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 298,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 314,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(TokenExchangeGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 337,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 355,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "MOCK_RESPONSE_CLIENT",
    "variableType": "OAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest>",
    "mockedClass": "OAuth2AccessTokenResponseClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configuration",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configuration\\OAuth2AuthorizedClientManagerConfigurationTests.java",
      "className": "OAuth2AuthorizedClientManagerConfigurationTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private static OAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest> MOCK_RESPONSE_CLIENT;",
        "line": 98,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "MOCK_RESPONSE_CLIENT = mock(OAuth2AccessTokenResponseClient.class);",
        "line": 121,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@BeforeEach",
            "@SuppressWarnings"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2RefreshTokenGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 168,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 190,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2ClientCredentialsGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 214,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 232,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2PasswordGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 254,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 274,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(JwtBearerGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 298,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 314,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(TokenExchangeGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 337,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 355,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "MOCK_RESPONSE_CLIENT",
    "variableType": "OAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest>",
    "mockedClass": "OAuth2AccessTokenResponseClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.http",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\http\\OAuth2AuthorizedClientManagerRegistrarTests.java",
      "className": "OAuth2AuthorizedClientManagerRegistrarTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private static OAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest> MOCK_RESPONSE_CLIENT;",
        "line": 96,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "MOCK_RESPONSE_CLIENT = mock(OAuth2AccessTokenResponseClient.class);",
        "line": 119,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@BeforeEach",
            "@SuppressWarnings"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2RefreshTokenGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 166,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 188,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2ClientCredentialsGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 212,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 230,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2PasswordGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 252,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 272,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(JwtBearerGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 296,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 312,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(TokenExchangeGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 335,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 353,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "MOCK_RESPONSE_CLIENT",
    "variableType": "OAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest>",
    "mockedClass": "OAuth2AccessTokenResponseClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.http",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\http\\OAuth2AuthorizedClientManagerRegistrarTests.java",
      "className": "OAuth2AuthorizedClientManagerRegistrarTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private static OAuth2AccessTokenResponseClient<? super AbstractOAuth2AuthorizationGrantRequest> MOCK_RESPONSE_CLIENT;",
        "line": 96,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "MOCK_RESPONSE_CLIENT = mock(OAuth2AccessTokenResponseClient.class);",
        "line": 119,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@BeforeEach",
            "@SuppressWarnings"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2RefreshTokenGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 166,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 188,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRefreshTokenGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2ClientCredentialsGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 212,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 230,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClientCredentialsGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(OAuth2PasswordGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 252,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 272,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPasswordGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(JwtBearerGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 296,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 312,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testJwtBearerGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(MOCK_RESPONSE_CLIENT.getTokenResponse(any(TokenExchangeGrantRequest.class))).willReturn(accessTokenResponse);",
        "line": 335,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(MOCK_RESPONSE_CLIENT).getTokenResponse(grantRequestCaptor.capture());",
        "line": 353,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTokenExchangeGrant",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 8
  }
]
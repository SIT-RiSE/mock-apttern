[
  {
    "variableName": "chain",
    "variableType": "WebFilterChain",
    "mockedClass": "WebFilterChain",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.web.server.authorization",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\authorization\\AuthorizationWebFilterTests.java",
      "className": "AuthorizationWebFilterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate WebFilterChain chain;",
        "line": 48,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(this.exchange)).willReturn(this.chainResult.mono());",
        "line": 55,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenNoSecurityContextThenThrowsAccessDenied",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(this.exchange)).willReturn(this.chainResult.mono());",
        "line": 65,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenNoAuthenticationThenThrowsAccessDenied",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(this.exchange)).willReturn(this.chainResult.mono());",
        "line": 76,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenAuthenticationThenThrowsAccessDenied",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(this.exchange)).willReturn(this.chainResult.mono());",
        "line": 89,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenDoesNotAccessAuthenticationThenSecurityContextNotSubscribed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(this.exchange)).willReturn(this.chainResult.mono());",
        "line": 102,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenGrantedAndDoesNotAccessAuthenticationThenChainSubscribedAndSecurityContextNotSubscribed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(this.exchange)).willReturn(this.chainResult.mono());",
        "line": 115,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenGrantedAndDoeAccessAuthenticationThenChainSubscribedAndSecurityContextSubscribed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "chain",
    "variableType": "WebFilterChain",
    "mockedClass": "WebFilterChain",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.web.server.authorization",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\authorization\\ExceptionTranslationWebFilterTests.java",
      "className": "ExceptionTranslationWebFilterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate WebFilterChain chain;",
        "line": 60,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(this.exchange)).willReturn(Mono.empty());",
        "line": 83,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenNoExceptionThenNotHandled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(this.exchange)).willReturn(Mono.error(new IllegalArgumentException(\"oops\")));",
        "line": 91,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenNotAccessDeniedExceptionThenNotHandled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(this.exchange)).willReturn(Mono.error(new AccessDeniedException(\"Not Authorized\")));",
        "line": 103,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenAccessDeniedExceptionAndNotAuthenticatedThenHandled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(this.exchange)).willReturn(Mono.error(new AccessDeniedException(\"Not Authorized\")));",
        "line": 114,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenDefaultsAndAccessDeniedExceptionAndAuthenticatedThenForbidden",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(this.exchange)).willReturn(Mono.error(new AccessDeniedException(\"Not Authorized\")));",
        "line": 124,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenDefaultsAndAccessDeniedExceptionAndNotAuthenticatedThenUnauthorized",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(this.exchange)).willReturn(Mono.error(new AccessDeniedException(\"Not Authorized\")));",
        "line": 134,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenAccessDeniedExceptionAndAuthenticatedThenHandled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(this.exchange)).willReturn(Mono.error(new AccessDeniedException(\"Not Authorized\")));",
        "line": 144,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenAccessDeniedExceptionAndAnonymousAuthenticatedThenHandled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "chain",
    "variableType": "WebFilterChain",
    "mockedClass": "WebFilterChain",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.web.server.csrf",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\csrf\\CsrfWebFilterTests.java",
      "className": "CsrfWebFilterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate WebFilterChain chain;",
        "line": 58,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(this.get)).willReturn(chainResult.mono());",
        "line": 84,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenGetThenSessionNotCreatedAndChainContinues",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(any())).willReturn(chainResult.mono());",
        "line": 124,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPostAndEstablishedCsrfTokenAndRequestParamValidTokenThenContinues",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(any())).willReturn(chainResult.mono());",
        "line": 151,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPostAndEstablishedCsrfTokenAndHeaderValidTokenThenContinues",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(any())).willReturn(chainResult.mono());",
        "line": 171,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenRequestHandlerSetThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(any())).willReturn(chainResult.mono());",
        "line": 188,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenXorServerCsrfTokenRequestAttributeHandlerAndValidTokenThenSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(any())).willReturn(chainResult.mono());",
        "line": 228,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenSkipExchangeInvokedThenSkips",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(any())).willReturn(Mono.empty());",
        "line": 348,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenSubscribingCsrfTokenMultipleTimesThenGenerateOnlyOnce",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "chain",
    "variableType": "WebFilterChain",
    "mockedClass": "WebFilterChain",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.web.server.csrf",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\csrf\\CsrfWebFilterTests.java",
      "className": "CsrfWebFilterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate WebFilterChain chain;",
        "line": 58,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(this.get)).willReturn(chainResult.mono());",
        "line": 84,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenGetThenSessionNotCreatedAndChainContinues",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(any())).willReturn(chainResult.mono());",
        "line": 124,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPostAndEstablishedCsrfTokenAndRequestParamValidTokenThenContinues",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(any())).willReturn(chainResult.mono());",
        "line": 151,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPostAndEstablishedCsrfTokenAndHeaderValidTokenThenContinues",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(any())).willReturn(chainResult.mono());",
        "line": 171,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenRequestHandlerSetThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(any())).willReturn(chainResult.mono());",
        "line": 188,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenXorServerCsrfTokenRequestAttributeHandlerAndValidTokenThenSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(any())).willReturn(chainResult.mono());",
        "line": 228,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenSkipExchangeInvokedThenSkips",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(any())).willReturn(Mono.empty());",
        "line": 348,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenSubscribingCsrfTokenMultipleTimesThenGenerateOnlyOnce",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "chain",
    "variableType": "WebFilterChain",
    "mockedClass": "WebFilterChain",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.web.server.transport",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\transport\\HttpsRedirectWebFilterTests.java",
      "className": "HttpsRedirectWebFilterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nWebFilterChain chain;",
        "line": 52,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(any(ServerWebExchange.class))).willReturn(Mono.empty());",
        "line": 62,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenExchangeIsInsecureThenRedirects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(any(ServerWebExchange.class))).willReturn(Mono.empty());",
        "line": 71,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenExchangeIsSecureThenNoRedirect",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(any(ServerWebExchange.class))).willReturn(Mono.empty());",
        "line": 79,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenExchangeMismatchesThenNoRedirect",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(any(ServerWebExchange.class))).willReturn(Mono.empty());",
        "line": 91,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenExchangeMatchesAndRequestIsInsecureThenRedirects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(any(ServerWebExchange.class))).willReturn(Mono.empty());",
        "line": 104,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenRequestIsInsecureThenPortMapperRemapsPort",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(any(ServerWebExchange.class))).willReturn(Mono.empty());",
        "line": 117,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenRequestIsInsecureAndNoPortMappingThenThrowsIllegalState",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.chain.filter(any(ServerWebExchange.class))).willReturn(Mono.empty());",
        "line": 124,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenInsecureRequestHasAPathThenRedirects",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
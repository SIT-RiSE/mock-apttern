[
  {
    "variableName": "oneTimeTokenService",
    "variableType": "ReactiveOneTimeTokenService",
    "mockedClass": "ReactiveOneTimeTokenService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.server.authentication.ott",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\authentication\\ott\\GenerateOneTimeTokenWebFilterTests.java",
      "className": "GenerateOneTimeTokenWebFilterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private final ReactiveOneTimeTokenService oneTimeTokenService = mock(ReactiveOneTimeTokenService.class);",
        "line": 46,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.oneTimeTokenService.generate(ArgumentMatchers.any(GenerateOneTimeTokenRequest.class))).willReturn(Mono.just(new DefaultOneTimeToken(TOKEN, USERNAME, Instant.now())));",
        "line": 57,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenUsernameFormParamIsPresentThenSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.oneTimeTokenService).generate(ArgumentMatchers.any(GenerateOneTimeTokenRequest.class));",
        "line": 67,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenUsernameFormParamIsPresentThenSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.oneTimeTokenService.generate(ArgumentMatchers.any(GenerateOneTimeTokenRequest.class))).willReturn(Mono.just(new DefaultOneTimeToken(TOKEN, USERNAME, Instant.now())));",
        "line": 73,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenUsernameFormParamIsEmptyThenNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.oneTimeTokenService, never()).generate(ArgumentMatchers.any(GenerateOneTimeTokenRequest.class));",
        "line": 82,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenUsernameFormParamIsEmptyThenNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  }
]
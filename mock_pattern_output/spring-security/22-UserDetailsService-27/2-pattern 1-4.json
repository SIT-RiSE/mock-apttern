[
  {
    "variableName": "userDetailsService",
    "variableType": "UserDetailsService",
    "mockedClass": "UserDetailsService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.authentication.dao",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\authentication\\dao\\DaoAuthenticationProviderTests.java",
      "className": "DaoAuthenticationProviderTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "UserDetailsService userDetailsService = mock(UserDetailsService.class);",
        "line": 277,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenSuccessAndPasswordManagerThenUpdates",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(userDetailsService.loadUserByUsername(any())).willReturn(user);",
        "line": 287,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenSuccessAndPasswordManagerThenUpdates",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "userDetailsService",
    "variableType": "UserDetailsService",
    "mockedClass": "UserDetailsService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.authentication.dao",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\authentication\\dao\\DaoAuthenticationProviderTests.java",
      "className": "DaoAuthenticationProviderTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "UserDetailsService userDetailsService = mock(UserDetailsService.class);",
        "line": 299,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenBadCredentialsAndPasswordManagerThenNoUpdate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(userDetailsService.loadUserByUsername(any())).willReturn(user);",
        "line": 307,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenBadCredentialsAndPasswordManagerThenNoUpdate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "userDetailsService",
    "variableType": "UserDetailsService",
    "mockedClass": "UserDetailsService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.authentication.dao",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\authentication\\dao\\DaoAuthenticationProviderTests.java",
      "className": "DaoAuthenticationProviderTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "UserDetailsService userDetailsService = mock(UserDetailsService.class);",
        "line": 317,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenNotUpgradeAndPasswordManagerThenNoUpdate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(userDetailsService.loadUserByUsername(any())).willReturn(user);",
        "line": 326,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenNotUpgradeAndPasswordManagerThenNoUpdate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "uds",
    "variableType": "UserDetailsService",
    "mockedClass": "UserDetailsService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.ldap.userdetails",
      "filePath": "C:\\java tool\\Spring\\spring-security\\ldap\\src\\test\\java\\org\\springframework\\security\\ldap\\userdetails\\UserDetailsServiceLdapAuthoritiesPopulatorTests.java",
      "className": "UserDetailsServiceLdapAuthoritiesPopulatorTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "UserDetailsService uds = mock(UserDetailsService.class);",
        "line": 42,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "delegationToUserDetailsServiceReturnsCorrectRoles",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(uds.loadUserByUsername(\"joe\")).willReturn(user);",
        "line": 44,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "delegationToUserDetailsServiceReturnsCorrectRoles",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
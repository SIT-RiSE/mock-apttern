[
  {
    "variableName": "authenticationConverter",
    "variableType": "ServerAuthenticationConverter",
    "mockedClass": "ServerAuthenticationConverter",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.server.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\authentication\\AuthenticationWebFilterTests.java",
      "className": "AuthenticationWebFilterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ServerAuthenticationConverter authenticationConverter;",
        "line": 58,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationConverter.convert(any())).willReturn(Mono.empty());",
        "line": 194,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenConvertEmptyThenOk",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationConverter.convert(any())).willReturn(Mono.error(new RuntimeException(\"Unexpected\")));",
        "line": 210,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenConvertErrorThenServerError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationConverter.convert(any())).willReturn(authentication);",
        "line": 220,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenConvertAndAuthenticationSuccessThenSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationConverter.convert(any())).willReturn(authentication);",
        "line": 234,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenConvertAndAuthenticationEmptyThenServerError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(this.authenticationConverter, this.authenticationManager, this.successHandler);",
        "line": 256,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenNotMatchAndConvertAndAuthenticationSuccessThenContinues",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationConverter.convert(any())).willReturn(authentication);",
        "line": 262,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenConvertAndAuthenticationFailThenEntryPoint",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationConverter.convert(any())).willReturn(authentication);",
        "line": 276,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenConvertAndAuthenticationExceptionThenServerError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  }
]
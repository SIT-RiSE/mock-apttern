[
  {
    "variableName": "authentication",
    "variableType": "Authentication",
    "mockedClass": "Authentication",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.client",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-client\\src\\test\\java\\org\\springframework\\security\\oauth2\\client\\InMemoryOAuth2AuthorizedClientServiceTests.java",
      "className": "InMemoryOAuth2AuthorizedClientServiceTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Authentication authentication = mock(Authentication.class);",
        "line": 120,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadAuthorizedClientWhenClientRegistrationFoundAndAssociatedToPrincipalThenReturnAuthorizedClient",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(authentication.getName()).willReturn(this.principalName1);",
        "line": 121,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadAuthorizedClientWhenClientRegistrationFoundAndAssociatedToPrincipalThenReturnAuthorizedClient",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "authentication",
    "variableType": "Authentication",
    "mockedClass": "Authentication",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.client",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-client\\src\\test\\java\\org\\springframework\\security\\oauth2\\client\\InMemoryOAuth2AuthorizedClientServiceTests.java",
      "className": "InMemoryOAuth2AuthorizedClientServiceTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Authentication authentication = mock(Authentication.class);",
        "line": 144,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "saveAuthorizedClientWhenSavedThenCanLoad",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(authentication.getName()).willReturn(this.principalName2);",
        "line": 145,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "saveAuthorizedClientWhenSavedThenCanLoad",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "authentication",
    "variableType": "Authentication",
    "mockedClass": "Authentication",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.client",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-client\\src\\test\\java\\org\\springframework\\security\\oauth2\\client\\InMemoryOAuth2AuthorizedClientServiceTests.java",
      "className": "InMemoryOAuth2AuthorizedClientServiceTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Authentication authentication = mock(Authentication.class);",
        "line": 168,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeAuthorizedClientWhenSavedThenRemoved",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(authentication.getName()).willReturn(this.principalName2);",
        "line": 169,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeAuthorizedClientWhenSavedThenRemoved",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
[
  {
    "variableName": "repository",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.context",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\context\\SecurityContextHolderFilterTests.java",
      "className": "SecurityContextHolderFilterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate SecurityContextRepository repository;",
        "line": 58,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadDeferredContext(this.requestArg.capture())).willReturn(new SupplierDeferredSecurityContext(() -> expectedContext, this.strategy));",
        "line": 89,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterThenSetsAndClearsSecurityContextHolder",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadDeferredContext(this.requestArg.capture())).willReturn(new SupplierDeferredSecurityContext(() -> expectedContext, this.strategy));",
        "line": 103,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterThenSetsAndClearsSecurityContextHolderStrategy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoInteractions(this.repository, this.response);",
        "line": 122,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenFilterAppliedThenDoNothing",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadDeferredContext(this.requestArg.capture())).willReturn(new SupplierDeferredSecurityContext(SecurityContextHolder::createEmptyContext, this.strategy));",
        "line": 127,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenNotAppliedThenSetsAndRemovesAttribute",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "inOrder.verify(this.repository).loadDeferredContext(this.request);",
        "line": 134,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenNotAppliedThenSetsAndRemovesAttribute",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadDeferredContext(this.requestArg.capture())).willReturn(new SupplierDeferredSecurityContext(() -> expectedContext, this.strategy));",
        "line": 144,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenAnyDispatcherTypeThenFilter",
          "methodAnnotations": [
            "@ParameterizedTest",
            "@EnumSource"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "repository",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.context",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\context\\SecurityContextRepositoryTests.java",
      "className": "SecurityContextRepositoryTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "SecurityContextRepository repository = spy(SecurityContextRepository.class);",
        "line": 37,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.repository.loadContext(any(HttpRequestResponseHolder.class))).willReturn(new SecurityContextImpl());",
        "line": 41,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextHttpRequestResponseHolderWhenInvokeSupplierTwiceThenOnlyInvokesLoadContextOnce",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.repository).loadDeferredContext(any(HttpServletRequest.class));",
        "line": 43,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextHttpRequestResponseHolderWhenInvokeSupplierTwiceThenOnlyInvokesLoadContextOnce",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.repository).loadContext(any(HttpRequestResponseHolder.class));",
        "line": 45,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextHttpRequestResponseHolderWhenInvokeSupplierTwiceThenOnlyInvokesLoadContextOnce",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(this.repository);",
        "line": 47,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextHttpRequestResponseHolderWhenInvokeSupplierTwiceThenOnlyInvokesLoadContextOnce",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  }
]
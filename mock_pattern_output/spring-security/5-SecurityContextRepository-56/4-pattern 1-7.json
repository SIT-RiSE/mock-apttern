[
  {
    "variableName": "delegate2",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.web.context",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\context\\DelegatingSecurityContextRepositoryTests.java",
      "className": "DelegatingSecurityContextRepositoryTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextRepository delegate2 = mock(SecurityContextRepository.class);",
        "line": 148,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextWhenSecondDelegateReturnsThenContextFromSecondDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(delegate2.loadContext(holder)).willReturn(securityContext2);",
        "line": 155,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextWhenSecondDelegateReturnsThenContextFromSecondDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(delegate2.containsContext(holder.getRequest())).willReturn(true);",
        "line": 156,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextWhenSecondDelegateReturnsThenContextFromSecondDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "delegate1",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.web.context",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\context\\DelegatingSecurityContextRepositoryTests.java",
      "className": "DelegatingSecurityContextRepositoryTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextRepository delegate1 = mock(SecurityContextRepository.class);",
        "line": 147,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextWhenSecondDelegateReturnsThenContextFromSecondDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(delegate1.loadContext(holder)).willReturn(securityContext1);",
        "line": 153,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextWhenSecondDelegateReturnsThenContextFromSecondDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(delegate1.containsContext(holder.getRequest())).willReturn(false);",
        "line": 154,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextWhenSecondDelegateReturnsThenContextFromSecondDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "delegate2",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.web.context",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\context\\DelegatingSecurityContextRepositoryTests.java",
      "className": "DelegatingSecurityContextRepositoryTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextRepository delegate2 = mock(SecurityContextRepository.class);",
        "line": 168,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextWhenBothDelegateReturnsThenContextFromSecondDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(delegate2.loadContext(holder)).willReturn(securityContext2);",
        "line": 175,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextWhenBothDelegateReturnsThenContextFromSecondDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(delegate2.containsContext(holder.getRequest())).willReturn(true);",
        "line": 176,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextWhenBothDelegateReturnsThenContextFromSecondDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "delegate1",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.web.context",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\context\\DelegatingSecurityContextRepositoryTests.java",
      "className": "DelegatingSecurityContextRepositoryTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextRepository delegate1 = mock(SecurityContextRepository.class);",
        "line": 167,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextWhenBothDelegateReturnsThenContextFromSecondDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(delegate1.loadContext(holder)).willReturn(securityContext1);",
        "line": 173,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextWhenBothDelegateReturnsThenContextFromSecondDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(delegate1.containsContext(holder.getRequest())).willReturn(true);",
        "line": 174,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextWhenBothDelegateReturnsThenContextFromSecondDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "delegate2",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.web.context",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\context\\DelegatingSecurityContextRepositoryTests.java",
      "className": "DelegatingSecurityContextRepositoryTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextRepository delegate2 = mock(SecurityContextRepository.class);",
        "line": 188,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextWhenFirstDelegateReturnsThenContextFromFirstDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(delegate2.loadContext(holder)).willReturn(securityContext2);",
        "line": 195,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextWhenFirstDelegateReturnsThenContextFromFirstDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(delegate2.containsContext(holder.getRequest())).willReturn(false);",
        "line": 196,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextWhenFirstDelegateReturnsThenContextFromFirstDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "delegate1",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.web.context",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\context\\DelegatingSecurityContextRepositoryTests.java",
      "className": "DelegatingSecurityContextRepositoryTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextRepository delegate1 = mock(SecurityContextRepository.class);",
        "line": 187,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextWhenFirstDelegateReturnsThenContextFromFirstDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(delegate1.loadContext(holder)).willReturn(securityContext1);",
        "line": 193,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextWhenFirstDelegateReturnsThenContextFromFirstDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(delegate1.containsContext(holder.getRequest())).willReturn(true);",
        "line": 194,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadContextWhenFirstDelegateReturnsThenContextFromFirstDelegate",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "repo",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.web.session",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\session\\SessionManagementFilterTests.java",
      "className": "SessionManagementFilterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextRepository repo = mock(SecurityContextRepository.class);",
        "line": 76,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "strategyIsNotInvokedIfSecurityContextAlreadyExistsForRequest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// mock that repo contains a security context\r\ngiven(repo.containsContext(any(HttpServletRequest.class))).willReturn(true);",
        "line": 79,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "strategyIsNotInvokedIfSecurityContextAlreadyExistsForRequest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
[
  {
    "variableName": "securityContextRepository",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.cas.web",
      "filePath": "C:\\java tool\\Spring\\spring-security\\cas\\src\\test\\java\\org\\springframework\\security\\cas\\web\\CasAuthenticationFilterTests.java",
      "className": "CasAuthenticationFilterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextRepository securityContextRepository = mock(SecurityContextRepository.class);",
        "line": 222,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "successfulAuthenticationWhenProxyRequestThenSavesSecurityContext",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(securityContextRepository).saveContext(any(SecurityContext.class), eq(request), eq(response));",
        "line": 226,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "successfulAuthenticationWhenProxyRequestThenSavesSecurityContext",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "securityContextRepository",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.cas.web",
      "filePath": "C:\\java tool\\Spring\\spring-security\\cas\\src\\test\\java\\org\\springframework\\security\\cas\\web\\CasAuthenticationFilterTests.java",
      "className": "CasAuthenticationFilterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextRepository securityContextRepository = mock(SecurityContextRepository.class);",
        "line": 250,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "successfulAuthenticationWhenSecurityContextRepositorySetThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(securityContextRepository).saveContext(any(SecurityContext.class), any(), any());",
        "line": 255,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "successfulAuthenticationWhenSecurityContextRepositorySetThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "securityContextRepository",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.server.resource.web.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-resource-server\\src\\test\\java\\org\\springframework\\security\\oauth2\\server\\resource\\web\\authentication\\BearerTokenAuthenticationFilterTests.java",
      "className": "BearerTokenAuthenticationFilterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextRepository securityContextRepository = mock(SecurityContextRepository.class);",
        "line": 119,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenSecurityContextRepositoryThenSaves",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(securityContextRepository).saveContext(contextArg.capture(), eq(this.request), eq(this.response));",
        "line": 133,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenSecurityContextRepositoryThenSaves",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "repository",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\authentication\\AbstractAuthenticationProcessingFilterTests.java",
      "className": "AbstractAuthenticationProcessingFilterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextRepository repository = mock(SecurityContextRepository.class);",
        "line": 354,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSuccessfulAuthenticationWhenCustomSecurityContextRepositoryThenAuthenticationSaved",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(repository).saveContext(contextCaptor.capture(), eq(request), eq(response));",
        "line": 364,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSuccessfulAuthenticationWhenCustomSecurityContextRepositoryThenAuthenticationSaved",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "securityContextRepository",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\authentication\\AuthenticationFilterTests.java",
      "className": "AuthenticationFilterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextRepository securityContextRepository = mock(SecurityContextRepository.class);",
        "line": 305,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenCustomSecurityContextRepositoryAndSuccessfulAuthenticationRepositoryUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(securityContextRepository).saveContext(securityContextArg.capture(), eq(request), eq(response));",
        "line": 317,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenCustomSecurityContextRepositoryAndSuccessfulAuthenticationRepositoryUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "repository",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.authentication.logout",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\authentication\\logout\\SecurityContextLogoutHandlerTests.java",
      "className": "SecurityContextLogoutHandlerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextRepository repository = mock(SecurityContextRepository.class);",
        "line": 88,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "logoutWhenSecurityContextRepositoryThenSaveEmptyContext",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(repository).saveContext(eq(SecurityContextHolder.createEmptyContext()), any(), any());",
        "line": 91,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "logoutWhenSecurityContextRepositoryThenSaveEmptyContext",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "repository",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.authentication.logout",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\authentication\\logout\\SecurityContextLogoutHandlerTests.java",
      "className": "SecurityContextLogoutHandlerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextRepository repository = mock(SecurityContextRepository.class);",
        "line": 96,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "logoutWhenClearAuthenticationFalseThenSaveEmptyContext",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(repository).saveContext(eq(SecurityContextHolder.createEmptyContext()), any(), any());",
        "line": 100,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "logoutWhenClearAuthenticationFalseThenSaveEmptyContext",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "securityContextRepository",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.authentication.preauth",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\authentication\\preauth\\AbstractPreAuthenticatedProcessingFilterTests.java",
      "className": "AbstractPreAuthenticatedProcessingFilterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextRepository securityContextRepository = mock(SecurityContextRepository.class);",
        "line": 218,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "securityContextRepository",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(securityContextRepository).saveContext(contextArg.capture(), eq(request), eq(response));",
        "line": 237,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "securityContextRepository",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "securityContextRepository",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.authentication.rememberme",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\authentication\\rememberme\\RememberMeAuthenticationFilterTests.java",
      "className": "RememberMeAuthenticationFilterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextRepository securityContextRepository = mock(SecurityContextRepository.class);",
        "line": 159,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "securityContextRepositoryInvokedIfSet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(securityContextRepository).saveContext(any(), eq(request), eq(response));",
        "line": 171,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "securityContextRepositoryInvokedIfSet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "securityContextRepository",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.authentication.switchuser",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\authentication\\switchuser\\SwitchUserFilterTests.java",
      "className": "SwitchUserFilterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextRepository securityContextRepository = mock(SecurityContextRepository.class);",
        "line": 521,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenSwitchUserThenSaveSecurityContext",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(securityContextRepository).saveContext(any(), any(), any());",
        "line": 535,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenSwitchUserThenSaveSecurityContext",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "securityContextRepository",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.authentication.switchuser",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\authentication\\switchuser\\SwitchUserFilterTests.java",
      "className": "SwitchUserFilterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextRepository securityContextRepository = mock(SecurityContextRepository.class);",
        "line": 548,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenExitUserThenSaveSecurityContext",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(securityContextRepository).saveContext(any(), any(), any());",
        "line": 562,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenExitUserThenSaveSecurityContext",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "securityContextRepository",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.authentication.www",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\authentication\\www\\BasicAuthenticationFilterTests.java",
      "className": "BasicAuthenticationFilterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextRepository securityContextRepository = mock(SecurityContextRepository.class);",
        "line": 401,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "requestWhenSecurityContextRepository",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(securityContextRepository).saveContext(contextArg.capture(), eq(request), eq(response));",
        "line": 415,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "requestWhenSecurityContextRepository",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "securityContextRepository",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.authentication.www",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\authentication\\www\\DigestAuthenticationFilterTests.java",
      "className": "DigestAuthenticationFilterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextRepository securityContextRepository = mock(SecurityContextRepository.class);",
        "line": 418,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSecurityContextRepository",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(securityContextRepository).saveContext(contextArg.capture(), eq(this.request), eq(response));",
        "line": 433,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSecurityContextRepository",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "securityContextRepository",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.session",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\session\\SessionManagementFilterTests.java",
      "className": "SessionManagementFilterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextRepository securityContextRepository = mock(SecurityContextRepository.class);",
        "line": 192,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "responseIsRedirectedToRequestedUrlIfContextPathIsSetAndSessionIsInvalid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// then\r\nverify(securityContextRepository).containsContext(request);",
        "line": 209,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "responseIsRedirectedToRequestedUrlIfContextPathIsSetAndSessionIsInvalid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(securityContextRepository, sessionAuthenticationStrategy, chain);",
        "line": 210,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "responseIsRedirectedToRequestedUrlIfContextPathIsSetAndSessionIsInvalid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "securityContextRepository",
    "variableType": "SecurityContextRepository",
    "mockedClass": "SecurityContextRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.session",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\session\\SessionManagementFilterTests.java",
      "className": "SessionManagementFilterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "SecurityContextRepository securityContextRepository = mock(SecurityContextRepository.class);",
        "line": 224,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "responseIsRedirectedToRequestedUrlIfStatusCodeIsSetAndSessionIsInvalid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// then\r\nverify(securityContextRepository).containsContext(request);",
        "line": 240,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "responseIsRedirectedToRequestedUrlIfStatusCodeIsSetAndSessionIsInvalid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(securityContextRepository, sessionAuthenticationStrategy, chain);",
        "line": 241,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "responseIsRedirectedToRequestedUrlIfStatusCodeIsSetAndSessionIsInvalid",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  }
]
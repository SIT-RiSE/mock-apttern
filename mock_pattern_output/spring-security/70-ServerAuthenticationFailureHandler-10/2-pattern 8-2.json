[
  {
    "variableName": "failureHandler",
    "variableType": "ServerAuthenticationFailureHandler",
    "mockedClass": "ServerAuthenticationFailureHandler",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.server.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\authentication\\AuthenticationWebFilterTests.java",
      "className": "AuthenticationWebFilterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ServerAuthenticationFailureHandler failureHandler;",
        "line": 64,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(this.authenticationManager, this.successHandler, this.failureHandler);",
        "line": 205,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenConvertEmptyThenOk",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(this.authenticationManager, this.successHandler, this.failureHandler);",
        "line": 214,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenConvertErrorThenServerError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(this.failureHandler);",
        "line": 228,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenConvertAndAuthenticationSuccessThenSuccess",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(this.successHandler, this.failureHandler);",
        "line": 239,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenConvertAndAuthenticationEmptyThenServerError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.failureHandler.onAuthenticationFailure(any(), any())).willReturn(Mono.empty());",
        "line": 265,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenConvertAndAuthenticationFailThenEntryPoint",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.failureHandler).onAuthenticationFailure(any(), any());",
        "line": 268,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenConvertAndAuthenticationFailThenEntryPoint",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(this.successHandler, this.failureHandler);",
        "line": 281,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenConvertAndAuthenticationExceptionThenServerError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "failureHandler",
    "variableType": "ServerAuthenticationFailureHandler",
    "mockedClass": "ServerAuthenticationFailureHandler",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.server.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\authentication\\SwitchUserWebFilterTests.java",
      "className": "SwitchUserWebFilterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ServerAuthenticationFailureHandler failureHandler;",
        "line": 80,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoInteractions(this.failureHandler);",
        "line": 101,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "switchUserWhenRequestNotMatchThenDoesNothing",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.failureHandler.onAuthenticationFailure(any(WebFilterExchange.class), any(DisabledException.class))).willReturn(Mono.empty());",
        "line": 204,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "switchUserWhenExceptionThenCallFailureHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.failureHandler).onAuthenticationFailure(any(WebFilterExchange.class), any(DisabledException.class));",
        "line": 209,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "switchUserWhenExceptionThenCallFailureHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  }
]
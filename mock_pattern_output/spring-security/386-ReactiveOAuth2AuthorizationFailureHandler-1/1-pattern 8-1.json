[
  {
    "variableName": "authorizationFailureHandler",
    "variableType": "ReactiveOAuth2AuthorizationFailureHandler",
    "mockedClass": "ReactiveOAuth2AuthorizationFailureHandler",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.client.web.reactive.function.client",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-client\\src\\test\\java\\org\\springframework\\security\\oauth2\\client\\web\\reactive\\function\\client\\ServerOAuth2AuthorizedClientExchangeFilterFunctionTests.java",
      "className": "ServerOAuth2AuthorizedClientExchangeFilterFunctionTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ReactiveOAuth2AuthorizationFailureHandler authorizationFailureHandler;",
        "line": 144,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authorizationFailureHandler.onAuthorizationFailure(any(), any(), any())).willReturn(publisherProbe.mono());",
        "line": 488,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenUnauthorizedThenInvokeFailureHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.authorizationFailureHandler).onAuthorizationFailure(this.authorizationExceptionCaptor.capture(), this.authenticationCaptor.capture(), this.attributesCaptor.capture());",
        "line": 501,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenUnauthorizedThenInvokeFailureHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authorizationFailureHandler.onAuthorizationFailure(any(), any(), any())).willReturn(publisherProbe.mono());",
        "line": 519,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenUnauthorizedWithWebClientExceptionThenInvokeFailureHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.authorizationFailureHandler).onAuthorizationFailure(this.authorizationExceptionCaptor.capture(), this.authenticationCaptor.capture(), this.attributesCaptor.capture());",
        "line": 542,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenUnauthorizedWithWebClientExceptionThenInvokeFailureHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authorizationFailureHandler.onAuthorizationFailure(any(), any(), any())).willReturn(publisherProbe.mono());",
        "line": 563,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenForbiddenThenInvokeFailureHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.authorizationFailureHandler).onAuthorizationFailure(this.authorizationExceptionCaptor.capture(), this.authenticationCaptor.capture(), this.attributesCaptor.capture());",
        "line": 576,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenForbiddenThenInvokeFailureHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authorizationFailureHandler.onAuthorizationFailure(any(), any(), any())).willReturn(publisherProbe.mono());",
        "line": 594,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenForbiddenWithWebClientExceptionThenInvokeFailureHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.authorizationFailureHandler).onAuthorizationFailure(this.authorizationExceptionCaptor.capture(), this.authenticationCaptor.capture(), this.attributesCaptor.capture());",
        "line": 615,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenForbiddenWithWebClientExceptionThenInvokeFailureHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authorizationFailureHandler.onAuthorizationFailure(any(), any(), any())).willReturn(publisherProbe.mono());",
        "line": 633,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenWWWAuthenticateHeaderIncludesErrorThenInvokeFailureHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.authorizationFailureHandler).onAuthorizationFailure(this.authorizationExceptionCaptor.capture(), this.authenticationCaptor.capture(), this.attributesCaptor.capture());",
        "line": 650,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenWWWAuthenticateHeaderIncludesErrorThenInvokeFailureHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authorizationFailureHandler.onAuthorizationFailure(any(), any(), any())).willReturn(publisherProbe.mono());",
        "line": 671,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenAuthorizationExceptionThenInvokeFailureHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.authorizationFailureHandler).onAuthorizationFailure(this.authorizationExceptionCaptor.capture(), this.authenticationCaptor.capture(), this.attributesCaptor.capture());",
        "line": 686,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenAuthorizationExceptionThenInvokeFailureHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.authorizationFailureHandler, never()).onAuthorizationFailure(any(), any(), any());",
        "line": 706,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenOtherHttpStatusShouldNotInvokeFailureHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  }
]
[
  {
    "variableName": "mockRequest",
    "variableType": "HttpServletRequest",
    "mockedClass": "HttpServletRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.firewall",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\firewall\\RequestWrapperTests.java",
      "className": "RequestWrapperTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HttpServletRequest mockRequest = mock(HttpServletRequest.class);",
        "line": 91,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resetWhenForward",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(mockRequest.getServletPath()).willReturn(\"\");",
        "line": 94,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resetWhenForward",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(mockRequest.getPathInfo()).willReturn(denormalizedPath);",
        "line": 95,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resetWhenForward",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(mockRequest.getRequestDispatcher(forwardPath)).willReturn(mockDispatcher);",
        "line": 96,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resetWhenForward",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(mockRequest).getRequestDispatcher(forwardPath);",
        "line": 100,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resetWhenForward",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(mockRequest, times(2)).getPathInfo();",
        "line": 103,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resetWhenForward",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(mockRequest, times(2)).getServletPath();",
        "line": 106,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resetWhenForward",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(mockRequest, mockResponse, mockDispatcher);",
        "line": 107,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resetWhenForward",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  }
]
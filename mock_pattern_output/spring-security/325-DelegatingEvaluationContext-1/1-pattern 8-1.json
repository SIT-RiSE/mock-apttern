[
  {
    "variableName": "delegate",
    "variableType": "DelegatingEvaluationContext",
    "mockedClass": "DelegatingEvaluationContext",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.access.expression",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\access\\expression\\DelegatingEvaluationContextTests.java",
      "className": "DelegatingEvaluationContextTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nDelegatingEvaluationContext delegate;",
        "line": 49,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.delegate.getRootObject()).willReturn(expected);",
        "line": 58,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getRootObject",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.delegate.getConstructorResolvers()).willReturn(expected);",
        "line": 65,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getConstructorResolvers",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.delegate.getMethodResolvers()).willReturn(expected);",
        "line": 72,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getMethodResolvers",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.delegate.getPropertyAccessors()).willReturn(expected);",
        "line": 79,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getPropertyAccessors",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.delegate.getTypeLocator()).willReturn(expected);",
        "line": 86,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getTypeLocator",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.delegate.getTypeConverter()).willReturn(expected);",
        "line": 93,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getTypeConverter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.delegate.getTypeComparator()).willReturn(expected);",
        "line": 100,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getTypeComparator",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.delegate.getOperatorOverloader()).willReturn(expected);",
        "line": 107,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getOperatorOverloader",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.delegate.getBeanResolver()).willReturn(expected);",
        "line": 114,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getBeanResolver",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.delegate).setVariable(name, value);",
        "line": 123,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "setVariable",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.delegate.lookupVariable(name)).willReturn(expected);",
        "line": 130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "lookupVariable",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  }
]
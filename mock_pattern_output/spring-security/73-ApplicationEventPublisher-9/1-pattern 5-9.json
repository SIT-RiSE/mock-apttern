[
  {
    "variableName": "appPublisher",
    "variableType": "ApplicationEventPublisher",
    "mockedClass": "ApplicationEventPublisher",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\authentication\\DefaultAuthenticationEventPublisherTests.java",
      "className": "DefaultAuthenticationEventPublisherTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ApplicationEventPublisher appPublisher = mock(ApplicationEventPublisher.class);",
        "line": 58,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "expectedDefaultMappingsAreSatisfied",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(appPublisher, times(2)).publishEvent(isA(AuthenticationFailureBadCredentialsEvent.class));",
        "line": 65,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "expectedDefaultMappingsAreSatisfied",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(appPublisher, times(2)).publishEvent(isA(AuthenticationFailureBadCredentialsEvent.class));",
        "line": 80,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "expectedDefaultMappingsAreSatisfied",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(appPublisher, times(2)).publishEvent(isA(AuthenticationFailureExpiredEvent.class));",
        "line": 81,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "expectedDefaultMappingsAreSatisfied",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(appPublisher).publishEvent(isA(AuthenticationFailureProviderNotFoundEvent.class));",
        "line": 82,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "expectedDefaultMappingsAreSatisfied",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(appPublisher, times(2)).publishEvent(isA(AuthenticationFailureDisabledEvent.class));",
        "line": 83,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "expectedDefaultMappingsAreSatisfied",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(appPublisher, times(2)).publishEvent(isA(AuthenticationFailureLockedEvent.class));",
        "line": 84,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "expectedDefaultMappingsAreSatisfied",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(appPublisher, times(2)).publishEvent(isA(AuthenticationFailureServiceExceptionEvent.class));",
        "line": 85,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "expectedDefaultMappingsAreSatisfied",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(appPublisher, times(2)).publishEvent(isA(AuthenticationFailureCredentialsExpiredEvent.class));",
        "line": 86,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "expectedDefaultMappingsAreSatisfied",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(appPublisher);",
        "line": 87,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "expectedDefaultMappingsAreSatisfied",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "appPublisher",
    "variableType": "ApplicationEventPublisher",
    "mockedClass": "ApplicationEventPublisher",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\authentication\\DefaultAuthenticationEventPublisherTests.java",
      "className": "DefaultAuthenticationEventPublisherTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ApplicationEventPublisher appPublisher = mock(ApplicationEventPublisher.class);",
        "line": 93,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticationSuccessIsPublished",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(appPublisher).publishEvent(isA(AuthenticationSuccessEvent.class));",
        "line": 96,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticationSuccessIsPublished",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "appPublisher",
    "variableType": "ApplicationEventPublisher",
    "mockedClass": "ApplicationEventPublisher",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\authentication\\DefaultAuthenticationEventPublisherTests.java",
      "className": "DefaultAuthenticationEventPublisherTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ApplicationEventPublisher appPublisher = mock(ApplicationEventPublisher.class);",
        "line": 108,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "additionalExceptionMappingsAreSupported",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(appPublisher).publishEvent(isA(AuthenticationFailureDisabledEvent.class));",
        "line": 112,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "additionalExceptionMappingsAreSupported",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "appPublisher",
    "variableType": "ApplicationEventPublisher",
    "mockedClass": "ApplicationEventPublisher",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\authentication\\DefaultAuthenticationEventPublisherTests.java",
      "className": "DefaultAuthenticationEventPublisherTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ApplicationEventPublisher appPublisher = mock(ApplicationEventPublisher.class);",
        "line": 130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "unknownFailureExceptionIsIgnored",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(appPublisher);",
        "line": 134,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "unknownFailureExceptionIsIgnored",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "appPublisher",
    "variableType": "ApplicationEventPublisher",
    "mockedClass": "ApplicationEventPublisher",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\authentication\\DefaultAuthenticationEventPublisherTests.java",
      "className": "DefaultAuthenticationEventPublisherTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ApplicationEventPublisher appPublisher = mock(ApplicationEventPublisher.class);",
        "line": 166,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "additionalExceptionMappingsUsingMapAreSupported",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(appPublisher).publishEvent(isA(AuthenticationFailureDisabledEvent.class));",
        "line": 170,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "additionalExceptionMappingsUsingMapAreSupported",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "appPublisher",
    "variableType": "ApplicationEventPublisher",
    "mockedClass": "ApplicationEventPublisher",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\authentication\\DefaultAuthenticationEventPublisherTests.java",
      "className": "DefaultAuthenticationEventPublisherTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ApplicationEventPublisher appPublisher = mock(ApplicationEventPublisher.class);",
        "line": 184,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "defaultAuthenticationFailureEventIsPublished",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(appPublisher).publishEvent(isA(AuthenticationFailureBadCredentialsEvent.class));",
        "line": 188,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "defaultAuthenticationFailureEventIsPublished",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "appPublisher",
    "variableType": "ApplicationEventPublisher",
    "mockedClass": "ApplicationEventPublisher",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.server.resource",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-resource-server\\src\\test\\java\\org\\springframework\\security\\oauth2\\server\\resource\\DefaultAuthenticationEventPublisherBearerTokenTests.java",
      "className": "DefaultAuthenticationEventPublisherBearerTokenTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ApplicationEventPublisher appPublisher = mock(ApplicationEventPublisher.class);",
        "line": 44,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "publishAuthenticationFailureWhenInvalidBearerTokenExceptionThenMaps",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(appPublisher, times(2)).publishEvent(isA(AuthenticationFailureBadCredentialsEvent.class));",
        "line": 50,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "publishAuthenticationFailureWhenInvalidBearerTokenExceptionThenMaps",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "eventPublisher",
    "variableType": "ApplicationEventPublisher",
    "mockedClass": "ApplicationEventPublisher",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.session",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\session\\DefaultSessionAuthenticationStrategyTests.java",
      "className": "DefaultSessionAuthenticationStrategyTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ApplicationEventPublisher eventPublisher = mock(ApplicationEventPublisher.class);",
        "line": 67,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "newSessionIsCreatedIfSessionAlreadyExistsWithEventPublisher",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(eventPublisher).publishEvent(eventArgumentCaptor.capture());",
        "line": 72,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "newSessionIsCreatedIfSessionAlreadyExistsWithEventPublisher",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "eventPublisher",
    "variableType": "ApplicationEventPublisher",
    "mockedClass": "ApplicationEventPublisher",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.session",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\session\\DefaultSessionAuthenticationStrategyTests.java",
      "className": "DefaultSessionAuthenticationStrategyTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ApplicationEventPublisher eventPublisher = mock(ApplicationEventPublisher.class);",
        "line": 108,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onlySavedRequestAttributeIsMigratedIfMigrateAttributesIsFalseWithEventPublisher",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(eventPublisher).publishEvent(eventArgumentCaptor.capture());",
        "line": 113,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onlySavedRequestAttributeIsMigratedIfMigrateAttributesIsFalseWithEventPublisher",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  }
]
[
  {
    "variableName": "requestCache",
    "variableType": "RequestCache",
    "mockedClass": "RequestCache",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.oauth2.client",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\oauth2\\client\\OAuth2ClientConfigurerTests.java",
      "className": "OAuth2ClientConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private static RequestCache requestCache;",
        "line": 106,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "requestCache = mock(RequestCache.class);",
        "line": 147,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(requestCache).saveRequest(any(HttpServletRequest.class), any(HttpServletResponse.class));",
        "line": 220,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "configureWhenRequestCacheProvidedAndClientAuthorizationRequiredExceptionThrownThenRequestCacheUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// @formatter:on\r\nverify(requestCache).getRequest(any(HttpServletRequest.class), any(HttpServletResponse.class));",
        "line": 254,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "configureWhenRequestCacheProvidedAndClientAuthorizationSucceedsThenRequestCacheUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 9
  },
  {
    "variableName": "requestCache",
    "variableType": "RequestCache",
    "mockedClass": "RequestCache",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.oauth2.client",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\oauth2\\client\\OAuth2ClientConfigurerTests.java",
      "className": "OAuth2ClientConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private static RequestCache requestCache;",
        "line": 106,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "requestCache = mock(RequestCache.class);",
        "line": 147,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(requestCache).saveRequest(any(HttpServletRequest.class), any(HttpServletResponse.class));",
        "line": 220,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "configureWhenRequestCacheProvidedAndClientAuthorizationRequiredExceptionThrownThenRequestCacheUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// @formatter:on\r\nverify(requestCache).getRequest(any(HttpServletRequest.class), any(HttpServletResponse.class));",
        "line": 254,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "configureWhenRequestCacheProvidedAndClientAuthorizationSucceedsThenRequestCacheUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 9
  },
  {
    "variableName": "requestCache",
    "variableType": "RequestCache",
    "mockedClass": "RequestCache",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.oauth2.client",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\oauth2\\client\\OAuth2ClientConfigurerTests.java",
      "className": "OAuth2ClientConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private static RequestCache requestCache;",
        "line": 106,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "requestCache = mock(RequestCache.class);",
        "line": 147,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(requestCache).saveRequest(any(HttpServletRequest.class), any(HttpServletResponse.class));",
        "line": 220,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "configureWhenRequestCacheProvidedAndClientAuthorizationRequiredExceptionThrownThenRequestCacheUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// @formatter:on\r\nverify(requestCache).getRequest(any(HttpServletRequest.class), any(HttpServletResponse.class));",
        "line": 254,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "configureWhenRequestCacheProvidedAndClientAuthorizationSucceedsThenRequestCacheUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 9
  },
  {
    "variableName": "requestCache",
    "variableType": "RequestCache",
    "mockedClass": "RequestCache",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.oauth2.client",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\oauth2\\client\\OAuth2ClientConfigurerTests.java",
      "className": "OAuth2ClientConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private static RequestCache requestCache;",
        "line": 106,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "requestCache = mock(RequestCache.class);",
        "line": 147,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(requestCache).saveRequest(any(HttpServletRequest.class), any(HttpServletResponse.class));",
        "line": 220,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "configureWhenRequestCacheProvidedAndClientAuthorizationRequiredExceptionThrownThenRequestCacheUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// @formatter:on\r\nverify(requestCache).getRequest(any(HttpServletRequest.class), any(HttpServletResponse.class));",
        "line": 254,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "configureWhenRequestCacheProvidedAndClientAuthorizationSucceedsThenRequestCacheUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 9
  },
  {
    "variableName": "requestCache",
    "variableType": "RequestCache",
    "mockedClass": "RequestCache",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.web.configurers.oauth2.client",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\web\\configurers\\oauth2\\client\\OAuth2ClientConfigurerTests.java",
      "className": "OAuth2ClientConfigurerTests"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private static RequestCache requestCache;",
        "line": 106,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "requestCache = mock(RequestCache.class);",
        "line": 147,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(requestCache).saveRequest(any(HttpServletRequest.class), any(HttpServletResponse.class));",
        "line": 220,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "configureWhenRequestCacheProvidedAndClientAuthorizationRequiredExceptionThrownThenRequestCacheUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// @formatter:on\r\nverify(requestCache).getRequest(any(HttpServletRequest.class), any(HttpServletResponse.class));",
        "line": 254,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "configureWhenRequestCacheProvidedAndClientAuthorizationSucceedsThenRequestCacheUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 9
  }
]
[
  {
    "variableName": "mds",
    "variableType": "MethodSecurityMetadataSource",
    "mockedClass": "MethodSecurityMetadataSource",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.access.intercept.aopalliance",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\access\\intercept\\aopalliance\\MethodSecurityMetadataSourceAdvisorTests.java",
      "className": "MethodSecurityMetadataSourceAdvisorTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "MethodSecurityMetadataSource mds = mock(MethodSecurityMetadataSource.class);",
        "line": 42,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAdvisorReturnsFalseWhenMethodInvocationNotDefined",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(mds.getAttributes(method, clazz)).willReturn(null);",
        "line": 43,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAdvisorReturnsFalseWhenMethodInvocationNotDefined",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "mds",
    "variableType": "MethodSecurityMetadataSource",
    "mockedClass": "MethodSecurityMetadataSource",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.access.intercept.aopalliance",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\access\\intercept\\aopalliance\\MethodSecurityMetadataSourceAdvisorTests.java",
      "className": "MethodSecurityMetadataSourceAdvisorTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "MethodSecurityMetadataSource mds = mock(MethodSecurityMetadataSource.class);",
        "line": 52,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAdvisorReturnsTrueWhenMethodInvocationIsDefined",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(mds.getAttributes(method, clazz)).willReturn(SecurityConfig.createList(\"ROLE_A\"));",
        "line": 53,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAdvisorReturnsTrueWhenMethodInvocationIsDefined",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "delegate",
    "variableType": "MethodSecurityMetadataSource",
    "mockedClass": "MethodSecurityMetadataSource",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.access.method",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\access\\method\\DelegatingMethodSecurityMetadataSourceTests.java",
      "className": "DelegatingMethodSecurityMetadataSourceTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "MethodSecurityMetadataSource delegate = mock(MethodSecurityMetadataSource.class);",
        "line": 47,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "returnsEmptyListIfDelegateReturnsNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(delegate.getAttributes(ArgumentMatchers.<Method>any(), ArgumentMatchers.any(Class.class))).willReturn(null);",
        "line": 48,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "returnsEmptyListIfDelegateReturnsNull",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "delegate",
    "variableType": "MethodSecurityMetadataSource",
    "mockedClass": "MethodSecurityMetadataSource",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.access.method",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\access\\method\\DelegatingMethodSecurityMetadataSourceTests.java",
      "className": "DelegatingMethodSecurityMetadataSourceTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "MethodSecurityMetadataSource delegate = mock(MethodSecurityMetadataSource.class);",
        "line": 63,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "returnsDelegateAttributes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(delegate.getAttributes(toString, String.class)).willReturn(attributes);",
        "line": 67,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "returnsDelegateAttributes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
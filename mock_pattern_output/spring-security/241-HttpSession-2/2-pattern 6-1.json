[
  {
    "variableName": "session",
    "variableType": "HttpSession",
    "mockedClass": "HttpSession",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.context",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\context\\HttpSessionSecurityContextRepositoryTests.java",
      "className": "HttpSessionSecurityContextRepositoryTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HttpSession session = mock(HttpSession.class);",
        "line": 200,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "saveContextCallsSetAttributeIfContextIsModifiedDirectlyDuringRequest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(session.getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY)).willReturn(ctx);",
        "line": 201,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "saveContextCallsSetAttributeIfContextIsModifiedDirectlyDuringRequest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// Must be called even though the value in the local VM is already the same\r\nverify(session).setAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY, ctx);",
        "line": 210,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "saveContextCallsSetAttributeIfContextIsModifiedDirectlyDuringRequest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  }
]
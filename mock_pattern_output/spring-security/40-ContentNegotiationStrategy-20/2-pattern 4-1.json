[
  {
    "variableName": "negotiationStrategy",
    "variableType": "ContentNegotiationStrategy",
    "mockedClass": "ContentNegotiationStrategy",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.web.util.matcher",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\util\\matcher\\MediaTypeRequestMatcherTests.java",
      "className": "MediaTypeRequestMatcherTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ContentNegotiationStrategy negotiationStrategy;",
        "line": 51,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.negotiationStrategy.resolveMediaTypes(any(NativeWebRequest.class))).willThrow(new HttpMediaTypeNotAcceptableException(\"oops\"));",
        "line": 102,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "negotiationStrategyThrowsHMTNAE",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.negotiationStrategy.resolveMediaTypes(any(NativeWebRequest.class))).willReturn(Arrays.asList(MediaType.ALL));",
        "line": 110,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "mediaAllMatches",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.negotiationStrategy.resolveMediaTypes(any(NativeWebRequest.class))).willReturn(Arrays.asList(MediaType.TEXT_PLAIN, MediaType.APPLICATION_XHTML_XML, MediaType.TEXT_HTML));",
        "line": 192,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "multipleMediaType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.negotiationStrategy.resolveMediaTypes(any(NativeWebRequest.class))).willReturn(Arrays.asList(MediaType.TEXT_PLAIN));",
        "line": 207,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveTextPlainMatchesTextAll",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.negotiationStrategy.resolveMediaTypes(any(NativeWebRequest.class))).willReturn(Arrays.asList(new MediaType(\"text\", \"*\")));",
        "line": 222,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveTextAllMatchesTextPlain",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.negotiationStrategy.resolveMediaTypes(any(NativeWebRequest.class))).willReturn(Arrays.asList(new MediaType(\"text\", \"*\")));",
        "line": 238,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "useEqualsResolveTextAllMatchesTextPlain",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.negotiationStrategy.resolveMediaTypes(any(NativeWebRequest.class))).willReturn(Arrays.asList(MediaType.TEXT_PLAIN));",
        "line": 255,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "useEqualsResolveTextPlainMatchesTextAll",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.negotiationStrategy.resolveMediaTypes(any(NativeWebRequest.class))).willReturn(Arrays.asList(MediaType.TEXT_PLAIN));",
        "line": 272,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "useEqualsSame",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.negotiationStrategy.resolveMediaTypes(any(NativeWebRequest.class))).willReturn(Arrays.asList(new MediaType(\"text\", \"unique\")));",
        "line": 289,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "useEqualsWithCustomMediaType",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.negotiationStrategy.resolveMediaTypes(any(NativeWebRequest.class))).willReturn(Arrays.asList(MediaType.ALL));",
        "line": 307,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "mediaAllIgnoreMediaTypeAll",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.negotiationStrategy.resolveMediaTypes(any(NativeWebRequest.class))).willReturn(Arrays.asList(MediaType.ALL, MediaType.TEXT_HTML));",
        "line": 324,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "mediaAllAndTextHtmlIgnoreMediaTypeAll",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.negotiationStrategy.resolveMediaTypes(any(NativeWebRequest.class))).willReturn(Arrays.asList(MediaType.TEXT_PLAIN, MediaType.parseMediaType(\"*/*;q=0.8\")));",
        "line": 341,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "mediaAllQ08AndTextPlainIgnoreMediaTypeAll",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
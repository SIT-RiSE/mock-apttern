[
  {
    "variableName": "session2",
    "variableType": "ReactiveSessionInformation",
    "mockedClass": "ReactiveSessionInformation",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.server.authentication.session",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\authentication\\session\\InvalidateLeastUsedServerMaximumSessionsExceededHandlerTests.java",
      "className": "InvalidateLeastUsedServerMaximumSessionsExceededHandlerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ReactiveSessionInformation session2 = mock(ReactiveSessionInformation.class);",
        "line": 61,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenInvokedThenInvalidatesLeastRecentlyUsedSessions",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(session2.getLastAccessTime()).willReturn(Instant.ofEpochMilli(1700827760000L));",
        "line": 63,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenInvokedThenInvalidatesLeastRecentlyUsedSessions",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(session2.getSessionId()).willReturn(\"session2\");",
        "line": 65,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenInvokedThenInvalidatesLeastRecentlyUsedSessions",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(session2.invalidate()).willReturn(Mono.empty());",
        "line": 66,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenInvokedThenInvalidatesLeastRecentlyUsedSessions",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(session2).invalidate();",
        "line": 73,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenInvokedThenInvalidatesLeastRecentlyUsedSessions",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// used by comparator to sort the sessions\r\nverify(session2).getLastAccessTime();",
        "line": 75,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenInvokedThenInvalidatesLeastRecentlyUsedSessions",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// used to invalidate session against\r\nverify(session2, times(2)).getSessionId();",
        "line": 77,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenInvokedThenInvalidatesLeastRecentlyUsedSessions",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(session2);",
        "line": 82,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenInvokedThenInvalidatesLeastRecentlyUsedSessions",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "session1",
    "variableType": "ReactiveSessionInformation",
    "mockedClass": "ReactiveSessionInformation",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.server.authentication.session",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\authentication\\session\\InvalidateLeastUsedServerMaximumSessionsExceededHandlerTests.java",
      "className": "InvalidateLeastUsedServerMaximumSessionsExceededHandlerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ReactiveSessionInformation session1 = mock(ReactiveSessionInformation.class);",
        "line": 60,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenInvokedThenInvalidatesLeastRecentlyUsedSessions",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(session1.getLastAccessTime()).willReturn(Instant.ofEpochMilli(1700827760010L));",
        "line": 62,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenInvokedThenInvalidatesLeastRecentlyUsedSessions",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(session1.getSessionId()).willReturn(\"session1\");",
        "line": 64,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenInvokedThenInvalidatesLeastRecentlyUsedSessions",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// used by comparator to sort the sessions\r\nverify(session1).getLastAccessTime();",
        "line": 74,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenInvokedThenInvalidatesLeastRecentlyUsedSessions",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(session1).getSessionId();",
        "line": 76,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenInvokedThenInvalidatesLeastRecentlyUsedSessions",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(session1);",
        "line": 83,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenInvokedThenInvalidatesLeastRecentlyUsedSessions",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "session3",
    "variableType": "ReactiveSessionInformation",
    "mockedClass": "ReactiveSessionInformation",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.server.authentication.session",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\authentication\\session\\InvalidateLeastUsedServerMaximumSessionsExceededHandlerTests.java",
      "className": "InvalidateLeastUsedServerMaximumSessionsExceededHandlerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ReactiveSessionInformation session3 = mock(ReactiveSessionInformation.class);",
        "line": 90,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenMoreThanOneSessionToInvalidateThenInvalidatesAllOfThem",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(session3.getLastAccessTime()).willReturn(Instant.ofEpochMilli(1700827760030L));",
        "line": 93,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenMoreThanOneSessionToInvalidateThenInvalidatesAllOfThem",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(session3.getSessionId()).willReturn(\"session3\");",
        "line": 98,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenMoreThanOneSessionToInvalidateThenInvalidatesAllOfThem",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(session3).getSessionId();",
        "line": 109,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenMoreThanOneSessionToInvalidateThenInvalidatesAllOfThem",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// used by comparator to sort the sessions\r\nverify(session3, atLeastOnce()).getLastAccessTime();",
        "line": 112,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenMoreThanOneSessionToInvalidateThenInvalidatesAllOfThem",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(session3);",
        "line": 118,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenMoreThanOneSessionToInvalidateThenInvalidatesAllOfThem",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "session2",
    "variableType": "ReactiveSessionInformation",
    "mockedClass": "ReactiveSessionInformation",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.server.authentication.session",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\authentication\\session\\InvalidateLeastUsedServerMaximumSessionsExceededHandlerTests.java",
      "className": "InvalidateLeastUsedServerMaximumSessionsExceededHandlerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ReactiveSessionInformation session2 = mock(ReactiveSessionInformation.class);",
        "line": 89,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenMoreThanOneSessionToInvalidateThenInvalidatesAllOfThem",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(session2.getLastAccessTime()).willReturn(Instant.ofEpochMilli(1700827760020L));",
        "line": 92,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenMoreThanOneSessionToInvalidateThenInvalidatesAllOfThem",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(session2.invalidate()).willReturn(Mono.empty());",
        "line": 95,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenMoreThanOneSessionToInvalidateThenInvalidatesAllOfThem",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(session2.getSessionId()).willReturn(\"session2\");",
        "line": 97,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenMoreThanOneSessionToInvalidateThenInvalidatesAllOfThem",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(session2).invalidate();",
        "line": 106,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenMoreThanOneSessionToInvalidateThenInvalidatesAllOfThem",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(session2, times(2)).getSessionId();",
        "line": 108,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenMoreThanOneSessionToInvalidateThenInvalidatesAllOfThem",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// used by comparator to sort the sessions\r\nverify(session2, atLeastOnce()).getLastAccessTime();",
        "line": 111,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenMoreThanOneSessionToInvalidateThenInvalidatesAllOfThem",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(session2);",
        "line": 117,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenMoreThanOneSessionToInvalidateThenInvalidatesAllOfThem",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "session1",
    "variableType": "ReactiveSessionInformation",
    "mockedClass": "ReactiveSessionInformation",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.server.authentication.session",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\authentication\\session\\InvalidateLeastUsedServerMaximumSessionsExceededHandlerTests.java",
      "className": "InvalidateLeastUsedServerMaximumSessionsExceededHandlerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ReactiveSessionInformation session1 = mock(ReactiveSessionInformation.class);",
        "line": 88,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenMoreThanOneSessionToInvalidateThenInvalidatesAllOfThem",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(session1.getLastAccessTime()).willReturn(Instant.ofEpochMilli(1700827760010L));",
        "line": 91,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenMoreThanOneSessionToInvalidateThenInvalidatesAllOfThem",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(session1.invalidate()).willReturn(Mono.empty());",
        "line": 94,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenMoreThanOneSessionToInvalidateThenInvalidatesAllOfThem",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(session1.getSessionId()).willReturn(\"session1\");",
        "line": 96,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenMoreThanOneSessionToInvalidateThenInvalidatesAllOfThem",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// @formatter:off\r\nverify(session1).invalidate();",
        "line": 105,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenMoreThanOneSessionToInvalidateThenInvalidatesAllOfThem",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(session1, times(2)).getSessionId();",
        "line": 107,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenMoreThanOneSessionToInvalidateThenInvalidatesAllOfThem",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// used by comparator to sort the sessions\r\nverify(session1, atLeastOnce()).getLastAccessTime();",
        "line": 110,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenMoreThanOneSessionToInvalidateThenInvalidatesAllOfThem",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(session1);",
        "line": 116,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenMoreThanOneSessionToInvalidateThenInvalidatesAllOfThem",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "session2",
    "variableType": "ReactiveSessionInformation",
    "mockedClass": "ReactiveSessionInformation",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.server.authentication.session",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\authentication\\session\\InvalidateLeastUsedServerMaximumSessionsExceededHandlerTests.java",
      "className": "InvalidateLeastUsedServerMaximumSessionsExceededHandlerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ReactiveSessionInformation session2 = mock(ReactiveSessionInformation.class);",
        "line": 125,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenCurrentSessionIsRegisteredThenDoNotInvalidateCurrentSession",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(session2.getLastAccessTime()).willReturn(Instant.ofEpochMilli(1700827760000L));",
        "line": 128,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenCurrentSessionIsRegisteredThenDoNotInvalidateCurrentSession",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(session2.getSessionId()).willReturn(currentSession.getId());",
        "line": 130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenCurrentSessionIsRegisteredThenDoNotInvalidateCurrentSession",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(session2).getSessionId();",
        "line": 139,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenCurrentSessionIsRegisteredThenDoNotInvalidateCurrentSession",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(session2);",
        "line": 143,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenCurrentSessionIsRegisteredThenDoNotInvalidateCurrentSession",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "session1",
    "variableType": "ReactiveSessionInformation",
    "mockedClass": "ReactiveSessionInformation",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.server.authentication.session",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\authentication\\session\\InvalidateLeastUsedServerMaximumSessionsExceededHandlerTests.java",
      "className": "InvalidateLeastUsedServerMaximumSessionsExceededHandlerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ReactiveSessionInformation session1 = mock(ReactiveSessionInformation.class);",
        "line": 124,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenCurrentSessionIsRegisteredThenDoNotInvalidateCurrentSession",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(session1.getLastAccessTime()).willReturn(Instant.ofEpochMilli(1700827760010L));",
        "line": 127,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenCurrentSessionIsRegisteredThenDoNotInvalidateCurrentSession",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(session1.getSessionId()).willReturn(\"session1\");",
        "line": 129,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenCurrentSessionIsRegisteredThenDoNotInvalidateCurrentSession",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(session1.invalidate()).willReturn(Mono.empty());",
        "line": 131,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenCurrentSessionIsRegisteredThenDoNotInvalidateCurrentSession",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(session1).invalidate();",
        "line": 138,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenCurrentSessionIsRegisteredThenDoNotInvalidateCurrentSession",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(session1, times(2)).getSessionId();",
        "line": 140,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenCurrentSessionIsRegisteredThenDoNotInvalidateCurrentSession",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(session1);",
        "line": 144,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "handleWhenCurrentSessionIsRegisteredThenDoNotInvalidateCurrentSession",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  }
]
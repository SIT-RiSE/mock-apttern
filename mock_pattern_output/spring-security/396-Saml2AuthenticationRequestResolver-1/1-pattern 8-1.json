[
  {
    "variableName": "authenticationRequestResolver",
    "variableType": "Saml2AuthenticationRequestResolver",
    "mockedClass": "Saml2AuthenticationRequestResolver",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.saml2.provider.service.web",
      "filePath": "C:\\java tool\\Spring\\spring-security\\saml2\\saml2-service-provider\\src\\test\\java\\org\\springframework\\security\\saml2\\provider\\service\\web\\Saml2WebSsoAuthenticationRequestFilterTests.java",
      "className": "Saml2WebSsoAuthenticationRequestFilterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private Saml2AuthenticationRequestResolver authenticationRequestResolver = mock(Saml2AuthenticationRequestResolver.class);",
        "line": 60,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationRequestResolver.resolve(any())).willReturn(request);",
        "line": 98,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenNoRelayStateThenRedirectDoesNotContainParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationRequestResolver.resolve(any())).willReturn(request);",
        "line": 127,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenRelayStateThenRedirectDoesContainParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationRequestResolver.resolve(any())).willReturn(request);",
        "line": 138,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenRelayStateThatRequiresEncodingThenRedirectDoesContainsEncodedParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationRequestResolver.resolve(any())).willReturn(request);",
        "line": 149,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenSimpleSignatureSpecifiedThenSignatureParametersAreInTheRedirectURL",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationRequestResolver.resolve(any())).willReturn(request);",
        "line": 159,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenSignatureIsDisabledThenSignatureParametersAreNotInTheRedirectURL",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationRequestResolver.resolve(any())).willReturn(request);",
        "line": 178,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenPostFormDataIsPresent",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationRequestResolver.resolve(any())).willReturn(request);",
        "line": 207,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenRedirectThenSaveRedirectRequest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationRequestResolver.resolve(any())).willReturn(request);",
        "line": 222,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenPostThenSaveRedirectRequest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authenticationRequestResolver.resolve(any())).willReturn(authenticationRequest);",
        "line": 234,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenCustomAuthenticationRequestResolverThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.authenticationRequestResolver).resolve(any());",
        "line": 236,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenCustomAuthenticationRequestResolverThenUses",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  }
]
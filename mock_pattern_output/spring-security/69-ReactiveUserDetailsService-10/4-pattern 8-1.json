[
  {
    "variableName": "userDetailsService",
    "variableType": "ReactiveUserDetailsService",
    "mockedClass": "ReactiveUserDetailsService",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.server.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\authentication\\SwitchUserWebFilterTests.java",
      "className": "SwitchUserWebFilterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ReactiveUserDetailsService userDetailsService;",
        "line": 74,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoInteractions(this.userDetailsService);",
        "line": 99,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "switchUserWhenRequestNotMatchThenDoesNothing",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.userDetailsService.findByUsername(targetUsername)).willReturn(Mono.just(switchUserDetails));",
        "line": 116,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "switchUser",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.userDetailsService).findByUsername(targetUsername);",
        "line": 125,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "switchUser",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.userDetailsService.findByUsername(targetUsername)).willReturn(Mono.just(switchUserDetails(targetUsername, true)));",
        "line": 162,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "switchUserWhenUserAlreadySwitchedThenExitSwitchAndSwitchAgain",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.userDetailsService.findByUsername(any(String.class))).willReturn(Mono.just(switchUserDetails));",
        "line": 203,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "switchUserWhenExceptionThenCallFailureHandler",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.userDetailsService.findByUsername(any(String.class))).willReturn(Mono.just(switchUserDetails));",
        "line": 222,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "switchUserWhenFailureHandlerNotDefinedThenReturnError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  }
]
[
  {
    "variableName": "aep",
    "variableType": "AuthenticationEventPublisher",
    "mockedClass": "AuthenticationEventPublisher",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.config.annotation.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\config\\src\\test\\java\\org\\springframework\\security\\config\\annotation\\authentication\\AuthenticationManagerBuilderTests.java",
      "className": "AuthenticationManagerBuilderTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "AuthenticationEventPublisher aep = mock(AuthenticationEventPublisher.class);",
        "line": 91,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "customAuthenticationEventPublisherWithWeb",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(aep).publishAuthenticationFailure(any(), any());",
        "line": 99,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "customAuthenticationEventPublisherWithWeb",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "publisher",
    "variableType": "AuthenticationEventPublisher",
    "mockedClass": "AuthenticationEventPublisher",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\authentication\\ProviderManagerTests.java",
      "className": "ProviderManagerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "AuthenticationEventPublisher publisher = mock(AuthenticationEventPublisher.class);",
        "line": 84,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticationSucceedsWithSupportedTokenAndReturnsExpectedObject",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(publisher).publishAuthenticationSuccess(result);",
        "line": 88,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticationSucceedsWithSupportedTokenAndReturnsExpectedObject",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "publisher",
    "variableType": "AuthenticationEventPublisher",
    "mockedClass": "AuthenticationEventPublisher",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\authentication\\ProviderManagerTests.java",
      "className": "ProviderManagerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "AuthenticationEventPublisher publisher = mock(AuthenticationEventPublisher.class);",
        "line": 96,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticationSucceedsWhenFirstProviderReturnsNullButSecondAuthenticates",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(publisher).publishAuthenticationSuccess(result);",
        "line": 100,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticationSucceedsWhenFirstProviderReturnsNullButSecondAuthenticates",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "publisher",
    "variableType": "AuthenticationEventPublisher",
    "mockedClass": "AuthenticationEventPublisher",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\authentication\\ProviderManagerTests.java",
      "className": "ProviderManagerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "AuthenticationEventPublisher publisher = mock(AuthenticationEventPublisher.class);",
        "line": 218,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "providerNotFoundFromParentIsIgnored",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(publisher).publishAuthenticationFailure(ex, authReq);",
        "line": 227,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "providerNotFoundFromParentIsIgnored",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "publisher",
    "variableType": "AuthenticationEventPublisher",
    "mockedClass": "AuthenticationEventPublisher",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\authentication\\ProviderManagerTests.java",
      "className": "ProviderManagerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "AuthenticationEventPublisher publisher = mock(AuthenticationEventPublisher.class);",
        "line": 253,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "statusExceptionIsPublished",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(publisher).publishAuthenticationFailure(expected, authReq);",
        "line": 256,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "statusExceptionIsPublished",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  },
  {
    "variableName": "publisher",
    "variableType": "AuthenticationEventPublisher",
    "mockedClass": "AuthenticationEventPublisher",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.authentication",
      "filePath": "C:\\java tool\\Spring\\spring-security\\core\\src\\test\\java\\org\\springframework\\security\\authentication\\ProviderManagerTests.java",
      "className": "ProviderManagerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "AuthenticationEventPublisher publisher = mock(AuthenticationEventPublisher.class);",
        "line": 277,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenFailsInParentAndPublishesThenChildDoesNotPublish",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// Parent\r\nverify(publisher).publishAuthenticationFailure(badCredentialsExParent, authReq);",
        "line": 283,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenFailsInParentAndPublishesThenChildDoesNotPublish",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// publishes\r\n// Child should not publish (duplicate event)\r\nverifyNoMoreInteractions(publisher);",
        "line": 285,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "authenticateWhenFailsInParentAndPublishesThenChildDoesNotPublish",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 5
  }
]
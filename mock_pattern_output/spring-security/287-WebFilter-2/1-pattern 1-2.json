[
  {
    "variableName": "mock",
    "variableType": "WebFilter",
    "mockedClass": "WebFilter",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.web.server",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\ObservationWebFilterChainDecoratorTests.java",
      "className": "ObservationWebFilterChainDecoratorTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "WebFilter mock = mock(WebFilter.class);",
        "line": 180,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "decorateWhenCustomAfterFilterThenObserves",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(mock.filter(any(), any())).willReturn(Mono.empty());",
        "line": 181,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "decorateWhenCustomAfterFilterThenObserves",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "error",
    "variableType": "WebFilter",
    "mockedClass": "WebFilter",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.web.server",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\server\\WebFilterChainProxyTests.java",
      "className": "WebFilterChainProxyTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "WebFilter error = mock(WebFilter.class);",
        "line": 131,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenFilterExceptionThenObservationRegistryObserves",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(error.filter(any(), any())).willReturn(Mono.error(new IllegalStateException()));",
        "line": 132,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenFilterExceptionThenObservationRegistryObserves",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
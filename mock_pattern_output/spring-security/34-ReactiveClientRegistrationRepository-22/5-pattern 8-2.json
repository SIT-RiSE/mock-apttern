[
  {
    "variableName": "clientRegistrationRepository",
    "variableType": "ReactiveClientRegistrationRepository",
    "mockedClass": "ReactiveClientRegistrationRepository",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.client.web.reactive.function.client",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-client\\src\\test\\java\\org\\springframework\\security\\oauth2\\client\\web\\reactive\\function\\client\\ServerOAuth2AuthorizedClientExchangeFilterFunctionTests.java",
      "className": "ServerOAuth2AuthorizedClientExchangeFilterFunctionTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ReactiveClientRegistrationRepository clientRegistrationRepository;",
        "line": 129,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// @formatter:on\r\ngiven(this.clientRegistrationRepository.findByRegistrationId(eq(registration.getRegistrationId()))).willReturn(Mono.just(registration));",
        "line": 411,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenJwtBearerClientNotAuthorizedThenExchangeToken",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(eq(registration.getRegistrationId()))).willReturn(Mono.just(registration));",
        "line": 719,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPasswordClientNotAuthorizedThenGetNewToken",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(this.clientRegistrationRepository, this.authorizedClientRepository);",
        "line": 842,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenDefaultOAuth2AuthorizedClientFalseThenEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(eq(registration.getRegistrationId()))).willReturn(Mono.just(registration));",
        "line": 901,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenClientCredentialsClientNotAuthorizedAndOutsideRequestContextThenGetNewToken",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  },
  {
    "variableName": "clientRepository",
    "variableType": "ReactiveClientRegistrationRepository",
    "mockedClass": "ReactiveClientRegistrationRepository",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.client.web.server",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-client\\src\\test\\java\\org\\springframework\\security\\oauth2\\client\\web\\server\\OAuth2AuthorizationRequestRedirectWebFilterTests.java",
      "className": "OAuth2AuthorizationRequestRedirectWebFilterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ReactiveClientRegistrationRepository clientRepository;",
        "line": 61,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// @formatter:on\r\nverifyNoInteractions(this.clientRepository, this.authzRequestRepository);",
        "line": 104,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenDoesNotMatchThenClientRegistrationRepositoryNotSubscribed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRepository.findByRegistrationId(this.registration.getRegistrationId())).willReturn(Mono.just(this.registration));",
        "line": 109,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenDoesMatchThenClientRegistrationRepositoryNotSubscribed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRepository.findByRegistrationId(this.registration.getRegistrationId())).willReturn(Mono.just(this.registration));",
        "line": 136,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenDoesMatchThenResolveRedirectUriExpandedExcludesQueryString",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRepository.findByRegistrationId(this.registration.getRegistrationId())).willReturn(Mono.just(this.registration));",
        "line": 160,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenExceptionThenRedirected",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRepository.findByRegistrationId(this.registration.getRegistrationId())).willReturn(Mono.just(this.registration));",
        "line": 179,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenExceptionThenSaveRequestSessionAttribute",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRepository.findByRegistrationId(this.registration.getRegistrationId())).willReturn(Mono.just(this.registration));",
        "line": 201,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPathMatchesThenRequestSessionAttributeNotSaved",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRepository.findByRegistrationId(this.registration.getRegistrationId())).willReturn(Mono.just(this.registration));",
        "line": 217,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenCustomRedirectStrategySetThenRedirectUriInResponseBody",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  }
]
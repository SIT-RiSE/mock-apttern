[
  {
    "variableName": "clientRegistrationRepository",
    "variableType": "ReactiveClientRegistrationRepository",
    "mockedClass": "ReactiveClientRegistrationRepository",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.client",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-client\\src\\test\\java\\org\\springframework\\security\\oauth2\\client\\InMemoryReactiveOAuth2AuthorizedClientServiceTests.java",
      "className": "InMemoryReactiveOAuth2AuthorizedClientServiceTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ReactiveClientRegistrationRepository clientRegistrationRepository;",
        "line": 48,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(this.clientRegistrationId)).willReturn(Mono.empty());",
        "line": 129,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadAuthorizedClientWhenClientRegistrationIdNotFoundThenEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(this.clientRegistrationId)).willReturn(Mono.just(this.clientRegistration));",
        "line": 138,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadAuthorizedClientWhenClientRegistrationFoundAndNotAuthorizedClientThenEmpty",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(this.clientRegistrationId)).willReturn(Mono.just(this.clientRegistration));",
        "line": 147,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadAuthorizedClientWhenClientRegistrationFoundThenFound",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(this.clientRegistrationId)).willReturn(Mono.empty());",
        "line": 219,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeAuthorizedClientWhenClientIdThenNoException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(this.clientRegistrationId)).willReturn(Mono.just(this.clientRegistration));",
        "line": 235,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeAuthorizedClientWhenClientRegistrationFoundRemovedThenNotFound",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "clientRegistrationRepository",
    "variableType": "ReactiveClientRegistrationRepository",
    "mockedClass": "ReactiveClientRegistrationRepository",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.client.web.reactive.result.method.annotation",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-client\\src\\test\\java\\org\\springframework\\security\\oauth2\\client\\web\\reactive\\result\\method\\annotation\\OAuth2AuthorizedClientArgumentResolverTests.java",
      "className": "OAuth2AuthorizedClientArgumentResolverTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ReactiveClientRegistrationRepository clientRegistrationRepository;",
        "line": 65,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(any())).willReturn(Mono.just(this.clientRegistration));",
        "line": 179,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveArgumentWhenOAuth2AuthorizedClientNotFoundThenThrowClientAuthorizationRequiredException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "clientRegistrationRepository",
    "variableType": "ReactiveClientRegistrationRepository",
    "mockedClass": "ReactiveClientRegistrationRepository",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.client.web.reactive.result.method.annotation",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-client\\src\\test\\java\\org\\springframework\\security\\oauth2\\client\\web\\reactive\\result\\method\\annotation\\OAuth2AuthorizedClientArgumentResolverTests.java",
      "className": "OAuth2AuthorizedClientArgumentResolverTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ReactiveClientRegistrationRepository clientRegistrationRepository;",
        "line": 65,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(any())).willReturn(Mono.just(this.clientRegistration));",
        "line": 179,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveArgumentWhenOAuth2AuthorizedClientNotFoundThenThrowClientAuthorizationRequiredException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "clientRegistrationRepository",
    "variableType": "ReactiveClientRegistrationRepository",
    "mockedClass": "ReactiveClientRegistrationRepository",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.client.web.server",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-client\\src\\test\\java\\org\\springframework\\security\\oauth2\\client\\web\\server\\DefaultServerOAuth2AuthorizationRequestResolverTests.java",
      "className": "DefaultServerOAuth2AuthorizationRequestResolverTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ReactiveClientRegistrationRepository clientRegistrationRepository;",
        "line": 57,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(any())).willReturn(Mono.empty());",
        "line": 81,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveWhenClientRegistrationNotFoundMatchThenBadRequest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(any())).willReturn(Mono.just(this.registration));",
        "line": 89,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveWhenClientRegistrationFoundThenWorks",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(any())).willReturn(Mono.just(this.registration));",
        "line": 98,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveWhenForwardedHeadersClientRegistrationFoundThenWorks",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(any())).willReturn(Mono.just(TestClientRegistrations.clientRegistration().clientAuthenticationMethod(ClientAuthenticationMethod.NONE).clientSecret(null).build()));",
        "line": 113,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveWhenAuthorizationRequestWithValidPublicClientThenResolves",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(eq(registration1.getRegistrationId()))).willReturn(Mono.just(registration1));",
        "line": 131,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveWhenAuthorizationRequestApplyPkceToConfidentialClientsThenApplied",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(eq(registration2.getRegistrationId()))).willReturn(Mono.just(registration2));",
        "line": 134,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveWhenAuthorizationRequestApplyPkceToConfidentialClientsThenApplied",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(eq(registration1.getRegistrationId()))).willReturn(Mono.just(registration1));",
        "line": 150,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveWhenAuthorizationRequestApplyPkceToSpecificConfidentialClientThenApplied",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(eq(registration2.getRegistrationId()))).willReturn(Mono.just(registration2));",
        "line": 153,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveWhenAuthorizationRequestApplyPkceToSpecificConfidentialClientThenApplied",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(any())).willReturn(Mono.just(TestClientRegistrations.clientRegistration().scope(OidcScopes.OPENID).build()));",
        "line": 201,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveWhenAuthenticationRequestWithValidOidcClientThenResolves",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(any())).willReturn(Mono.just(TestClientRegistrations.clientRegistration().scope(OidcScopes.OPENID).build()));",
        "line": 213,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveWhenAuthorizationRequestCustomizerRemovesNonceThenQueryExcludesNonce",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(any())).willReturn(Mono.just(TestClientRegistrations.clientRegistration().scope(OidcScopes.OPENID).build()));",
        "line": 229,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveWhenAuthorizationRequestCustomizerAddsParameterThenQueryIncludesParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(any())).willReturn(Mono.just(TestClientRegistrations.clientRegistration().scope(OidcScopes.OPENID).build()));",
        "line": 244,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveWhenAuthorizationRequestCustomizerOverridesParameterThenQueryIncludesParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "clientRegistrationRepository",
    "variableType": "ReactiveClientRegistrationRepository",
    "mockedClass": "ReactiveClientRegistrationRepository",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.client.web.server",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-client\\src\\test\\java\\org\\springframework\\security\\oauth2\\client\\web\\server\\OAuth2AuthorizationCodeGrantWebFilterTests.java",
      "className": "OAuth2AuthorizationCodeGrantWebFilterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ReactiveClientRegistrationRepository clientRegistrationRepository;",
        "line": 74,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(any())).willReturn(Mono.just(clientRegistration));",
        "line": 131,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenMatchThenAuthorizedClientSaved",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(any())).willReturn(Mono.just(clientRegistration));",
        "line": 155,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenAuthorizationRequestRedirectUriParametersMatchThenProcessed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(any())).willReturn(Mono.just(clientRegistration));",
        "line": 230,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenAuthorizationSucceedsAndRequestCacheConfiguredThenRequestCacheUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(any())).willReturn(Mono.empty());",
        "line": 258,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenAuthenticationConverterThrowsOAuth2AuthorizationExceptionThenMappedToOAuth2AuthenticationException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(any())).willReturn(Mono.just(clientRegistration));",
        "line": 281,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenAuthenticationManagerThrowsOAuth2AuthorizationExceptionThenMappedToOAuth2AuthenticationException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "clientRegistrationRepository",
    "variableType": "ReactiveClientRegistrationRepository",
    "mockedClass": "ReactiveClientRegistrationRepository",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.client.web.server",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-client\\src\\test\\java\\org\\springframework\\security\\oauth2\\client\\web\\server\\ServerOAuth2AuthorizationCodeAuthenticationTokenConverterTests.java",
      "className": "ServerOAuth2AuthorizationCodeAuthenticationTokenConverterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ReactiveClientRegistrationRepository clientRegistrationRepository;",
        "line": 53,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(any())).willReturn(Mono.empty());",
        "line": 117,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyWhenClientRegistrationMissingThenOAuth2AuthorizationException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(any())).willReturn(Mono.just(this.clientRegistration));",
        "line": 128,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyWhenCodeParameterNotFoundThenErrorCode",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.clientRegistrationRepository.findByRegistrationId(any())).willReturn(Mono.just(this.clientRegistration));",
        "line": 139,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "applyWhenCodeParameterFoundThenCode",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
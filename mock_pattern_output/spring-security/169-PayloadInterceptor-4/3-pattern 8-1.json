[
  {
    "variableName": "interceptor2",
    "variableType": "PayloadInterceptor",
    "mockedClass": "PayloadInterceptor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.rsocket.core",
      "filePath": "C:\\java tool\\Spring\\spring-security\\rsocket\\src\\test\\java\\org\\springframework\\security\\rsocket\\core\\PayloadInterceptorRSocketTests.java",
      "className": "PayloadInterceptorRSocketTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nPayloadInterceptor interceptor2;",
        "line": 86,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.interceptor2.intercept(any(), any())).willAnswer(withChainNext());",
        "line": 431,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "fireAndForgetWhenInterceptorsCompleteThenDelegateInvoked",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.interceptor2.intercept(any(), any())).willAnswer(withChainNext());",
        "line": 444,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "fireAndForgetWhenInterceptorsMutatesPayloadThenDelegateInvoked",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.interceptor2).intercept(any(), any());",
        "line": 451,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "fireAndForgetWhenInterceptorsMutatesPayloadThenDelegateInvoked",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(this.interceptor2);",
        "line": 467,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "fireAndForgetWhenInterceptor1ErrorsThenInterceptor2AndDelegateNotInvoked",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.interceptor2.intercept(any(), any())).willReturn(Mono.error(expected));",
        "line": 475,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "fireAndForgetWhenInterceptor2ErrorsThenInterceptor2AndDelegateNotInvoked",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.interceptor2).intercept(any(), any());",
        "line": 483,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "fireAndForgetWhenInterceptor2ErrorsThenInterceptor2AndDelegateNotInvoked",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  }
]
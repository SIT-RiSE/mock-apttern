[
  {
    "variableName": "authenticationRequest",
    "variableType": "AbstractSaml2AuthenticationRequest",
    "mockedClass": "AbstractSaml2AuthenticationRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.saml2.provider.service.web",
      "filePath": "C:\\java tool\\Spring\\spring-security\\saml2\\saml2-service-provider\\src\\opensaml4Test\\java\\org\\springframework\\security\\saml2\\provider\\service\\web\\OpenSaml4AuthenticationTokenConverterTests.java",
      "className": "OpenSaml4AuthenticationTokenConverterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "AbstractSaml2AuthenticationRequest authenticationRequest = mock(AbstractSaml2AuthenticationRequest.class);",
        "line": 162,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "convertWhenSavedAuthenticationRequestThenToken",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(authenticationRequest.getRelyingPartyRegistrationId()).willReturn(this.registration.getRegistrationId());",
        "line": 163,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "convertWhenSavedAuthenticationRequestThenToken",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "authenticationRequest",
    "variableType": "AbstractSaml2AuthenticationRequest",
    "mockedClass": "AbstractSaml2AuthenticationRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.saml2.provider.service.web",
      "filePath": "C:\\java tool\\Spring\\spring-security\\saml2\\saml2-service-provider\\src\\opensaml4Test\\java\\org\\springframework\\security\\saml2\\provider\\service\\web\\OpenSamlAuthenticationTokenConverterTests.java",
      "className": "OpenSamlAuthenticationTokenConverterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "AbstractSaml2AuthenticationRequest authenticationRequest = mock(AbstractSaml2AuthenticationRequest.class);",
        "line": 162,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "convertWhenSavedAuthenticationRequestThenToken",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(authenticationRequest.getRelyingPartyRegistrationId()).willReturn(this.registration.getRegistrationId());",
        "line": 163,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "convertWhenSavedAuthenticationRequestThenToken",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "authenticationRequest",
    "variableType": "AbstractSaml2AuthenticationRequest",
    "mockedClass": "AbstractSaml2AuthenticationRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.saml2.provider.service.web",
      "filePath": "C:\\java tool\\Spring\\spring-security\\saml2\\saml2-service-provider\\src\\opensaml5Test\\java\\org\\springframework\\security\\saml2\\provider\\service\\web\\OpenSaml5AuthenticationTokenConverterTests.java",
      "className": "OpenSaml5AuthenticationTokenConverterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "AbstractSaml2AuthenticationRequest authenticationRequest = mock(AbstractSaml2AuthenticationRequest.class);",
        "line": 162,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "convertWhenSavedAuthenticationRequestThenToken",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(authenticationRequest.getRelyingPartyRegistrationId()).willReturn(this.registration.getRegistrationId());",
        "line": 163,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "convertWhenSavedAuthenticationRequestThenToken",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "mockAuthenticationRequest",
    "variableType": "AbstractSaml2AuthenticationRequest",
    "mockedClass": "AbstractSaml2AuthenticationRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.saml2.provider.service.servlet",
      "filePath": "C:\\java tool\\Spring\\spring-security\\saml2\\saml2-service-provider\\src\\test\\java\\org\\springframework\\security\\saml2\\provider\\service\\servlet\\HttpSessionSaml2AuthenticationRequestRepositoryTests.java",
      "className": "HttpSessionSaml2AuthenticationRequestRepositoryTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "AbstractSaml2AuthenticationRequest mockAuthenticationRequest = mock(AbstractSaml2AuthenticationRequest.class);",
        "line": 71,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadAuthenticationRequestWhenAttributeInSessionThenReturnsAuthenticationRequest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(mockAuthenticationRequest.getAuthenticationRequestUri()).willReturn(IDP_SSO_URL);",
        "line": 72,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "loadAuthenticationRequestWhenAttributeInSessionThenReturnsAuthenticationRequest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "mockAuthenticationRequest",
    "variableType": "AbstractSaml2AuthenticationRequest",
    "mockedClass": "AbstractSaml2AuthenticationRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.saml2.provider.service.servlet",
      "filePath": "C:\\java tool\\Spring\\spring-security\\saml2\\saml2-service-provider\\src\\test\\java\\org\\springframework\\security\\saml2\\provider\\service\\servlet\\HttpSessionSaml2AuthenticationRequestRepositoryTests.java",
      "className": "HttpSessionSaml2AuthenticationRequestRepositoryTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "AbstractSaml2AuthenticationRequest mockAuthenticationRequest = mock(AbstractSaml2AuthenticationRequest.class);",
        "line": 120,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeAuthenticationRequestWhenAttributeInSessionThenRemoveAuthenticationRequest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(mockAuthenticationRequest.getAuthenticationRequestUri()).willReturn(IDP_SSO_URL);",
        "line": 121,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "removeAuthenticationRequestWhenAttributeInSessionThenRemoveAuthenticationRequest",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "authenticationRequest",
    "variableType": "AbstractSaml2AuthenticationRequest",
    "mockedClass": "AbstractSaml2AuthenticationRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.saml2.provider.service.web",
      "filePath": "C:\\java tool\\Spring\\spring-security\\saml2\\saml2-service-provider\\src\\test\\java\\org\\springframework\\security\\saml2\\provider\\service\\web\\Saml2AuthenticationTokenConverterTests.java",
      "className": "Saml2AuthenticationTokenConverterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "AbstractSaml2AuthenticationRequest authenticationRequest = mock(AbstractSaml2AuthenticationRequest.class);",
        "line": 176,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "convertWhenSavedAuthenticationRequestThenToken",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(authenticationRequest.getRelyingPartyRegistrationId()).willReturn(this.relyingPartyRegistration.getRegistrationId());",
        "line": 177,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "convertWhenSavedAuthenticationRequestThenToken",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "authenticationRequest",
    "variableType": "AbstractSaml2AuthenticationRequest",
    "mockedClass": "AbstractSaml2AuthenticationRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.springframework.security.saml2.provider.service.web",
      "filePath": "C:\\java tool\\Spring\\spring-security\\saml2\\saml2-service-provider\\src\\test\\java\\org\\springframework\\security\\saml2\\provider\\service\\web\\Saml2AuthenticationTokenConverterTests.java",
      "className": "Saml2AuthenticationTokenConverterTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "AbstractSaml2AuthenticationRequest authenticationRequest = mock(AbstractSaml2AuthenticationRequest.class);",
        "line": 201,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "convertWhenSavedAuthenticationRequestThenTokenWithRelyingPartyRegistrationResolver",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(authenticationRequest.getRelyingPartyRegistrationId()).willReturn(this.relyingPartyRegistration.getRegistrationId());",
        "line": 202,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "convertWhenSavedAuthenticationRequestThenTokenWithRelyingPartyRegistrationResolver",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
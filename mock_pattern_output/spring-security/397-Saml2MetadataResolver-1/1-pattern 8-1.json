[
  {
    "variableName": "metadataFactory",
    "variableType": "Saml2MetadataResolver",
    "mockedClass": "Saml2MetadataResolver",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.saml2.provider.service.metadata",
      "filePath": "C:\\java tool\\Spring\\spring-security\\saml2\\saml2-service-provider\\src\\test\\java\\org\\springframework\\security\\saml2\\provider\\service\\metadata\\RequestMatcherMetadataResponseResolverTests.java",
      "className": "RequestMatcherMetadataResponseResolverTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nSaml2MetadataResolver metadataFactory;",
        "line": 44,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.metadataFactory.resolve(any(Collection.class))).willReturn(\"metadata\");",
        "line": 54,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "saml2MetadataRegistrationIdResolveWhenMatchesThenResolves",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.metadataFactory).resolve(any(Collection.class));",
        "line": 59,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "saml2MetadataRegistrationIdResolveWhenMatchesThenResolves",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.metadataFactory.resolve(any(Collection.class))).willReturn(\"metadata\");",
        "line": 88,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveWhenNoRegistrationIdThenResolvesAll",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.metadataFactory).resolve(any(Collection.class));",
        "line": 95,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveWhenNoRegistrationIdThenResolvesAll",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.metadataFactory.resolve(any(Collection.class))).willReturn(\"metadata\");",
        "line": 114,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveWhenNoRegistrationIdThenResolvesEntityIds",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.metadataFactory).resolve(captor.capture());",
        "line": 117,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "resolveWhenNoRegistrationIdThenResolvesEntityIds",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  }
]
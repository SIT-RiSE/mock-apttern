[
  {
    "variableName": "authzRequestRepository",
    "variableType": "ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>",
    "mockedClass": "ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.oauth2.client.web.server",
      "filePath": "C:\\java tool\\Spring\\spring-security\\oauth2\\oauth2-client\\src\\test\\java\\org\\springframework\\security\\oauth2\\client\\web\\server\\OAuth2AuthorizationRequestRedirectWebFilterTests.java",
      "className": "OAuth2AuthorizationRequestRedirectWebFilterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest> authzRequestRepository;",
        "line": 64,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "// @formatter:on\r\nverifyNoInteractions(this.clientRepository, this.authzRequestRepository);",
        "line": 104,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenDoesNotMatchThenClientRegistrationRepositoryNotSubscribed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authzRequestRepository.saveAuthorizationRequest(any(), any())).willReturn(Mono.empty());",
        "line": 111,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenDoesMatchThenClientRegistrationRepositoryNotSubscribed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.authzRequestRepository).saveAuthorizationRequest(any(), any());",
        "line": 130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenDoesMatchThenClientRegistrationRepositoryNotSubscribed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authzRequestRepository.saveAuthorizationRequest(any(), any())).willReturn(Mono.empty());",
        "line": 138,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenDoesMatchThenResolveRedirectUriExpandedExcludesQueryString",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authzRequestRepository.saveAuthorizationRequest(any(), any())).willReturn(Mono.empty());",
        "line": 162,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenExceptionThenRedirected",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authzRequestRepository.saveAuthorizationRequest(any(), any())).willReturn(Mono.empty());",
        "line": 181,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenExceptionThenSaveRequestSessionAttribute",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authzRequestRepository.saveAuthorizationRequest(any(), any())).willReturn(Mono.empty());",
        "line": 203,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenPathMatchesThenRequestSessionAttributeNotSaved",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(this.authzRequestRepository.saveAuthorizationRequest(any(), any())).willReturn(Mono.empty());",
        "line": 219,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "filterWhenCustomRedirectStrategySetThenRedirectUriInResponseBody",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  }
]
[
  {
    "variableName": "context",
    "variableType": "ServletContext",
    "mockedClass": "ServletContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.context",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\context\\AbstractSecurityWebApplicationInitializerTests.java",
      "className": "AbstractSecurityWebApplicationInitializerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServletContext context = mock(ServletContext.class);",
        "line": 74,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenConfigurationClassThenAddsContextLoaderListener",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(context.addFilter(eq(\"springSecurityFilterChain\"), proxyCaptor.capture())).willReturn(registration);",
        "line": 77,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenConfigurationClassThenAddsContextLoaderListener",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(context).addListener(any(ContextLoaderListener.class));",
        "line": 83,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenConfigurationClassThenAddsContextLoaderListener",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "context",
    "variableType": "ServletContext",
    "mockedClass": "ServletContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.context",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\context\\AbstractSecurityWebApplicationInitializerTests.java",
      "className": "AbstractSecurityWebApplicationInitializerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServletContext context = mock(ServletContext.class);",
        "line": 88,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenEnableHttpSessionEventPublisherIsTrueThenAddsHttpSessionEventPublisher",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(context.addFilter(eq(\"springSecurityFilterChain\"), proxyCaptor.capture())).willReturn(registration);",
        "line": 91,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenEnableHttpSessionEventPublisherIsTrueThenAddsHttpSessionEventPublisher",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(context).addListener(HttpSessionEventPublisher.class.getName());",
        "line": 101,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenEnableHttpSessionEventPublisherIsTrueThenAddsHttpSessionEventPublisher",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "context",
    "variableType": "ServletContext",
    "mockedClass": "ServletContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.context",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\context\\AbstractSecurityWebApplicationInitializerTests.java",
      "className": "AbstractSecurityWebApplicationInitializerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServletContext context = mock(ServletContext.class);",
        "line": 157,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenInsertFiltersThenInserted",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(context.addFilter(eq(\"springSecurityFilterChain\"), proxyCaptor.capture())).willReturn(registration);",
        "line": 160,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenInsertFiltersThenInserted",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(context.addFilter(anyString(), eq(filter1))).willReturn(registration);",
        "line": 161,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenInsertFiltersThenInserted",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(context.addFilter(anyString(), eq(filter2))).willReturn(registration);",
        "line": 162,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenInsertFiltersThenInserted",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(context).addFilter(anyString(), eq(filter1));",
        "line": 173,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenInsertFiltersThenInserted",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(context).addFilter(anyString(), eq(filter2));",
        "line": 174,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenInsertFiltersThenInserted",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "context",
    "variableType": "ServletContext",
    "mockedClass": "ServletContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.context",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\context\\AbstractSecurityWebApplicationInitializerTests.java",
      "className": "AbstractSecurityWebApplicationInitializerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServletContext context = mock(ServletContext.class);",
        "line": 180,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenDuplicateFilterInsertedThenException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(context.addFilter(eq(\"springSecurityFilterChain\"), proxyCaptor.capture())).willReturn(registration);",
        "line": 183,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenDuplicateFilterInsertedThenException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(context).addFilter(anyString(), eq(filter1));",
        "line": 196,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenDuplicateFilterInsertedThenException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "context",
    "variableType": "ServletContext",
    "mockedClass": "ServletContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.context",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\context\\AbstractSecurityWebApplicationInitializerTests.java",
      "className": "AbstractSecurityWebApplicationInitializerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServletContext context = mock(ServletContext.class);",
        "line": 219,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenNullFilterInsertedThenException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(context.addFilter(eq(\"springSecurityFilterChain\"), proxyCaptor.capture())).willReturn(registration);",
        "line": 222,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenNullFilterInsertedThenException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(context.addFilter(anyString(), eq(filter))).willReturn(registration);",
        "line": 223,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenNullFilterInsertedThenException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(context, times(2)).addFilter(anyString(), any(Filter.class));",
        "line": 232,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenNullFilterInsertedThenException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "context",
    "variableType": "ServletContext",
    "mockedClass": "ServletContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.context",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\context\\AbstractSecurityWebApplicationInitializerTests.java",
      "className": "AbstractSecurityWebApplicationInitializerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServletContext context = mock(ServletContext.class);",
        "line": 239,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenAppendFiltersThenAppended",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(context.addFilter(eq(\"springSecurityFilterChain\"), proxyCaptor.capture())).willReturn(registration);",
        "line": 242,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenAppendFiltersThenAppended",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(context.addFilter(anyString(), eq(filter1))).willReturn(registration);",
        "line": 243,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenAppendFiltersThenAppended",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(context.addFilter(anyString(), eq(filter2))).willReturn(registration);",
        "line": 244,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenAppendFiltersThenAppended",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(context, times(3)).addFilter(anyString(), any(Filter.class));",
        "line": 255,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenAppendFiltersThenAppended",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "context",
    "variableType": "ServletContext",
    "mockedClass": "ServletContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.context",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\context\\AbstractSecurityWebApplicationInitializerTests.java",
      "className": "AbstractSecurityWebApplicationInitializerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServletContext context = mock(ServletContext.class);",
        "line": 261,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenDuplicateFilterAppendedThenException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(context.addFilter(eq(\"springSecurityFilterChain\"), proxyCaptor.capture())).willReturn(registration);",
        "line": 264,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenDuplicateFilterAppendedThenException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(context).addFilter(anyString(), eq(filter1));",
        "line": 277,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenDuplicateFilterAppendedThenException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "context",
    "variableType": "ServletContext",
    "mockedClass": "ServletContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.context",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\context\\AbstractSecurityWebApplicationInitializerTests.java",
      "className": "AbstractSecurityWebApplicationInitializerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServletContext context = mock(ServletContext.class);",
        "line": 300,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenNullFilterAppendedThenException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(context.addFilter(eq(\"springSecurityFilterChain\"), proxyCaptor.capture())).willReturn(registration);",
        "line": 303,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenNullFilterAppendedThenException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(context.addFilter(anyString(), eq(filter))).willReturn(registration);",
        "line": 304,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenNullFilterAppendedThenException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(context, times(2)).addFilter(anyString(), any(Filter.class));",
        "line": 313,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenNullFilterAppendedThenException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "context",
    "variableType": "ServletContext",
    "mockedClass": "ServletContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.context",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\context\\AbstractSecurityWebApplicationInitializerTests.java",
      "className": "AbstractSecurityWebApplicationInitializerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServletContext context = mock(ServletContext.class);",
        "line": 318,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenDefaultsThenSessionTrackingModes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(context.addFilter(eq(\"springSecurityFilterChain\"), any(DelegatingFilterProxy.class))).willReturn(registration);",
        "line": 321,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenDefaultsThenSessionTrackingModes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(context).addFilter(eq(\"springSecurityFilterChain\"), proxyCaptor.capture());",
        "line": 327,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenDefaultsThenSessionTrackingModes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(context).setSessionTrackingModes(modesCaptor.capture());",
        "line": 329,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenDefaultsThenSessionTrackingModes",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "context",
    "variableType": "ServletContext",
    "mockedClass": "ServletContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.context",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\context\\AbstractSecurityWebApplicationInitializerTests.java",
      "className": "AbstractSecurityWebApplicationInitializerTests"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ServletContext context = mock(ServletContext.class);",
        "line": 337,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenSessionTrackingModesConfiguredThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(context.addFilter(eq(\"springSecurityFilterChain\"), any(DelegatingFilterProxy.class))).willReturn(registration);",
        "line": 340,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenSessionTrackingModesConfiguredThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(context).addFilter(eq(\"springSecurityFilterChain\"), proxyCaptor.capture());",
        "line": 351,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenSessionTrackingModesConfiguredThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(context).setSessionTrackingModes(modesCaptor.capture());",
        "line": 353,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "onStartupWhenSessionTrackingModesConfiguredThenUsed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  }
]
[
  {
    "variableName": "handler3",
    "variableType": "AccessDeniedHandler",
    "mockedClass": "AccessDeniedHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.access",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\access\\DelegatingAccessDeniedHandlerTests.java",
      "className": "DelegatingAccessDeniedHandlerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate AccessDeniedHandler handler3;",
        "line": 47,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.handler3).handle(this.request, this.response, accessDeniedException);",
        "line": 73,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "moreSpecificDoesNotInvokeLessSpecific",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.handler3, never()).handle(any(HttpServletRequest.class), any(HttpServletResponse.class), any(AccessDeniedException.class));",
        "line": 86,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "matchesDoesNotInvokeDefault",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 9
  },
  {
    "variableName": "handler2",
    "variableType": "AccessDeniedHandler",
    "mockedClass": "AccessDeniedHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.access",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\access\\DelegatingAccessDeniedHandlerTests.java",
      "className": "DelegatingAccessDeniedHandlerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate AccessDeniedHandler handler2;",
        "line": 44,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.handler2).handle(this.request, this.response, accessDeniedException);",
        "line": 85,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "matchesDoesNotInvokeDefault",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 9
  },
  {
    "variableName": "handler1",
    "variableType": "AccessDeniedHandler",
    "mockedClass": "AccessDeniedHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.access",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\access\\DelegatingAccessDeniedHandlerTests.java",
      "className": "DelegatingAccessDeniedHandlerTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate AccessDeniedHandler handler1;",
        "line": 41,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.handler1, never()).handle(any(HttpServletRequest.class), any(HttpServletResponse.class), any(AccessDeniedException.class));",
        "line": 71,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "moreSpecificDoesNotInvokeLessSpecific",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.handler1, never()).handle(any(HttpServletRequest.class), any(HttpServletResponse.class), any(AccessDeniedException.class));",
        "line": 83,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "matchesDoesNotInvokeDefault",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 9
  },
  {
    "variableName": "deniedHandler",
    "variableType": "AccessDeniedHandler",
    "mockedClass": "AccessDeniedHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.springframework.security.web.csrf",
      "filePath": "C:\\java tool\\Spring\\spring-security\\web\\src\\test\\java\\org\\springframework\\security\\web\\csrf\\CsrfFilterTests.java",
      "className": "CsrfFilterTests"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "@Mock\r\nprivate AccessDeniedHandler deniedHandler;",
        "line": 71,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": [
            "@Mock"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.deniedHandler).handle(eq(this.request), eq(this.response), any(InvalidCsrfTokenException.class));",
        "line": 136,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterAccessDeniedNoTokenPresent",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.deniedHandler).handle(eq(this.request), eq(this.response), any(InvalidCsrfTokenException.class));",
        "line": 150,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterAccessDeniedIncorrectTokenPresent",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.deniedHandler).handle(eq(this.request), eq(this.response), any(InvalidCsrfTokenException.class));",
        "line": 164,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterAccessDeniedIncorrectTokenPresentHeader",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.deniedHandler).handle(eq(this.request), eq(this.response), any(InvalidCsrfTokenException.class));",
        "line": 183,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterAccessDeniedIncorrectTokenPresentHeaderPreferredOverParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(this.deniedHandler);",
        "line": 197,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterNotCsrfRequestExistingToken",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(this.deniedHandler);",
        "line": 210,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterNotCsrfRequestGenerateToken",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(this.deniedHandler);",
        "line": 227,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterIsCsrfRequestExistingTokenHeader",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(this.deniedHandler);",
        "line": 246,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterIsCsrfRequestExistingTokenHeaderPreferredOverInvalidParam",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(this.deniedHandler);",
        "line": 263,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterIsCsrfRequestExistingToken",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(this.deniedHandler);",
        "line": 284,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterIsCsrfRequestGenerateToken",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verifyNoMoreInteractions(this.deniedHandler);",
        "line": 298,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterDefaultRequireCsrfProtectionMatcherAllowedMethods",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.deniedHandler).handle(eq(this.request), eq(this.response), any(InvalidCsrfTokenException.class));",
        "line": 318,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterDefaultRequireCsrfProtectionMatcherAllowedMethodsCaseSensitive",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.deniedHandler).handle(eq(this.request), eq(this.response), any(InvalidCsrfTokenException.class));",
        "line": 334,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterDefaultRequireCsrfProtectionMatcherDeniedMethods",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(this.deniedHandler).handle(eq(this.request), eq(this.response), any(AccessDeniedException.class));",
        "line": 429,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doFilterWhenXorCsrfTokenRequestAttributeHandlerAndRawTokenThenAccessDeniedException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 9
  }
]
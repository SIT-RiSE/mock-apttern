[
  {
    "variableName": "invoker1",
    "variableType": "Invoker<ForkingClusterInvokerTest>",
    "mockedClass": "Invoker",
    "isReuseableMock": null,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Helper Method\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ForkingClusterInvokerTest.java",
      "className": "ForkingClusterInvokerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private Invoker<ForkingClusterInvokerTest> invoker1 = mock(Invoker.class);",
        "line": 48,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker1.invoke(invocation)).willThrow(new RuntimeException());",
        "line": 73,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "resetInvokerToException",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 74,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "resetInvokerToException",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker1.isAvailable()).willReturn(true);",
        "line": 75,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "resetInvokerToException",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker1.getInterface()).willReturn(ForkingClusterInvokerTest.class);",
        "line": 76,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "resetInvokerToException",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker1.invoke(invocation)).willReturn(result);",
        "line": 90,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 91,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker1.isAvailable()).willReturn(true);",
        "line": 92,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker1.getInterface()).willReturn(ForkingClusterInvokerTest.class);",
        "line": 93,
        "locate": "Helper Method",
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker1.invoke(invocation)).willReturn(result);",
        "line": 160,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokeWithIllegalForksParam",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 161,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokeWithIllegalForksParam",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker1.isAvailable()).willReturn(true);",
        "line": 162,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokeWithIllegalForksParam",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker1.getInterface()).willReturn(ForkingClusterInvokerTest.class);",
        "line": 163,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokeWithIllegalForksParam",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 26
  }
]
[
  {
    "variableName": "ruleRepository",
    "variableType": "GovernanceRuleRepository",
    "mockedClass": "GovernanceRuleRepository",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.router.mesh.route",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleManagerTest.java",
      "className": "MeshRuleManagerTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private GovernanceRuleRepository ruleRepository;",
        "line": 68,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "ruleRepository = Mockito.mock(GovernanceRuleRepository.class);",
        "line": 76,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(ruleRepository, times(1)).getRule(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", 5000L);",
        "line": 112,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRegister1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(ruleRepository, times(1)).addListener(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", meshAppRuleListener);",
        "line": 116,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRegister1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(ruleRepository, times(1)).removeListener(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", meshAppRuleListener);",
        "line": 148,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRegister1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(ruleRepository.getRule(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", 5000L)).thenReturn(rule1 + \"---\\n\" + rule2);",
        "line": 176,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRegister2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(ruleRepository, times(1)).getRule(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", 5000L);",
        "line": 181,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRegister2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(ruleRepository, times(1)).addListener(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", meshRuleManager.getAppRuleListeners().values().iterator().next());",
        "line": 182,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRegister2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(ruleRepository, times(1)).getRule(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", 5000L);",
        "line": 233,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRegister3",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(ruleRepository, times(1)).addListener(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", meshAppRuleListener);",
        "line": 236,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRegister3",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(ruleRepository, times(1)).removeListener(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", meshAppRuleListener);",
        "line": 270,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRegister3",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 8
  }
]
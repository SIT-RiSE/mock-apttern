[
  {
    "variableName": "mapping",
    "variableType": "AbstractServiceNameMapping",
    "mockedClass": "AbstractServiceNameMapping",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 @Before\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\ServiceDiscoveryRegistryTest.java",
      "className": "ServiceDiscoveryRegistryTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private static AbstractServiceNameMapping mapping = mock(AbstractServiceNameMapping.class);",
        "line": 69,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "when(mapping.getMappingLock(any())).thenReturn(lock);",
        "line": 114,
        "locate": "@Before",
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// Exceptional case, no interface-app mapping found\r\nwhen(mapping.getAndListen(any(), any(), any())).thenReturn(Collections.emptySet());",
        "line": 130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDoSubscribe",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(mapping.getAndListen(any(), any(), any())).thenReturn(singleApp);",
        "line": 158,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDoSubscribe",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// do unsubscribe\r\nwhen(mapping.getMapping(url2)).thenReturn(multiApps);",
        "line": 274,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUnsubscribe",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(mapping.getMapping(url)).thenReturn(multiApps);",
        "line": 284,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUnsubscribe",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 12
  }
]
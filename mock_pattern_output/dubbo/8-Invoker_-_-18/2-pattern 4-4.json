[
  {
    "variableName": "invoker",
    "variableType": "Invoker<?>",
    "mockedClass": "Invoker",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\filter\\MetricsClusterFilterTest.java",
      "className": "MetricsClusterFilterTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private final Invoker<?> invoker = mock(Invoker.class);",
        "line": 58,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willThrow(new RpcException(errorCode));",
        "line": 109,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClusterFilterError",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<?>",
    "mockedClass": "Invoker",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\filter\\MetricsClusterFilterTest.java",
      "className": "MetricsClusterFilterTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private final Invoker<?> invoker = mock(Invoker.class);",
        "line": 58,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willThrow(new RpcException(errorCode));",
        "line": 109,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testClusterFilterError",
          "methodAnnotations": []
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<?>",
    "mockedClass": "Invoker",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.validation.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-filter\\dubbo-filter-validation\\src\\test\\java\\org\\apache\\dubbo\\validation\\filter\\ValidationFilterTest.java",
      "className": "ValidationFilterTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private Invoker<?> invoker = mock(Invoker.class);",
        "line": 38,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 55,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWithNotExistClass",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 56,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWithNotExistClass",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 72,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWithExistClass",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 73,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWithExistClass",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 89,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWithoutUrlParameters",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 90,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWithoutUrlParameters",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 106,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWhileMethodNameStartWithDollar",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 107,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWhileMethodNameStartWithDollar",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 124,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWhileThrowoutRpcException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 125,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWhileThrowoutRpcException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<?>",
    "mockedClass": "Invoker",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.metrics.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\filter\\MetricsFilterTest.java",
      "className": "MetricsFilterTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private final Invoker<?> invoker = mock(Invoker.class);",
        "line": 68,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 106,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCollectDisabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willThrow(new RpcException(\"failed\"));",
        "line": 117,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUnknownFailedRequests",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
        "line": 144,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testBusinessFailedRequests",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
        "line": 172,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testTimeoutRequests",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willThrow(new RpcException(RpcException.LIMIT_EXCEEDED_EXCEPTION));",
        "line": 201,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testLimitRequests",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 225,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSucceedRequests",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 248,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMissingGroup",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willThrow(new RpcException(errorCode));",
        "line": 279,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFilterError",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 313,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMissingVersion",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 336,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMissingGroupAndVersion",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 359,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGenericCall",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 404,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testThrowable",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
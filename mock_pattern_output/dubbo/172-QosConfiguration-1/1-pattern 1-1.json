[
  {
    "variableName": "qosConfiguration",
    "variableType": "QosConfiguration",
    "mockedClass": "QosConfiguration",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.permission",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\permission\\DefaultAnonymousAccessPermissionCheckerTest.java",
      "className": "DefaultAnonymousAccessPermissionCheckerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "QosConfiguration qosConfiguration = Mockito.mock(QosConfiguration.class);",
        "line": 44,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(qosConfiguration.getAnonymousAccessPermissionLevel()).thenReturn(PermissionLevel.PUBLIC);",
        "line": 45,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(qosConfiguration.getAcceptForeignIpWhitelistPredicate()).thenReturn(ip -> false);",
        "line": 46,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(qosConfiguration.getAnonymousAccessPermissionLevel()).thenReturn(PermissionLevel.PROTECTED);",
        "line": 64,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(qosConfiguration.getAnonymousAccessPermissionLevel()).thenReturn(PermissionLevel.NONE);",
        "line": 71,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(qosConfiguration.getAcceptForeignIpWhitelistPredicate()).thenReturn(ip -> true);",
        "line": 78,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(qosConfiguration.getAcceptForeignIpWhitelistPredicate()).thenReturn(ip -> false);",
        "line": 84,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(qosConfiguration.getAnonymousAllowCommands()).thenReturn(\"test1,test2\");",
        "line": 85,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
[
  {
    "variableName": "request",
    "variableType": "HttpRequest",
    "mockedClass": "HttpRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.command.decoder",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\decoder\\HttpCommandDecoderTest.java",
      "className": "HttpCommandDecoderTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HttpRequest request = mock(HttpRequest.class);",
        "line": 41,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "decodeGet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(request.uri()).thenReturn(\"localhost:80/test\");",
        "line": 42,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "decodeGet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(request.method()).thenReturn(HttpMethod.GET);",
        "line": 43,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "decodeGet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(request.uri()).thenReturn(\"localhost:80/test?a=b&c=d\");",
        "line": 47,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "decodeGet",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "message",
    "variableType": "HttpRequest",
    "mockedClass": "HttpRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.server.handler",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java",
      "className": "HttpProcessHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HttpRequest message = Mockito.mock(HttpRequest.class);",
        "line": 46,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(message.uri()).thenReturn(\"test\");",
        "line": 47,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "message",
    "variableType": "HttpRequest",
    "mockedClass": "HttpRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.server.handler",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java",
      "className": "HttpProcessHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HttpRequest message = Mockito.mock(HttpRequest.class);",
        "line": 63,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(message.uri()).thenReturn(\"localhost:80/greeting\");",
        "line": 64,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(message.method()).thenReturn(HttpMethod.GET);",
        "line": 65,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "message",
    "variableType": "HttpRequest",
    "mockedClass": "HttpRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.server.handler",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java",
      "className": "HttpProcessHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "HttpRequest message = Mockito.mock(HttpRequest.class);",
        "line": 84,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test3",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(message.uri()).thenReturn(\"localhost:80/test\");",
        "line": 85,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test3",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(message.method()).thenReturn(HttpMethod.GET);",
        "line": 86,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test3",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
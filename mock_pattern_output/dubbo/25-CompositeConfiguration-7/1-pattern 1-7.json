[
  {
    "variableName": "compositeConfiguration",
    "variableType": "CompositeConfiguration",
    "mockedClass": "CompositeConfiguration",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.integration",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
      "className": "RegistryProtocolTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
        "line": 86,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConsumerUrlWithoutProtocol",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);",
        "line": 87,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConsumerUrlWithoutProtocol",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "compositeConfiguration",
    "variableType": "CompositeConfiguration",
    "mockedClass": "CompositeConfiguration",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.integration",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
      "className": "RegistryProtocolTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
        "line": 154,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConsumerUrlWithProtocol",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);",
        "line": 155,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testConsumerUrlWithProtocol",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "compositeConfiguration",
    "variableType": "CompositeConfiguration",
    "mockedClass": "CompositeConfiguration",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.integration",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
      "className": "RegistryProtocolTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
        "line": 225,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReferWithoutGroup",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);",
        "line": 226,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReferWithoutGroup",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "compositeConfiguration",
    "variableType": "CompositeConfiguration",
    "mockedClass": "CompositeConfiguration",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.integration",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
      "className": "RegistryProtocolTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
        "line": 291,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReferWithGroup",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);",
        "line": 292,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testReferWithGroup",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "compositeConfiguration",
    "variableType": "CompositeConfiguration",
    "mockedClass": "CompositeConfiguration",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.integration",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
      "className": "RegistryProtocolTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
        "line": 360,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInterceptInvokerForMigrationRuleListener",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);",
        "line": 361,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInterceptInvokerForMigrationRuleListener",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "compositeConfiguration",
    "variableType": "CompositeConfiguration",
    "mockedClass": "CompositeConfiguration",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.integration",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
      "className": "RegistryProtocolTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
        "line": 426,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);",
        "line": 427,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "compositeConfiguration",
    "variableType": "CompositeConfiguration",
    "mockedClass": "CompositeConfiguration",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.integration",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
      "className": "RegistryProtocolTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
        "line": 492,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRegisterConsumerUrl",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);",
        "line": 493,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRegisterConsumerUrl",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
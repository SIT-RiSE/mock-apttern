[
  {
    "variableName": "address",
    "variableType": "InetAddress",
    "mockedClass": "InetAddress",
    "isReuseableMock": null,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\u2014 Local Assignment in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.common.utils",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\NetUtilsTest.java",
      "className": "NetUtilsTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "InetAddress address = mock(InetAddress.class);",
        "line": 117,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "address = mock(InetAddress.class);",
        "line": 120,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "address = mock(InetAddress.class);",
        "line": 123,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "address = mock(InetAddress.class);",
        "line": 126,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "address = mock(InetAddress.class);",
        "line": 129,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(address.isLoopbackAddress()).thenReturn(true);",
        "line": 118,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(address.getHostAddress()).thenReturn(\"localhost\");",
        "line": 121,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(address.getHostAddress()).thenReturn(\"0.0.0.0\");",
        "line": 124,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(address.getHostAddress()).thenReturn(\"127.0.0.1\");",
        "line": 127,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(address.getHostAddress()).thenReturn(\"1.2.3.4\");",
        "line": 130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 29
  }
]
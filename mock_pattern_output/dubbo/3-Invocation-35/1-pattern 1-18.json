[
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\ConsistentHashLoadBalanceTest.java",
      "className": "ConsistentHashLoadBalanceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Invocation invocation = mock(Invocation.class);",
        "line": 63,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testArgumentMatchAll",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getMethodName()).willReturn(\"$invoke\");",
        "line": 65,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testArgumentMatchAll",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getArguments()).willReturn(args);",
        "line": 69,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testArgumentMatchAll",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.router",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\RouterSnapshotFilterTest.java",
      "className": "RouterSnapshotFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Invocation invocation = Mockito.mock(Invocation.class);",
        "line": 45,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(invocation.getServiceModel()).thenReturn(serviceModel);",
        "line": 48,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.auth",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\AccessKeyAuthenticatorTest.java",
      "className": "AccessKeyAuthenticatorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Invocation invocation = mock(Invocation.class);",
        "line": 124,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetSignatureWithParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getArguments()).thenReturn(params);",
        "line": 127,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetSignatureWithParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getArguments()).thenReturn(fakeParams);",
        "line": 133,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetSignatureWithParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "RpcInvocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.auth.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java",
      "className": "ProviderAuthFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Invocation invocation = mock(RpcInvocation.class);",
        "line": 77,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthFailed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getAttachment(Constants.REQUEST_SIGNATURE_KEY)).thenReturn(null);",
        "line": 78,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthFailed",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "RpcInvocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.auth.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java",
      "className": "ProviderAuthFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Invocation invocation = mock(RpcInvocation.class);",
        "line": 94,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthFailedWhenNoSignature",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getAttachment(Constants.REQUEST_SIGNATURE_KEY)).thenReturn(null);",
        "line": 95,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthFailedWhenNoSignature",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "RpcInvocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.auth.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java",
      "className": "ProviderAuthFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Invocation invocation = mock(RpcInvocation.class);",
        "line": 109,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthFailedWhenNoAccessKeyPair",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getObjectAttachment(Constants.REQUEST_SIGNATURE_KEY)).thenReturn(\"dubbo\");",
        "line": 110,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthFailedWhenNoAccessKeyPair",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getObjectAttachment(Constants.AK_KEY)).thenReturn(\"ak\");",
        "line": 111,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthFailedWhenNoAccessKeyPair",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getObjectAttachment(CommonConstants.CONSUMER)).thenReturn(\"test-consumer\");",
        "line": 112,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthFailedWhenNoAccessKeyPair",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getObjectAttachment(Constants.REQUEST_TIMESTAMP_KEY)).thenReturn(System.currentTimeMillis());",
        "line": 113,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthFailedWhenNoAccessKeyPair",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "RpcInvocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.auth.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java",
      "className": "ProviderAuthFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Invocation invocation = mock(RpcInvocation.class);",
        "line": 137,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthFailedWhenParameterError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getObjectAttachment(Constants.AK_KEY)).thenReturn(\"ak\");",
        "line": 138,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthFailedWhenParameterError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getObjectAttachment(CommonConstants.CONSUMER)).thenReturn(\"test-consumer\");",
        "line": 139,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthFailedWhenParameterError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getObjectAttachment(Constants.REQUEST_TIMESTAMP_KEY)).thenReturn(currentTimeMillis);",
        "line": 140,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthFailedWhenParameterError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getMethodName()).thenReturn(method);",
        "line": 141,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthFailedWhenParameterError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getArguments()).thenReturn(fakeParams);",
        "line": 143,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthFailedWhenParameterError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getObjectAttachment(Constants.REQUEST_SIGNATURE_KEY)).thenReturn(sign);",
        "line": 153,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthFailedWhenParameterError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "RpcInvocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.auth.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java",
      "className": "ProviderAuthFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Invocation invocation = mock(RpcInvocation.class);",
        "line": 173,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthSuccessfully",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getAttachment(Constants.AK_KEY)).thenReturn(\"ak\");",
        "line": 174,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthSuccessfully",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getAttachment(CommonConstants.CONSUMER)).thenReturn(\"test-consumer\");",
        "line": 175,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthSuccessfully",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getAttachment(Constants.REQUEST_TIMESTAMP_KEY)).thenReturn(String.valueOf(currentTimeMillis));",
        "line": 176,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthSuccessfully",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getMethodName()).thenReturn(method);",
        "line": 177,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthSuccessfully",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getAttachment(Constants.REQUEST_SIGNATURE_KEY)).thenReturn(sign);",
        "line": 187,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthSuccessfully",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ClassLoaderFilterTest.java",
      "className": "ClassLoaderFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Invocation invocation = Mockito.mock(Invocation.class);",
        "line": 66,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(invocation.getServiceModel()).thenReturn(serviceModel);",
        "line": 69,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExecuteLimitFilterTest.java",
      "className": "ExecuteLimitFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Invocation invocation = Mockito.mock(Invocation.class);",
        "line": 50,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNoExecuteLimitInvoke",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getMethodName()).thenReturn(\"testNoExecuteLimitInvoke\");",
        "line": 51,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testNoExecuteLimitInvoke",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExecuteLimitFilterTest.java",
      "className": "ExecuteLimitFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Invocation invocation = Mockito.mock(Invocation.class);",
        "line": 64,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteLimitInvoke",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getMethodName()).thenReturn(\"testExecuteLimitInvoke\");",
        "line": 65,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteLimitInvoke",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExecuteLimitFilterTest.java",
      "className": "ExecuteLimitFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Invocation invocation = Mockito.mock(Invocation.class);",
        "line": 79,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteLimitInvokeWithException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getMethodName()).thenReturn(\"testExecuteLimitInvokeWitException\");",
        "line": 80,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testExecuteLimitInvokeWithException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "RpcInvocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExecuteLimitFilterTest.java",
      "className": "ExecuteLimitFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "final Invocation invocation = Mockito.mock(RpcInvocation.class);",
        "line": 99,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMoreThanExecuteLimitInvoke",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getMethodName()).thenReturn(\"testMoreThanExecuteLimitInvoke\");",
        "line": 100,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMoreThanExecuteLimitInvoke",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\TimeoutFilterTest.java",
      "className": "TimeoutFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Invocation invocation = Mockito.mock(Invocation.class);",
        "line": 48,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokeWithoutTimeout",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getMethodName()).thenReturn(\"testInvokeWithoutTimeout\");",
        "line": 49,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokeWithoutTimeout",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "RpcInvocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\TimeoutFilterTest.java",
      "className": "TimeoutFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Invocation invocation = Mockito.mock(RpcInvocation.class);",
        "line": 62,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokeWithTimeout",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getMethodName()).thenReturn(\"testInvokeWithTimeout\");",
        "line": 63,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokeWithTimeout",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\TokenFilterTest.java",
      "className": "TokenFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Invocation invocation = Mockito.mock(Invocation.class);",
        "line": 50,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokeWithToken",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getObjectAttachmentWithoutConvert(TOKEN_KEY)).thenReturn(token);",
        "line": 51,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokeWithToken",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\TokenFilterTest.java",
      "className": "TokenFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Invocation invocation = Mockito.mock(Invocation.class);",
        "line": 69,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokeWithWrongToken",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(invocation.getObjectAttachments()).thenReturn(attachments);",
        "line": 70,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokeWithWrongToken",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "mockInvocation",
    "variableType": "Invocation",
    "mockedClass": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.protocol.dubbo.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-dubbo\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\dubbo\\filter\\TraceFilterTest.java",
      "className": "TraceFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Invocation mockInvocation = mock(Invocation.class);",
        "line": 97,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(mockInvocation.getMethodName()).willReturn(method);",
        "line": 102,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(mockInvocation.getArguments()).willReturn(new Object[0]);",
        "line": 103,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
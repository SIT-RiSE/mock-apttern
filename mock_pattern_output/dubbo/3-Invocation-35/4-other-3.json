[
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "RpcInvocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\u2014 Global Init in @Before\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
      "className": "MergeableClusterInvokerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private Invocation invocation = mock(RpcInvocation.class);",
        "line": 57,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "invocation = mock(RpcInvocation.class);",
        "line": 100,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getMethodName()).willReturn(\"getMenu\");",
        "line": 109,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
        "line": 110,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getArguments()).willReturn(new Object[] {});",
        "line": 111,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
        "line": 112,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 113,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getMethodName()).willReturn(\"addMenu\");",
        "line": 187,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class, List.class });",
        "line": 188,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getArguments()).willReturn(new Object[] { menu, menuItems });",
        "line": 189,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
        "line": 190,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 191,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getMethodName()).willReturn(\"addMenu\");",
        "line": 235,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class, List.class });",
        "line": 236,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getArguments()).willReturn(new Object[] { menu, menuItems });",
        "line": 237,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
        "line": 238,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 239,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getMethodName()).willReturn(\"addMenu\");",
        "line": 297,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class, List.class });",
        "line": 298,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getArguments()).willReturn(new Object[] { menu, menuItems });",
        "line": 299,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
        "line": 300,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 301,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getMethodName()).willReturn(\"addMenu\");",
        "line": 354,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class, List.class });",
        "line": 355,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getArguments()).willReturn(new Object[] { menu, menuItems });",
        "line": 356,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
        "line": 357,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 358,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getMethodName()).willReturn(\"getMenu\");",
        "line": 402,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
        "line": 403,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getArguments()).willReturn(new Object[] {});",
        "line": 404,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
        "line": 405,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 406,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getMethodName()).willReturn(\"getMenu\");",
        "line": 448,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
        "line": 449,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getArguments()).willReturn(new Object[] {});",
        "line": 450,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
        "line": 451,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 452,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// mock ApplicationModel\r\ngiven(invocation.getModuleModel()).willReturn(moduleModel);",
        "line": 454,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getModuleModel().getApplicationModel()).willReturn(ApplicationModel.defaultModel());",
        "line": 455,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getMethodName()).willReturn(\"getMenu\");",
        "line": 509,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
        "line": 510,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getArguments()).willReturn(new Object[] {});",
        "line": 511,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
        "line": 512,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 513,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 41
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "RpcInvocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Declaration Attribute\n\u2014 Lazy-init via Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\CompatibleFilterFilterTest.java",
      "className": "CompatibleFilterFilterTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private Invocation invocation;",
        "line": 43,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "invocation = mock(RpcInvocation.class);",
        "line": 53,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerGeneric",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getMethodName()).willReturn(\"$enumlength\");",
        "line": 54,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerGeneric",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { Enum.class });",
        "line": 55,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerGeneric",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
        "line": 56,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerGeneric",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "invocation = mock(RpcInvocation.class);",
        "line": 73,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testResultHasException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getMethodName()).willReturn(\"enumlength\");",
        "line": 74,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testResultHasException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { Enum.class });",
        "line": 75,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testResultHasException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
        "line": 76,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testResultHasException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "invocation = mock(RpcInvocation.class);",
        "line": 94,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerJsonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getMethodName()).willReturn(\"enumlength\");",
        "line": 95,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerJsonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { Type[].class });",
        "line": 96,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerJsonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
        "line": 97,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerJsonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "invocation = mock(RpcInvocation.class);",
        "line": 117,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonEnumSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getMethodName()).willReturn(\"enumlength\");",
        "line": 118,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonEnumSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { Type[].class });",
        "line": 119,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonEnumSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
        "line": 120,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonEnumSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "invocation = mock(RpcInvocation.class);",
        "line": 140,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonNonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getMethodName()).willReturn(\"echo\");",
        "line": 141,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonNonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
        "line": 142,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonNonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
        "line": 143,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonNonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "invocation = mock(RpcInvocation.class);",
        "line": 160,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getMethodName()).willReturn(\"echo\");",
        "line": 161,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
        "line": 162,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
        "line": 163,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 23
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Declaration Attribute\n\u2014 Lazy-init via Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ContextFilterTest.java",
      "className": "ContextFilterTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "Invocation invocation;",
        "line": 45,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "invocation = mock(Invocation.class);",
        "line": 50,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetContext",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getMethodName()).willReturn(\"$enumlength\");",
        "line": 51,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetContext",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { Enum.class });",
        "line": 52,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetContext",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
        "line": 53,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetContext",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getObjectAttachments()).willReturn(null);",
        "line": 54,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSetContext",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 23
  }
]
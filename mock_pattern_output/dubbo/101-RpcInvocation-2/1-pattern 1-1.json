[
  {
    "variableName": "rpcInvocation",
    "variableType": "RpcInvocation",
    "mockedClass": "RpcInvocation",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.router.mock",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mock\\MockInvokersSelectorTest.java",
      "className": "MockInvokersSelectorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "RpcInvocation rpcInvocation = Mockito.mock(RpcInvocation.class);",
        "line": 49,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "// rpcInvocation have an attached \"invocation.need.mock\" parameter, so it will filter out the invoker whose\r\n// protocol is mock\r\nMockito.when(rpcInvocation.getObjectAttachmentWithoutConvert(INVOCATION_NEED_MOCK)).thenReturn(\"true\");",
        "line": 63,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
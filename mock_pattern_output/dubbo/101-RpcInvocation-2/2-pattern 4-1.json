[
  {
    "variableName": "invocation",
    "variableType": "RpcInvocation",
    "mockedClass": "RpcInvocation",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.validation.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-filter\\dubbo-filter-validation\\src\\test\\java\\org\\apache\\dubbo\\validation\\filter\\ValidationFilterTest.java",
      "className": "ValidationFilterTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private RpcInvocation invocation = mock(RpcInvocation.class);",
        "line": 41,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getMethodName()).willReturn(\"echo1\");",
        "line": 57,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWithNotExistClass",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
        "line": 58,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWithNotExistClass",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"arg1\" });",
        "line": 59,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWithNotExistClass",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getMethodName()).willReturn(\"echo1\");",
        "line": 74,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWithExistClass",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
        "line": 75,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWithExistClass",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"arg1\" });",
        "line": 76,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWithExistClass",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getMethodName()).willReturn(\"echo1\");",
        "line": 91,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWithoutUrlParameters",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
        "line": 92,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWithoutUrlParameters",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"arg1\" });",
        "line": 93,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWithoutUrlParameters",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getMethodName()).willReturn(\"$echo1\");",
        "line": 108,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWhileMethodNameStartWithDollar",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
        "line": 109,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWhileMethodNameStartWithDollar",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"arg1\" });",
        "line": 110,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWhileMethodNameStartWithDollar",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getMethodName()).willReturn(\"echo1\");",
        "line": 126,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWhileThrowoutRpcException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
        "line": 127,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWhileThrowoutRpcException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"arg1\" });",
        "line": 128,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testItWhileThrowoutRpcException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 4
  }
]
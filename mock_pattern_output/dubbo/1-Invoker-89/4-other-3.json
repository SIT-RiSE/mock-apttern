[
  {
    "variableName": "secondInvoker",
    "variableType": "Invoker",
    "mockedClass": "Invoker",
    "isReuseableMock": null,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\u2014 Global Init in @Before\n\u2014 Lazy-init via Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
      "className": "MergeableClusterInvokerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private Invoker secondInvoker = mock(Invoker.class);",
        "line": 56,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "secondInvoker = mock(Invoker.class);",
        "line": 99,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "secondInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"second\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(secondMenu, invocation);\r\n    }\r\n    return null;\r\n});",
        "line": 129,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(secondInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"second\"));",
        "line": 198,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(secondInvoker.getInterface()).willReturn(MenuService.class);",
        "line": 199,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 200,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(secondInvoker.isAvailable()).willReturn(true);",
        "line": 201,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "secondInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"second\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(secondMenu, invocation);\r\n    }\r\n    return null;\r\n});",
        "line": 255,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(secondInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"second\"));",
        "line": 310,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(secondInvoker.getInterface()).willReturn(MenuService.class);",
        "line": 311,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 312,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(secondInvoker.isAvailable()).willReturn(true);",
        "line": 313,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(secondInvoker.invoke(invocation)).willThrow(new RpcException(RpcException.NO_INVOKER_AVAILABLE_AFTER_FILTER));",
        "line": 314,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(secondInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"second\"));",
        "line": 366,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(secondInvoker.getInterface()).willReturn(MenuService.class);",
        "line": 367,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 368,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(secondInvoker.isAvailable()).willReturn(true);",
        "line": 369,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(secondInvoker.invoke(invocation)).willThrow(new RpcException(RpcException.NETWORK_EXCEPTION));",
        "line": 370,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(secondInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"second\"));",
        "line": 413,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(secondInvoker.getInterface()).willReturn(MenuService.class);",
        "line": 414,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 415,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(secondInvoker.isAvailable()).willReturn(true);",
        "line": 416,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "secondInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"second\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(secondMenu, invocation);\r\n    }\r\n    return null;\r\n});",
        "line": 471,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(secondInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"second\"));",
        "line": 519,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(secondInvoker.getInterface()).willReturn(MenuService.class);",
        "line": 520,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 521,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 48
  },
  {
    "variableName": "firstInvoker",
    "variableType": "Invoker",
    "mockedClass": "Invoker",
    "isReuseableMock": null,
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\u2014 Global Init in @Before\n\u2014 Lazy-init via Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
      "className": "MergeableClusterInvokerTest"
    },
    "statements": [
      {
        "type": "FIELD_MOCK_CREATION",
        "code": "private Invoker firstInvoker = mock(Invoker.class);",
        "line": 55,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "firstInvoker = mock(Invoker.class);",
        "line": 98,
        "locate": "@Before",
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "firstInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"first\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(firstMenu, invocation);\r\n    }\r\n    return null;\r\n});",
        "line": 115,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(firstInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"first\"));",
        "line": 193,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(firstInvoker.getInterface()).willReturn(MenuService.class);",
        "line": 194,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 195,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(firstInvoker.isAvailable()).willReturn(true);",
        "line": 196,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "firstInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"first\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(firstMenu, invocation);\r\n    }\r\n    return null;\r\n});",
        "line": 241,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(firstInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"first\"));",
        "line": 303,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(firstInvoker.getInterface()).willReturn(MenuService.class);",
        "line": 304,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 305,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(firstInvoker.isAvailable()).willReturn(true);",
        "line": 306,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(firstInvoker.invoke(invocation)).willThrow(new RpcException(RpcException.NO_INVOKER_AVAILABLE_AFTER_FILTER));",
        "line": 307,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(firstInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"first\"));",
        "line": 360,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(firstInvoker.getInterface()).willReturn(MenuService.class);",
        "line": 361,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 362,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(firstInvoker.isAvailable()).willReturn(true);",
        "line": 363,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(firstInvoker.invoke(invocation)).willThrow(new RpcException(RpcException.NETWORK_EXCEPTION));",
        "line": 364,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(firstInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"first\"));",
        "line": 408,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(firstInvoker.getInterface()).willReturn(MenuService.class);",
        "line": 409,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 410,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(firstInvoker.isAvailable()).willReturn(true);",
        "line": 411,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "firstInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"first\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(firstMenu, invocation);\r\n    }\r\n    return null;\r\n});",
        "line": 457,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(firstInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"first\"));",
        "line": 515,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(firstInvoker.getInterface()).willReturn(MenuService.class);",
        "line": 516,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 517,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 48
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "mockedClass": "Invoker",
    "isReuseableMock": null,
    "mockPattern": "Creation:\n\u2014 Declaration Attribute\n\u2014 Lazy-init via Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\CompatibleFilterFilterTest.java",
      "className": "CompatibleFilterFilterTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private Invoker invoker;",
        "line": 44,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "invoker = mock(Invoker.class);",
        "line": 58,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerGeneric",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.isAvailable()).willReturn(true);",
        "line": 59,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerGeneric",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
        "line": 60,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerGeneric",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willReturn(result);",
        "line": 63,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerGeneric",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 65,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerGeneric",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "invoker = mock(Invoker.class);",
        "line": 78,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testResultHasException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.isAvailable()).willReturn(true);",
        "line": 79,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testResultHasException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
        "line": 80,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testResultHasException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willReturn(result);",
        "line": 84,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testResultHasException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 86,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testResultHasException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "invoker = mock(Invoker.class);",
        "line": 99,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerJsonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.isAvailable()).willReturn(true);",
        "line": 100,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerJsonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
        "line": 101,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerJsonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willReturn(defaultAsyncResult);",
        "line": 105,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerJsonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 107,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerJsonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "invoker = mock(Invoker.class);",
        "line": 122,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonEnumSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.isAvailable()).willReturn(true);",
        "line": 123,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonEnumSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
        "line": 124,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonEnumSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willReturn(defaultAsyncResult);",
        "line": 128,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonEnumSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonEnumSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "invoker = mock(Invoker.class);",
        "line": 145,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonNonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.isAvailable()).willReturn(true);",
        "line": 146,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonNonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
        "line": 147,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonNonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willReturn(result);",
        "line": 150,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonNonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 152,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonNonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "invoker = mock(Invoker.class);",
        "line": 165,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.isAvailable()).willReturn(true);",
        "line": 166,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
        "line": 167,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.invoke(invocation)).willReturn(result);",
        "line": 170,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 172,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testInvokerNonJsonPojoSerialization",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 23
  }
]
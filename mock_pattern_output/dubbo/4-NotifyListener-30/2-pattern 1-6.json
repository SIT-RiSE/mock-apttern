[
  {
    "variableName": "demoServiceListener2",
    "variableType": "NotifyListener",
    "mockedClass": "NotifyListener",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client.event.listener",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java",
      "className": "ServiceInstancesChangedListenerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NotifyListener demoServiceListener2 = Mockito.mock(NotifyListener.class);",
        "line": 412,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "@Test",
            "@Order"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(demoServiceListener2.getConsumerUrl()).thenReturn(consumerURL);",
        "line": 413,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "@Test",
            "@Order"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "demoService2Listener2",
    "variableType": "NotifyListener",
    "mockedClass": "NotifyListener",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client.event.listener",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java",
      "className": "ServiceInstancesChangedListenerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NotifyListener demoService2Listener2 = Mockito.mock(NotifyListener.class);",
        "line": 416,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "@Test",
            "@Order"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(demoService2Listener2.getConsumerUrl()).thenReturn(consumerURL2);",
        "line": 417,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "@Test",
            "@Order"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "demoServiceListener2",
    "variableType": "NotifyListener",
    "mockedClass": "NotifyListener",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client.event.listener",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java",
      "className": "ServiceInstancesChangedListenerWithoutEmptyProtectTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NotifyListener demoServiceListener2 = Mockito.mock(NotifyListener.class);",
        "line": 411,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "@Test",
            "@Order"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(demoServiceListener2.getConsumerUrl()).thenReturn(consumerURL);",
        "line": 412,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "@Test",
            "@Order"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "demoService2Listener2",
    "variableType": "NotifyListener",
    "mockedClass": "NotifyListener",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client.event.listener",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java",
      "className": "ServiceInstancesChangedListenerWithoutEmptyProtectTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NotifyListener demoService2Listener2 = Mockito.mock(NotifyListener.class);",
        "line": 415,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "@Test",
            "@Order"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(demoService2Listener2.getConsumerUrl()).thenReturn(consumerURL2);",
        "line": 416,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "@Test",
            "@Order"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "testServiceListener2",
    "variableType": "NotifyListener",
    "mockedClass": "NotifyListener",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\ServiceDiscoveryRegistryTest.java",
      "className": "ServiceDiscoveryRegistryTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// different interface mapping to the same apps\r\nNotifyListener testServiceListener2 = mock(NotifyListener.class);",
        "line": 226,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(testServiceListener2.getConsumerUrl()).thenReturn(url2);",
        "line": 228,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "testServiceListener2",
    "variableType": "NotifyListener",
    "mockedClass": "NotifyListener",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\ServiceDiscoveryRegistryTest.java",
      "className": "ServiceDiscoveryRegistryTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "NotifyListener testServiceListener2 = mock(NotifyListener.class);",
        "line": 266,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUnsubscribe",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(testServiceListener2.getConsumerUrl()).thenReturn(url2);",
        "line": 268,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testUnsubscribe",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
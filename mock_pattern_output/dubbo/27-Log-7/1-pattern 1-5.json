[
  {
    "variableName": "log",
    "variableType": "Log",
    "mockedClass": "Log",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.common.utils",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\LogUtilTest.java",
      "className": "LogUtilTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Log log = mock(Log.class);",
        "line": 45,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckNoError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(log.getLogLevel()).thenReturn(Level.ERROR);",
        "line": 47,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckNoError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(log.getLogLevel()).thenReturn(Level.INFO);",
        "line": 49,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testCheckNoError",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "log",
    "variableType": "Log",
    "mockedClass": "Log",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.common.utils",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\LogUtilTest.java",
      "className": "LogUtilTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Log log = mock(Log.class);",
        "line": 55,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFindName",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(log.getLogName()).thenReturn(\"a\");",
        "line": 57,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFindName",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "log",
    "variableType": "Log",
    "mockedClass": "Log",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.common.utils",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\LogUtilTest.java",
      "className": "LogUtilTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Log log = mock(Log.class);",
        "line": 63,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFindLevel",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(log.getLogLevel()).thenReturn(Level.ERROR);",
        "line": 65,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFindLevel",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "log",
    "variableType": "Log",
    "mockedClass": "Log",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.common.utils",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\LogUtilTest.java",
      "className": "LogUtilTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Log log = mock(Log.class);",
        "line": 85,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFindThread",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(log.getLogThread()).thenReturn(\"thread-1\");",
        "line": 87,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFindThread",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "log",
    "variableType": "Log",
    "mockedClass": "Log",
    "isReuseableMock": "Fully Localized",
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.common.utils",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\LogUtilTest.java",
      "className": "LogUtilTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "Log log = mock(Log.class);",
        "line": 93,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFindMessage1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(log.getLogMessage()).thenReturn(\"message\");",
        "line": 95,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testFindMessage1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
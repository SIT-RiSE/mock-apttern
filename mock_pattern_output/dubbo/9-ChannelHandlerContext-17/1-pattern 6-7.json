[
  {
    "variableName": "context",
    "variableType": "ChannelHandlerContext",
    "mockedClass": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.server.handler",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java",
      "className": "ForeignHostPermitHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
        "line": 45,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(context.channel()).thenReturn(channel);",
        "line": 47,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(context.writeAndFlush(any(ByteBuf.class))).thenReturn(future);",
        "line": 53,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(context).writeAndFlush(captor.capture());",
        "line": 61,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "context",
    "variableType": "ChannelHandlerContext",
    "mockedClass": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.server.handler",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java",
      "className": "ForeignHostPermitHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
        "line": 70,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(context.channel()).thenReturn(channel);",
        "line": 72,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(context.writeAndFlush(any(ByteBuf.class))).thenReturn(future);",
        "line": 79,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(context).writeAndFlush(captor.capture());",
        "line": 88,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "context",
    "variableType": "ChannelHandlerContext",
    "mockedClass": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.server.handler",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java",
      "className": "ForeignHostPermitHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
        "line": 97,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(context.channel()).thenReturn(channel);",
        "line": 99,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(context, never()).writeAndFlush(any());",
        "line": 111,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "context",
    "variableType": "ChannelHandlerContext",
    "mockedClass": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.server.handler",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java",
      "className": "ForeignHostPermitHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
        "line": 116,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(context.channel()).thenReturn(channel);",
        "line": 118,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(context, never()).writeAndFlush(any());",
        "line": 130,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "context",
    "variableType": "ChannelHandlerContext",
    "mockedClass": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.server.handler",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java",
      "className": "HttpProcessHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
        "line": 43,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(context.writeAndFlush(any(FullHttpResponse.class))).thenReturn(future);",
        "line": 45,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(context).writeAndFlush(captor.capture());",
        "line": 53,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test1",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "context",
    "variableType": "ChannelHandlerContext",
    "mockedClass": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.server.handler",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java",
      "className": "HttpProcessHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
        "line": 60,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(context.writeAndFlush(any(FullHttpResponse.class))).thenReturn(future);",
        "line": 62,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(context).writeAndFlush(captor.capture());",
        "line": 74,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test2",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  },
  {
    "variableName": "context",
    "variableType": "ChannelHandlerContext",
    "mockedClass": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.server.handler",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java",
      "className": "HttpProcessHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
        "line": 81,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test3",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(context.writeAndFlush(any(FullHttpResponse.class))).thenReturn(future);",
        "line": 83,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test3",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "verify(context).writeAndFlush(captor.capture());",
        "line": 95,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test3",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 6
  }
]
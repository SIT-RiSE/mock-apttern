[
  {
    "variableName": "channel",
    "variableType": "Channel",
    "mockedClass": "Channel",
    "isReuseableMock": "Hybrid",
    "mockPattern": "Creation:\n\u2014 Attribute Mock Creation\n\nStubbing:\n\u2014 @Before\n\nVerification:\n\u2014 Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.protocol.tri.transport",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\transport\\WriteQueueTest.java",
      "className": "WriteQueueTest"
    },
    "statements": [
      {
        "type": "FIELD_DECLARATION",
        "code": "private Channel channel;",
        "line": 53,
        "locate": "Attribute",
        "locationContext": {
          "methodName": "[FieldDeclaration]",
          "methodAnnotations": []
        }
      },
      {
        "type": "ASSIGNMENT",
        "code": "channel = Mockito.mock(Channel.class);",
        "line": 57,
        "locate": "@Before",
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(channel.parent()).thenReturn(parent);",
        "line": 63,
        "locate": "@Before",
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(channel.eventLoop()).thenReturn(eventLoop);",
        "line": 64,
        "locate": "@Before",
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(channel.isActive()).thenReturn(true);",
        "line": 65,
        "locate": "@Before",
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(channel.newPromise()).thenReturn(promise);",
        "line": 66,
        "locate": "@Before",
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(channel.write(Mockito.any(), Mockito.any())).thenAnswer((Answer<ChannelPromise>) invocationOnMock -> {\r\n    writeMethodCalledTimes.incrementAndGet();\r\n    return promise;\r\n});",
        "line": 67,
        "locate": "@Before",
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "@BeforeEach"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(channel, Mockito.times(4)).write(commandArgumentCaptor.capture(), promiseArgumentCaptor.capture());",
        "line": 100,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@Test",
            "@Disabled"
          ]
        }
      },
      {
        "type": "VERIFICATION",
        "code": "Mockito.verify(channel, Mockito.times(DEQUE_CHUNK_SIZE + 1)).write(Mockito.any(), Mockito.any());",
        "line": 127,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testChunk",
          "methodAnnotations": [
            "@Test",
            "@Disabled"
          ]
        }
      }
    ],
    "pattern_id": 15
  }
]
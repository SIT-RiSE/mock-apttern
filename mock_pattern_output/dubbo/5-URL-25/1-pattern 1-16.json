[
  {
    "variableName": "url",
    "variableType": "URL",
    "mockedClass": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.router.mesh.route",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleCacheTest.java",
      "className": "MeshRuleCacheTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "URL url = mock(URL.class);",
        "line": 53,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "containMapKeyValue",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(url.getOriginalServiceParameter(\"test\", \"key1\")).thenReturn(\"value1\");",
        "line": 54,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "containMapKeyValue",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(url.getOriginalServiceParameter(\"test\", \"key2\")).thenReturn(\"value2\");",
        "line": 55,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "containMapKeyValue",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(url.getOriginalServiceParameter(\"test\", \"key3\")).thenReturn(\"value3\");",
        "line": 56,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "containMapKeyValue",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(url.getOriginalServiceParameter(\"test\", \"key4\")).thenReturn(\"value4\");",
        "line": 57,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "containMapKeyValue",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "consumerURL",
    "variableType": "URL",
    "mockedClass": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.common.status.reporter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\status\\reporter\\FrameworkStatusReportServiceTest.java",
      "className": "FrameworkStatusReportServiceTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "// 2. createConsumptionReport\r\nURL consumerURL = Mockito.mock(URL.class);",
        "line": 54,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getServiceInterface()).thenReturn(\"Test\");",
        "line": 55,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getGroup()).thenReturn(\"Group\");",
        "line": 56,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getVersion()).thenReturn(\"0.0.0\");",
        "line": 57,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Group/Test:0.0.0\");",
        "line": 58,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getDisplayServiceKey()).thenReturn(\"Test:0.0.0\");",
        "line": 59,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "mockedClass": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.config",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-api\\src\\test\\java\\org\\apache\\dubbo\\config\\AbstractReferenceConfigTest.java",
      "className": "AbstractReferenceConfigTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "URL url = mock(URL.class);",
        "line": 109,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRouter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(url.getParameter(ROUTER_KEY)).thenReturn(\"condition\");",
        "line": 110,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRouter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(url.getParameter(ROUTER_KEY)).thenReturn(\"-tag,-app\");",
        "line": 117,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testRouter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "mockedClass": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.auth",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\AccessKeyAuthenticatorTest.java",
      "className": "AccessKeyAuthenticatorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "URL url = mock(URL.class);",
        "line": 122,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetSignatureWithParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(url.getParameter(Constants.PARAMETER_SIGNATURE_ENABLE_KEY, false)).thenReturn(true);",
        "line": 123,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetSignatureWithParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "mockedClass": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client.migration",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\DefaultMigrationAddressComparatorTest.java",
      "className": "DefaultMigrationAddressComparatorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "URL url = Mockito.mock(URL.class);",
        "line": 48,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(url.getDisplayServiceKey()).thenReturn(\"test\");",
        "line": 50,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "consumerURL",
    "variableType": "URL",
    "mockedClass": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client.migration",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java",
      "className": "MigrationInvokerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "URL consumerURL = Mockito.mock(URL.class);",
        "line": 92,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getServiceInterface()).thenReturn(\"Test\");",
        "line": 93,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getGroup()).thenReturn(\"Group\");",
        "line": 94,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getVersion()).thenReturn(\"0.0.0\");",
        "line": 95,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Group/Test:0.0.0\");",
        "line": 96,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getDisplayServiceKey()).thenReturn(\"Test:0.0.0\");",
        "line": 97,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getOrDefaultApplicationModel()).thenReturn(ApplicationModel.defaultModel());",
        "line": 98,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "consumerURL",
    "variableType": "URL",
    "mockedClass": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client.migration",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java",
      "className": "MigrationInvokerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "URL consumerURL = Mockito.mock(URL.class);",
        "line": 268,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getServiceInterface()).thenReturn(\"Test\");",
        "line": 269,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getGroup()).thenReturn(\"Group\");",
        "line": 270,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getVersion()).thenReturn(\"0.0.0\");",
        "line": 271,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Group/Test:0.0.0\");",
        "line": 272,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getDisplayServiceKey()).thenReturn(\"Test:0.0.0\");",
        "line": 273,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getOrDefaultApplicationModel()).thenReturn(ApplicationModel.defaultModel());",
        "line": 274,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "@SuppressWarnings",
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "mockedClass": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client.migration",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleHandlerTest.java",
      "className": "MigrationRuleHandlerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "URL url = Mockito.mock(URL.class);",
        "line": 32,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(url.getDisplayServiceKey()).thenReturn(\"test\");",
        "line": 33,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(url.getParameter(Mockito.any(), (String) Mockito.any())).thenAnswer(i -> i.getArgument(1));",
        "line": 34,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(url.getOrDefaultApplicationModel()).thenReturn(ApplicationModel.defaultModel());",
        "line": 35,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "consumerURL",
    "variableType": "URL",
    "mockedClass": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client.migration",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java",
      "className": "MigrationRuleListenerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "URL consumerURL = Mockito.mock(URL.class);",
        "line": 99,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Test\");",
        "line": 100,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getParameter(\"timestamp\")).thenReturn(\"1\");",
        "line": 101,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "consumerURL",
    "variableType": "URL",
    "mockedClass": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client.migration",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java",
      "className": "MigrationRuleListenerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "URL consumerURL = Mockito.mock(URL.class);",
        "line": 145,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithInitAndNoLocalRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Test\");",
        "line": 146,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithInitAndNoLocalRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getParameter(\"timestamp\")).thenReturn(\"1\");",
        "line": 147,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithInitAndNoLocalRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "consumerURL",
    "variableType": "URL",
    "mockedClass": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client.migration",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java",
      "className": "MigrationRuleListenerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "URL consumerURL = Mockito.mock(URL.class);",
        "line": 186,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Test\");",
        "line": 187,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL.getParameter(\"timestamp\")).thenReturn(\"1\");",
        "line": 188,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "consumerURL2",
    "variableType": "URL",
    "mockedClass": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client.migration",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java",
      "className": "MigrationRuleListenerTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "URL consumerURL2 = Mockito.mock(URL.class);",
        "line": 190,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL2.getServiceKey()).thenReturn(\"Test2\");",
        "line": 191,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(consumerURL2.getParameter(\"timestamp\")).thenReturn(\"2\");",
        "line": 192,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "mockedClass": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client.migration.model",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\model\\MigrationRuleTest.java",
      "className": "MigrationRuleTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "URL url = Mockito.mock(URL.class);",
        "line": 77,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(url.getScopeModel()).thenReturn(defaultModel);",
        "line": 81,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(url.getDisplayServiceKey()).thenReturn(\"DemoService:1.0.0\");",
        "line": 82,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(url.getParameter(ArgumentMatchers.eq(REGISTRY_CLUSTER_TYPE_KEY), anyString())).thenReturn(\"default\");",
        "line": 83,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(url.getParameter(ArgumentMatchers.eq(REGISTRY_CLUSTER_TYPE_KEY), anyString())).thenReturn(\"default\");",
        "line": 85,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(url.getDisplayServiceKey()).thenReturn(\"GreetingService:1.0.0\");",
        "line": 96,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(url.getDisplayServiceKey()).thenReturn(\"GreetingService:1.0.1\");",
        "line": 103,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "Mockito.when(url.getServiceInterface()).thenReturn(\"GreetingService\");",
        "line": 104,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "mockedClass": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.stub",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubProxyFactoryTest.java",
      "className": "StubProxyFactoryTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "URL url = Mockito.mock(URL.class);",
        "line": 38,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getProxy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(url.getServiceInterface()).thenReturn(service);",
        "line": 41,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getProxy",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "mockedClass": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.protocol.tri.call",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\call\\ReflectionServerCallTest.java",
      "className": "ReflectionServerCallTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "URL url = Mockito.mock(URL.class);",
        "line": 52,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(url.getServiceModel()).thenReturn(providerModel);",
        "line": 54,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "mockedClass": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 Test Case\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.protocol.tri.call",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\call\\StubServerCallTest.java",
      "className": "StubServerCallTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "URL url = Mockito.mock(URL.class);",
        "line": 47,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "@Test"
          ]
        }
      },
      {
        "type": "STUBBING",
        "code": "when(url.getServiceModel()).thenReturn(providerModel);",
        "line": 49,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 1
  }
]
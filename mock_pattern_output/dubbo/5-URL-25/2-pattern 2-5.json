[
  {
    "variableName": "url",
    "variableType": "URL",
    "mockedClass": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.auth",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\AccessKeyAuthenticatorTest.java",
      "className": "AccessKeyAuthenticatorTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "URL url = mock(URL.class);",
        "line": 112,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testGetSignatureNoParameter",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 2
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "mockedClass": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.auth.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ConsumerSignFilterTest.java",
      "className": "ConsumerSignFilterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "URL url = mock(URL.class);",
        "line": 40,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testAuthDisabled",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 2
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "mockedClass": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.remoting.transport.netty4",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyCodecAdapterTest.java",
      "className": "NettyCodecAdapterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "URL url = Mockito.mock(URL.class);",
        "line": 50,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 2
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "mockedClass": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.remoting.transport.netty4",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyCodecAdapterTest.java",
      "className": "NettyCodecAdapterTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "URL url = Mockito.mock(URL.class);",
        "line": 64,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "testDecodeException",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 2
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "mockedClass": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n\u2014 Local Mock Creation in Test Case\n\nStubbing:\n\u2014 None\n\nVerification:\n\u2014 None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.stub",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubProxyFactoryTest.java",
      "className": "StubProxyFactoryTest"
    },
    "statements": [
      {
        "type": "DECLARATION",
        "code": "URL url = Mockito.mock(URL.class);",
        "line": 64,
        "locate": "Test Case",
        "locationContext": {
          "methodName": "getInvoker",
          "methodAnnotations": [
            "@Test"
          ]
        }
      }
    ],
    "pattern_id": 2
  }
]